"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[87023],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),g=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=g(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=g(t),f=a,m=p["".concat(l,".").concat(f)]||p[f]||u[f]||i;return t?r.createElement(m,c(c({ref:n},s),{},{components:t})):r.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,c=new Array(i);c[0]=f;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:a,c[1]=o;for(var g=2;g<i;g++)c[g]=t[g];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},93778:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>g});var r=t(87462),a=(t(67294),t(3905));const i={},c="Huggingface TextGen Inference",o={unversionedId:"integrations/llms/huggingface_textgen_inference",id:"integrations/llms/huggingface_textgen_inference",title:"Huggingface TextGen Inference",description:"Text Generation Inference is a Rust, Python and gRPC server for text generation inference. Used in production at HuggingFace to power LLMs api-inference widgets.",source:"@site/docs/integrations/llms/huggingface_textgen_inference.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/huggingface_textgen_inference",permalink:"/langchain/docs/integrations/llms/huggingface_textgen_inference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Hugging Face Local Pipelines",permalink:"/langchain/docs/integrations/llms/huggingface_pipelines"},next:{title:"JSONFormer",permalink:"/langchain/docs/integrations/llms/jsonformer_experimental"}},l={},g=[{value:"Streaming",id:"streaming",level:3}],s={toc:g},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"huggingface-textgen-inference"},"Huggingface TextGen Inference"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/huggingface/text-generation-inference"},"Text Generation Inference")," is a Rust, Python and gRPC server for text generation inference. Used in production at ",(0,a.kt)("a",{parentName:"p",href:"https://huggingface.co/"},"HuggingFace")," to power LLMs api-inference widgets."),(0,a.kt)("p",null,"This notebooks goes over how to use a self hosted LLM using ",(0,a.kt)("inlineCode",{parentName:"p"},"Text Generation Inference"),"."),(0,a.kt)("p",null,"To use, you should have the ",(0,a.kt)("inlineCode",{parentName:"p"},"text_generation")," python package installed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# !pip3 install text_generation\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HuggingFaceTextGenInference", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.huggingface_text_gen_inference.HuggingFaceTextGenInference.html", "title": "Huggingface TextGen Inference"}]--\x3e\nfrom langchain.llms import HuggingFaceTextGenInference\n\nllm = HuggingFaceTextGenInference(\n    inference_server_url="http://localhost:8010/",\n    max_new_tokens=512,\n    top_k=10,\n    top_p=0.95,\n    typical_p=0.95,\n    temperature=0.01,\n    repetition_penalty=1.03,\n)\nllm("What did foo say about bar?")\n')),(0,a.kt)("h3",{id:"streaming"},"Streaming"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HuggingFaceTextGenInference", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.huggingface_text_gen_inference.HuggingFaceTextGenInference.html", "title": "Huggingface TextGen Inference"}, {"imported": "StreamingStdOutCallbackHandler", "source": "langchain.callbacks.streaming_stdout", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streaming_stdout.StreamingStdOutCallbackHandler.html", "title": "Huggingface TextGen Inference"}]--\x3e\nfrom langchain.llms import HuggingFaceTextGenInference\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n\n\nllm = HuggingFaceTextGenInference(\n    inference_server_url="http://localhost:8010/",\n    max_new_tokens=512,\n    top_k=10,\n    top_p=0.95,\n    typical_p=0.95,\n    temperature=0.01,\n    repetition_penalty=1.03,\n    streaming=True\n)\nllm("What did foo say about bar?", callbacks=[StreamingStdOutCallbackHandler()])\n')))}u.isMDXComponent=!0}}]);