"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[80761],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(t),g=a,d=m["".concat(p,".").concat(g)]||m[g]||u[g]||i;return t?r.createElement(d,l(l({ref:n},c),{},{components:t})):r.createElement(d,l({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},73383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const i={},l="RELLM",o={unversionedId:"integrations/llms/rellm_experimental",id:"integrations/llms/rellm_experimental",title:"RELLM",description:"RELLM is a library that wraps local Hugging Face pipeline models for structured decoding.",source:"@site/docs/integrations/llms/rellm_experimental.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/rellm_experimental",permalink:"/langchain/docs/integrations/llms/rellm_experimental",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"PromptLayer OpenAI",permalink:"/langchain/docs/integrations/llms/promptlayer_openai"},next:{title:"Replicate",permalink:"/langchain/docs/integrations/llms/replicate"}},p={},s=[{value:"Hugging Face Baseline",id:"hugging-face-baseline",level:3},{value:"RELLM LLM Wrapper",id:"rellm-llm-wrapper",level:2}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const u={toc:s},g="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(g,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rellm"},"RELLM"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/r2d4/rellm"},"RELLM")," is a library that wraps local Hugging Face pipeline models for structured decoding."),(0,a.kt)("p",null,"It works by generating tokens one at a time. At each step, it masks tokens that don't conform to the provided partial regular expression."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Warning - this module is still experimental")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install rellm > /dev/null\n")),(0,a.kt)("h3",{id:"hugging-face-baseline"},"Hugging Face Baseline"),(0,a.kt)("p",null,"First, let's establish a qualitative baseline by checking the output of the model without structured decoding."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import logging\n\nlogging.basicConfig(level=logging.ERROR)\nprompt = """Human: "What\'s the capital of the United States?"\nAI Assistant:{\n  "action": "Final Answer",\n  "action_input": "The capital of the United States is Washington D.C."\n}\nHuman: "What\'s the capital of Pennsylvania?"\nAI Assistant:{\n  "action": "Final Answer",\n  "action_input": "The capital of Pennsylvania is Harrisburg."\n}\nHuman: "What 2 + 5?"\nAI Assistant:{\n  "action": "Final Answer",\n  "action_input": "2 + 5 = 7."\n}\nHuman: \'What\'s the capital of Maryland?\'\nAI Assistant:"""\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HuggingFacePipeline", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.huggingface_pipeline.HuggingFacePipeline.html", "title": "RELLM"}]--\x3e\nfrom transformers import pipeline\nfrom langchain.llms import HuggingFacePipeline\n\nhf_model = pipeline(\n    "text-generation", model="cerebras/Cerebras-GPT-590M", max_new_tokens=200\n)\n\noriginal_model = HuggingFacePipeline(pipeline=hf_model)\n\ngenerated = original_model.generate([prompt], stop=["Human:"])\nprint(generated)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n\n\n    generations=[[Generation(text=' \"What\\'s the capital of Maryland?\"\\n', generation_info=None)]] llm_output=None\n"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"That's not so impressive, is it? It didn't answer the question and it didn't follow the JSON format at all! Let's try with the structured decoder."))),(0,a.kt)("h2",{id:"rellm-llm-wrapper"},"RELLM LLM Wrapper"),(0,a.kt)("p",null,"Let's try that again, now providing a regex to match the JSON structured format."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import regex  # Note this is the regex library NOT python\'s re stdlib module\n\n# We\'ll choose a regex that matches to a structured json string that looks like:\n# {\n#  "action": "Final Answer",\n# "action_input": string or dict\n# }\npattern = regex.compile(\n    r\'\\{\\s*"action":\\s*"Final Answer",\\s*"action_input":\\s*(\\{.*\\}|"[^"]*")\\s*\\}\\nHuman:\'\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from langchain_experimental.llms import RELLM\n\nmodel = RELLM(pipeline=hf_model, regex=pattern, max_new_tokens=200)\n\ngenerated = model.predict(prompt, stop=["Human:"])\nprint(generated)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    {"action": "Final Answer",\n      "action_input": "The capital of Maryland is Baltimore."\n    }\n    \n'))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Voila! Free of parsing errors.")))}d.isMDXComponent=!0}}]);