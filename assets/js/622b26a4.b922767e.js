"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[92480],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(a),u=r,m=p["".concat(l,".").concat(u)]||p[u]||h[u]||i;return a?n.createElement(m,o(o({ref:t},d),{},{components:a})):n.createElement(m,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},13713:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i={},o="Elasticsearch",s={unversionedId:"integrations/vectorstores/elasticsearch",id:"integrations/vectorstores/elasticsearch",title:"Elasticsearch",description:"Elasticsearch is a distributed, RESTful search and analytics engine, capable of performing both vector and lexical search. It is built on top of the Apache Lucene library.",source:"@site/docs/integrations/vectorstores/elasticsearch.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/elasticsearch",permalink:"/langchain/docs/integrations/vectorstores/elasticsearch",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"DocArray InMemorySearch",permalink:"/langchain/docs/integrations/vectorstores/docarray_in_memory"},next:{title:"Epsilla",permalink:"/langchain/docs/integrations/vectorstores/epsilla"}},l={},c=[{value:"Running and connecting to Elasticsearch",id:"running-and-connecting-to-elasticsearch",level:2},{value:"Running Elasticsearch via Docker",id:"running-elasticsearch-via-docker",level:3},{value:"Authentication",id:"authentication",level:3},{value:"How to obtain a password for the default &quot;elastic&quot; user?",id:"how-to-obtain-a-password-for-the-default-elastic-user",level:4},{value:"How to obtain an API key?",id:"how-to-obtain-an-api-key",level:4},{value:"Elastic Cloud",id:"elastic-cloud",level:3},{value:"Basic Example",id:"basic-example",level:2},{value:"Filtering Metadata",id:"filtering-metadata",level:2},{value:"Example: Filter by keyword",id:"example-filter-by-keyword",level:3},{value:"Example: Filter by Date Range",id:"example-filter-by-date-range",level:3},{value:"Example: Filter by Numeric Range",id:"example-filter-by-numeric-range",level:3},{value:"Example: Filter by Geo Distance",id:"example-filter-by-geo-distance",level:3},{value:"ApproxRetrievalStrategy",id:"approxretrievalstrategy",level:2},{value:"Example: Approx with hybrid",id:"example-approx-with-hybrid",level:3},{value:"Example: Approx with Embedding Model in Elasticsearch",id:"example-approx-with-embedding-model-in-elasticsearch",level:3},{value:"SparseVectorRetrievalStrategy (ELSER)",id:"sparsevectorretrievalstrategy-elser",level:2},{value:"ExactRetrievalStrategy",id:"exactretrievalstrategy",level:2},{value:"What&#39;s new?",id:"whats-new",level:2},{value:"Im using ElasticKNNSearch",id:"im-using-elasticknnsearch",level:2},{value:"Im using ElasticVectorSearch",id:"im-using-elasticvectorsearch",level:2}],d=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const h={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"elasticsearch"},"Elasticsearch"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://www.elastic.co/elasticsearch/"},"Elasticsearch")," is a distributed, RESTful search and analytics engine, capable of performing both vector and lexical search. It is built on top of the Apache Lucene library. ")),(0,r.kt)("p",null,"This notebook shows how to use functionality related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Elasticsearch")," database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install elasticsearch openai tiktoken langchain\n")),(0,r.kt)("h2",{id:"running-and-connecting-to-elasticsearch"},"Running and connecting to Elasticsearch"),(0,r.kt)("p",null,"There are two main ways to setup an Elasticsearch instance for use with:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Elastic Cloud: Elastic Cloud is a managed Elasticsearch service. Signup for a ",(0,r.kt)("a",{parentName:"li",href:"https://cloud.elastic.co/registration?storm=langchain-notebook"},"free trial"),".")),(0,r.kt)("p",null,"To connect to an Elasticsearch instance that does not require\nlogin credentials (starting the docker instance with security enabled), pass the Elasticsearch URL and index name along with the\nembedding object to the constructor."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Local Install Elasticsearch: Get started with Elasticsearch by running it locally. The easiest way is to use the official Elasticsearch Docker image. See the ",(0,r.kt)("a",{parentName:"li",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html"},"Elasticsearch Docker documentation")," for more information.")),(0,r.kt)("h3",{id:"running-elasticsearch-via-docker"},"Running Elasticsearch via Docker"),(0,r.kt)("p",null,"Example: Run a single-node Elasticsearch instance with security disabled. This is not recommended for production use."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'    docker run -p 9200:9200 -e "discovery.type=single-node" -e "xpack.security.enabled=false" -e "xpack.security.http.ssl.enabled=false" docker.elastic.co/elasticsearch/elasticsearch:8.9.0\n')),(0,r.kt)("p",null,"Once the Elasticsearch instance is running, you can connect to it using the Elasticsearch URL and index name along with the embedding object to the constructor."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ElasticsearchStore", "source": "langchain.vectorstores.elasticsearch", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html", "title": "Elasticsearch"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Elasticsearch"}]--\x3e\n        from langchain.vectorstores.elasticsearch import ElasticsearchStore\n        from langchain.embeddings.openai import OpenAIEmbeddings\n\n        embedding = OpenAIEmbeddings()\n        elastic_vector_search = ElasticsearchStore(\n            es_url="http://localhost:9200",\n            index_name="test_index",\n            embedding=embedding\n        )\n')),(0,r.kt)("h3",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"For production, we recommend you run with security enabled. To connect with login credentials, you can use the parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"api_key")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"es_user")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"es_password"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ElasticsearchStore", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html", "title": "Elasticsearch"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Elasticsearch"}]--\x3e\n        from langchain.vectorstores import ElasticsearchStore\n        from langchain.embeddings import OpenAIEmbeddings\n\n        embedding = OpenAIEmbeddings()\n        elastic_vector_search = ElasticsearchStore(\n            es_url="http://localhost:9200",\n            index_name="test_index",\n            embedding=embedding,\n            es_user="elastic",\n            es_password="changeme"\n        )\n')),(0,r.kt)("h4",{id:"how-to-obtain-a-password-for-the-default-elastic-user"},'How to obtain a password for the default "elastic" user?'),(0,r.kt)("p",null,'To obtain your Elastic Cloud password for the default "elastic" user:'),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Log in to the Elastic Cloud console at ",(0,r.kt)("a",{parentName:"li",href:"https://cloud.elastic.co"},"https://cloud.elastic.co")),(0,r.kt)("li",{parentName:"ol"},'Go to "Security" > "Users"'),(0,r.kt)("li",{parentName:"ol"},'Locate the "elastic" user and click "Edit"'),(0,r.kt)("li",{parentName:"ol"},'Click "Reset password"'),(0,r.kt)("li",{parentName:"ol"},"Follow the prompts to reset the password")),(0,r.kt)("h4",{id:"how-to-obtain-an-api-key"},"How to obtain an API key?"),(0,r.kt)("p",null,"To obtain an API key:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Log in to the Elastic Cloud console at ",(0,r.kt)("a",{parentName:"li",href:"https://cloud.elastic.co"},"https://cloud.elastic.co")),(0,r.kt)("li",{parentName:"ol"},"Open Kibana and go to Stack Management > API Keys"),(0,r.kt)("li",{parentName:"ol"},'Click "Create API key"'),(0,r.kt)("li",{parentName:"ol"},'Enter a name for the API key and click "Create"'),(0,r.kt)("li",{parentName:"ol"},"Copy the API key and paste it into the ",(0,r.kt)("inlineCode",{parentName:"li"},"api_key")," parameter")),(0,r.kt)("h3",{id:"elastic-cloud"},"Elastic Cloud"),(0,r.kt)("p",null,"To connect to an Elasticsearch instance on Elastic Cloud, you can use either the ",(0,r.kt)("inlineCode",{parentName:"p"},"es_cloud_id")," parameter or ",(0,r.kt)("inlineCode",{parentName:"p"},"es_url"),"."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ElasticsearchStore", "source": "langchain.vectorstores.elasticsearch", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html", "title": "Elasticsearch"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Elasticsearch"}]--\x3e\n        from langchain.vectorstores.elasticsearch import ElasticsearchStore\n        from langchain.embeddings import OpenAIEmbeddings\n\n        embedding = OpenAIEmbeddings()\n        elastic_vector_search = ElasticsearchStore(\n            es_cloud_id="<cloud_id>",\n            index_name="test_index",\n            embedding=embedding,\n            es_user="elastic",\n            es_password="changeme"\n        )\n')),(0,r.kt)("p",null,"We want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAIEmbeddings")," so we have to get the OpenAI API Key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,r.kt)("h2",{id:"basic-example"},"Basic Example"),(0,r.kt)("p",null,'This example we are going to load "state_of_the_union.txt" via the TextLoader, chunk the text into 500 word chunks, and then index each chunk into Elasticsearch.'),(0,r.kt)("p",null,'Once the data is indexed, we perform a simple query to find the top 4 chunks that similar to the query "What did the president say about Ketanji Brown Jackson".'),(0,r.kt)("p",null,"Elasticsearch is running locally on localhost:9200 with ",(0,r.kt)("a",{parentName:"p",href:"#running-elasticsearch-via-docker"},"docker"),". For more details on how to connect to Elasticsearch from Elastic Cloud, see ",(0,r.kt)("a",{parentName:"p",href:"#authentication"},"connecting with authentication")," above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Elasticsearch"}, {"imported": "ElasticsearchStore", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html", "title": "Elasticsearch"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores import ElasticsearchStore\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Elasticsearch"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Elasticsearch"}]--\x3e\nfrom langchain.document_loaders import TextLoader\nfrom langchain.text_splitter import CharacterTextSplitter\n\nloader = TextLoader("../../modules/state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'db = ElasticsearchStore.from_documents(\n    docs, embeddings, es_url="http://localhost:9200", index_name="test-basic", \n)\n\ndb.client.indices.refresh(index="test-basic")\n\nquery = "What did the president say about Ketanji Brown Jackson"\nresults = db.similarity_search(query)\nprint(results)\n')),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content='One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.', metadata={'source': '../../modules/state_of_the_union.txt'}), Document(page_content='One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.', metadata={'source': '../../modules/state_of_the_union.txt', 'date': '2016-01-01', 'rating': 2, 'author': 'John Doe'}), Document(page_content='One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.', metadata={'source': '../../modules/state_of_the_union.txt', 'date': '2010-01-01', 'rating': 1, 'author': 'John Doe'}), Document(page_content='As I said last year, especially to our younger transgender Americans, I will always have your back as your President, so you can be yourself and reach your God-given potential. \\n\\nWhile it often appears that we never agree, that isn\u2019t true. I signed 80 bipartisan bills into law last year. From preventing government shutdowns to protecting Asian-Americans from still-too-common hate crimes to reforming military justice.', metadata={'source': '../../modules/state_of_the_union.txt'})]\n"))),(0,r.kt)("h1",{id:"metadata"},"Metadata"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," supports metadata to stored along with the document. This metadata dict object is stored in a metadata object field in the Elasticsearch document. Based on the metadata value, Elasticsearch will automatically setup the mapping by infering the data type of the metadata value. For example, if the metadata value is a string, Elasticsearch will setup the mapping for the metadata object field as a string type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Adding metadata to documents\nfor i, doc in enumerate(docs):\n    doc.metadata["date"] = f"{range(2010, 2020)[i % 10]}-01-01"\n    doc.metadata["rating"] = range(1, 6)[i % 5] \n    doc.metadata["author"] = ["John Doe", "Jane Doe"][i % 2]\n\ndb = ElasticsearchStore.from_documents(\n    docs, embeddings, es_url="http://localhost:9200", index_name="test-metadata"\n)\n\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = db.similarity_search(query)\nprint(docs[0].metadata)\n')),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'source': '../../modules/state_of_the_union.txt', 'date': '2016-01-01', 'rating': 2, 'author': 'John Doe'}\n"))),(0,r.kt)("h2",{id:"filtering-metadata"},"Filtering Metadata"),(0,r.kt)("p",null,"With metadata added to the documents, you can add metadata filtering at query time. "),(0,r.kt)("h3",{id:"example-filter-by-keyword"},"Example: Filter by keyword"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docs = db.similarity_search(query, filter=[{ "match": { "metadata.author": "John Doe"}}])\nprint(docs[0].metadata)\n')),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'source': '../../modules/state_of_the_union.txt', 'date': '2010-01-01', 'rating': 1, 'author': 'John Doe', 'geo_location': {'lat': 40.12, 'lon': -71.34}}\n"))),(0,r.kt)("h3",{id:"example-filter-by-date-range"},"Example: Filter by Date Range"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docs = db.similarity_search("Any mention about Fred?", filter=[{ "range": { "metadata.date": { "gte": "2010-01-01" }}}])\nprint(docs[0].metadata)\n')),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'source': '../../modules/state_of_the_union.txt', 'date': '2012-01-01', 'rating': 3, 'author': 'John Doe', 'geo_location': {'lat': 40.12, 'lon': -71.34}}\n"))),(0,r.kt)("h3",{id:"example-filter-by-numeric-range"},"Example: Filter by Numeric Range"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docs = db.similarity_search("Any mention about Fred?", filter=[{ "range": { "metadata.rating": { "gte": 2 }}}])\nprint(docs[0].metadata)\n')),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'source': '../../modules/state_of_the_union.txt', 'date': '2012-01-01', 'rating': 3, 'author': 'John Doe', 'geo_location': {'lat': 40.12, 'lon': -71.34}}\n"))),(0,r.kt)("h3",{id:"example-filter-by-geo-distance"},"Example: Filter by Geo Distance"),(0,r.kt)("p",null,"Requires an index with a geo_point mapping to be declared for ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata.geo_location"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docs = db.similarity_search("Any mention about Fred?", filter=[{ "geo_distance": { "distance": "200km", "metadata.geo_location": { "lat": 40, "lon": -70 } } }])\nprint(docs[0].metadata)\n')),(0,r.kt)("p",null,"Filter supports many more types of queries than above. "),(0,r.kt)("p",null,"Read more about them in the ",(0,r.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html"},"documentation"),"."),(0,r.kt)("h1",{id:"distance-similarity-algorithm"},"Distance Similarity Algorithm"),(0,r.kt)("p",null,"Elasticsearch supports the following vector distance similarity algorithms:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cosine"),(0,r.kt)("li",{parentName:"ul"},"euclidean"),(0,r.kt)("li",{parentName:"ul"},"dot_product")),(0,r.kt)("p",null,"The cosine similarity algorithm is the default."),(0,r.kt)("p",null,"You can specify the similarity Algorithm needed via the similarity parameter."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE"),"\nDepending on the retrieval strategy, the similarity algorithm cannot be changed at query time. It is needed to be set when creating the index mapping for field. If you need to change the similarity algorithm, you need to delete the index and recreate it with the correct distance_strategy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\ndb = ElasticsearchStore.from_documents(\n    docs, \n    embeddings, \n    es_url="http://localhost:9200", \n    index_name="test",\n    distance_strategy="COSINE"\n    # distance_strategy="EUCLIDEAN_DISTANCE"\n    # distance_strategy="DOT_PRODUCT"\n)\n\n')),(0,r.kt)("h1",{id:"retrieval-strategies"},"Retrieval Strategies"),(0,r.kt)("p",null,"Elasticsearch has big advantages over other vector only databases from its ability to support a wide range of retrieval strategies.  In this notebook we will configure ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," to support some of the most common retrieval strategies. "),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"ApproxRetrievalStrategy"),"."),(0,r.kt)("h2",{id:"approxretrievalstrategy"},"ApproxRetrievalStrategy"),(0,r.kt)("p",null,"This will return the top ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," most similar vectors to the query vector.  The ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," parameter is set when the ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," is initialized.  The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"10"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'db = ElasticsearchStore.from_documents(\n    docs, \n    embeddings, \n    es_url="http://localhost:9200", \n    index_name="test",\n    strategy=ElasticsearchStore.ApproxRetrievalStrategy()\n)\n\ndocs = db.similarity_search(query="What did the president say about Ketanji Brown Jackson?", k=10)\n')),(0,r.kt)("h3",{id:"example-approx-with-hybrid"},"Example: Approx with hybrid"),(0,r.kt)("p",null,"This example will show how to configure ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," to perform a hybrid retrieval, using a combination of approximate semantic search and keyword based search. "),(0,r.kt)("p",null,"We use RRF to balance the two scores from different retrieval methods."),(0,r.kt)("p",null,"To enable hybrid retrieval, we need to set ",(0,r.kt)("inlineCode",{parentName:"p"},"hybrid=True")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," ",(0,r.kt)("inlineCode",{parentName:"p"},"ApproxRetrievalStrategy")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\ndb = ElasticsearchStore.from_documents(\n    docs, \n    embeddings, \n    es_url="http://localhost:9200", \n    index_name="test",\n    strategy=ElasticsearchStore.ApproxRetrievalStrategy(\n        hybrid=True,\n    )\n)\n')),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"hybrid")," is enabled, the query performed will be a combination of approximate semantic search and keyword based search. "),(0,r.kt)("p",null,"It will use ",(0,r.kt)("inlineCode",{parentName:"p"},"rrf")," (Reciprocal Rank Fusion) to balance the two scores from different retrieval methods."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")," RRF requires Elasticsearch 8.9.0 or above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "knn": {\n        "field": "vector",\n        "filter": [],\n        "k": 1,\n        "num_candidates": 50,\n        "query_vector": [1.0, ..., 0.0],\n    },\n    "query": {\n        "bool": {\n            "filter": [],\n            "must": [{"match": {"text": {"query": "foo"}}}],\n        }\n    },\n    "rank": {"rrf": {}},\n}\n')),(0,r.kt)("h3",{id:"example-approx-with-embedding-model-in-elasticsearch"},"Example: Approx with Embedding Model in Elasticsearch"),(0,r.kt)("p",null,"This example will show how to configure ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," to use the embedding model deployed in Elasticsearch for approximate retrieval. "),(0,r.kt)("p",null,"To use this, specify the model_id in ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," ",(0,r.kt)("inlineCode",{parentName:"p"},"ApproxRetrievalStrategy")," constructor via the ",(0,r.kt)("inlineCode",{parentName:"p"},"query_model_id")," argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE")," This requires the model to be deployed and running in Elasticsearch ml node. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/elastic/elasticsearch-labs/blob/main/notebooks/integrations/hugging-face/loading-model-from-hugging-face.ipynb"},"notebook example")," on how to deploy the model with eland."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'APPROX_SELF_DEPLOYED_INDEX_NAME = "test-approx-self-deployed"\n\n# Note: This does not have an embedding function specified\n# Instead, we will use the embedding model deployed in Elasticsearch\ndb = ElasticsearchStore( \n    es_cloud_id="<your cloud id>",\n    es_user="elastic",\n    es_password="<your password>", \n    index_name=APPROX_SELF_DEPLOYED_INDEX_NAME,\n    query_field="text_field",\n    vector_query_field="vector_query_field.predicted_value",\n    strategy=ElasticsearchStore.ApproxRetrievalStrategy(\n      query_model_id="sentence-transformers__all-minilm-l6-v2"\n    )\n)\n\n# Setup a Ingest Pipeline to perform the embedding\n# of the text field\ndb.client.ingest.put_pipeline(\n    id="test_pipeline",\n    processors=[\n        {\n            "inference": {\n                "model_id": "sentence-transformers__all-minilm-l6-v2",\n                "field_map": {"query_field": "text_field"},\n                "target_field": "vector_query_field",\n            }\n        }\n    ],\n)\n\n# creating a new index with the pipeline,\n# not relying on langchain to create the index\ndb.client.indices.create(\n    index=APPROX_SELF_DEPLOYED_INDEX_NAME,\n    mappings={\n        "properties": {\n            "text_field": {"type": "text"},\n            "vector_query_field": {\n                "properties": {\n                    "predicted_value": {\n                        "type": "dense_vector",\n                        "dims": 384,\n                        "index": True,\n                        "similarity": "l2_norm",\n                    }\n                }\n            },\n        }\n    },\n    settings={"index": {"default_pipeline": "test_pipeline"}},\n)\n\ndb.from_texts(["hello world"],     \n    es_cloud_id="<cloud id>",\n    es_user="elastic",\n    es_password="<cloud password>", \n    index_name=APPROX_SELF_DEPLOYED_INDEX_NAME,\n    query_field="text_field",\n    vector_query_field="vector_query_field.predicted_value",\n    strategy=ElasticsearchStore.ApproxRetrievalStrategy(\n      query_model_id="sentence-transformers__all-minilm-l6-v2"\n    ))\n\n# Perform search\ndb.similarity_search("hello world", k=10)\n')),(0,r.kt)("h2",{id:"sparsevectorretrievalstrategy-elser"},"SparseVectorRetrievalStrategy (ELSER)"),(0,r.kt)("p",null,'This strategy uses Elasticsearch\'s sparse vector retrieval to retrieve the top-k results. We only support our own "ELSER" embedding model for now.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE")," This requires the ELSER model to be deployed and running in Elasticsearch ml node. "),(0,r.kt)("p",null,"To use this, specify ",(0,r.kt)("inlineCode",{parentName:"p"},"SparseVectorRetrievalStrategy")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Note that this example doesn\'t have an embedding function. This is because we infer the tokens at index time and at query time within Elasticsearch. \n# This requires the ELSER model to be loaded and running in Elasticsearch.\ndb = ElasticsearchStore.from_documents(\n    docs, \n    es_cloud_id="My_deployment:dXMtY2VudHJhbDEuZ2NwLmNsb3VkLmVzLmlvOjQ0MyQ2OGJhMjhmNDc1M2Y0MWVjYTk2NzI2ZWNkMmE5YzRkNyQ3NWI4ODRjNWQ2OTU0MTYzODFjOTkxNmQ1YzYxMGI1Mw==",\n    es_user="elastic",\n    es_password="GgUPiWKwEzgHIYdHdgPk1Lwi",\n    index_name="test-elser",\n    strategy=ElasticsearchStore.SparseVectorRetrievalStrategy()\n)\n\ndb.client.indices.refresh(index="test-elser")\n\nresults = db.similarity_search("What did the president say about Ketanji Brown Jackson", k=4)\nprint(results[0])\n')),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    page_content='One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.' metadata={'source': '../../modules/state_of_the_union.txt'}\n"))),(0,r.kt)("h2",{id:"exactretrievalstrategy"},"ExactRetrievalStrategy"),(0,r.kt)("p",null,"This strategy uses Elasticsearch's exact retrieval (also known as brute force) to retrieve the top-k results."),(0,r.kt)("p",null,"To use this, specify ",(0,r.kt)("inlineCode",{parentName:"p"},"ExactRetrievalStrategy")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\ndb = ElasticsearchStore.from_documents(\n    docs, \n    embeddings, \n    es_url="http://localhost:9200", \n    index_name="test",\n    strategy=ElasticsearchStore.ExactRetrievalStrategy()\n)\n')),(0,r.kt)("h1",{id:"customise-the-query"},"Customise the Query"),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"custom_query")," parameter at search, you are able to adjust the query that is used to retrieve documents from Elasticsearch. This is useful if you want to want to use a more complex query, to support linear boosting of fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Example of a custom query thats just doing a BM25 search on the text field.\ndef custom_query(query_body: dict, query: str):\n    """Custom query to be used in Elasticsearch.\n    Args:\n        query_body (dict): Elasticsearch query body.\n        query (str): Query string.\n    Returns:\n        dict: Elasticsearch query body.\n    """\n    print("Query Retriever created by the retrieval strategy:")\n    print(query_body)\n    print()\n\n    new_query_body = {\n        "query": {\n            "match": {\n                "text": query\n            }\n        }\n    }\n\n    print("Query thats actually used in Elasticsearch:")\n    print(new_query_body)\n    print()\n\n    return new_query_body\n\nresults = db.similarity_search("What did the president say about Ketanji Brown Jackson", k=4, custom_query=custom_query)\nprint("Results:")\nprint(results[0])\n')),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Query Retriever created by the retrieval strategy:\n    {'query': {'bool': {'must': [{'text_expansion': {'vector.tokens': {'model_id': '.elser_model_1', 'model_text': 'What did the president say about Ketanji Brown Jackson'}}}], 'filter': []}}}\n    \n    Query thats actually used in Elasticsearch:\n    {'query': {'match': {'text': 'What did the president say about Ketanji Brown Jackson'}}}\n    \n    Results:\n    page_content='One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.' metadata={'source': '../../modules/state_of_the_union.txt'}\n"))),(0,r.kt)("h1",{id:"upgrading-to-elasticsearchstore"},"Upgrading to ElasticsearchStore"),(0,r.kt)("p",null,"If you're already using Elasticsearch in your langchain based project, you may be using the old implementations: ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticVectorSearch")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticKNNSearch")," which are now deprecated. We've introduced a new implementation called ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," which is more flexible and easier to use. This notebook will guide you through the process of upgrading to the new implementation."),(0,r.kt)("h2",{id:"whats-new"},"What's new?"),(0,r.kt)("p",null,"The new implementation is now one class called ",(0,r.kt)("inlineCode",{parentName:"p"},"ElasticsearchStore")," which can be used for approx, exact, and ELSER search retrieval, via strategies."),(0,r.kt)("h2",{id:"im-using-elasticknnsearch"},"Im using ElasticKNNSearch"),(0,r.kt)("p",null,"Old implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom langchain.vectorstores.elastic_vector_search import ElasticKNNSearch\n\ndb = ElasticKNNSearch(\n  elasticsearch_url="http://localhost:9200",\n  index_name="test_index",\n  embedding=embedding\n)\n\n')),(0,r.kt)("p",null,"New implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ElasticsearchStore", "source": "langchain.vectorstores.elasticsearch", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html", "title": "Elasticsearch"}]--\x3e\n\nfrom langchain.vectorstores.elasticsearch import ElasticsearchStore\n\ndb = ElasticsearchStore(\n  es_url="http://localhost:9200",\n  index_name="test_index",\n  embedding=embedding,\n  # if you use the model_id\n  # strategy=ElasticsearchStore.ApproxRetrievalStrategy( query_model_id="test_model" )\n  # if you use hybrid search\n  # strategy=ElasticsearchStore.ApproxRetrievalStrategy( hybrid=True )\n)\n\n')),(0,r.kt)("h2",{id:"im-using-elasticvectorsearch"},"Im using ElasticVectorSearch"),(0,r.kt)("p",null,"Old implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ElasticVectorSearch", "source": "langchain.vectorstores.elastic_vector_search", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elastic_vector_search.ElasticVectorSearch.html", "title": "Elasticsearch"}]--\x3e\n\nfrom langchain.vectorstores.elastic_vector_search import ElasticVectorSearch\n\ndb = ElasticVectorSearch(\n  elasticsearch_url="http://localhost:9200",\n  index_name="test_index",\n  embedding=embedding\n)\n\n')),(0,r.kt)("p",null,"New implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ElasticsearchStore", "source": "langchain.vectorstores.elasticsearch", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html", "title": "Elasticsearch"}]--\x3e\n\nfrom langchain.vectorstores.elasticsearch import ElasticsearchStore\n\ndb = ElasticsearchStore(\n  es_url="http://localhost:9200",\n  index_name="test_index",\n  embedding=embedding,\n  strategy=ElasticsearchStore.ExactRetrievalStrategy()\n)\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"db.client.indices.delete(index='test-metadata, test-elser, test-basic', ignore_unavailable=True, allow_no_indices=True)\n")),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    ObjectApiResponse({'acknowledged': True})\n"))))}m.isMDXComponent=!0}}]);