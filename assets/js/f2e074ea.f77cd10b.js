"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[38044],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),g=c(a),m=o,d=g["".concat(s,".").concat(m)]||g[m]||u[m]||i;return a?n.createElement(d,l(l({ref:t},p),{},{components:a})):n.createElement(d,l({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,l=new Array(i);l[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[g]="string"==typeof e?e:o,l[1]=r;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},65333:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=a(87462),o=(a(67294),a(3905));const i={},l="Gmail",r={unversionedId:"integrations/toolkits/gmail",id:"integrations/toolkits/gmail",title:"Gmail",description:"This notebook walks through connecting a LangChain email to the Gmail API.",source:"@site/docs/integrations/toolkits/gmail.md",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/gmail",permalink:"/langchain/docs/integrations/toolkits/gmail",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Github",permalink:"/langchain/docs/integrations/toolkits/github"},next:{title:"Google Drive tool",permalink:"/langchain/docs/integrations/toolkits/google_drive"}},s={},c=[{value:"Create the Toolkit",id:"create-the-toolkit",level:2},{value:"Customizing Authentication",id:"customizing-authentication",level:2},{value:"Use within an Agent",id:"use-within-an-agent",level:2}],p=(g="CodeOutputBlock",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var g;const u={toc:c},m="wrapper";function d(e){let{components:t,...a}=e;return(0,o.kt)(m,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gmail"},"Gmail"),(0,o.kt)("p",null,"This notebook walks through connecting a LangChain email to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Gmail API"),"."),(0,o.kt)("p",null,"To use this toolkit, you will need to set up your credentials explained in the ",(0,o.kt)("a",{parentName:"p",href:"https://developers.google.com/gmail/api/quickstart/python#authorize_credentials_for_a_desktop_application"},"Gmail API docs"),". Once you've downloaded the ",(0,o.kt)("inlineCode",{parentName:"p"},"credentials.json")," file, you can start using the Gmail API. Once this is done, we'll install the required libraries."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install --upgrade google-api-python-client > /dev/null\npip install --upgrade google-auth-oauthlib > /dev/null\npip install --upgrade google-auth-httplib2 > /dev/null\npip install beautifulsoup4 > /dev/null # This is optional but is useful for parsing HTML messages\n")),(0,o.kt)("h2",{id:"create-the-toolkit"},"Create the Toolkit"),(0,o.kt)("p",null,"By default the toolkit reads the local ",(0,o.kt)("inlineCode",{parentName:"p"},"credentials.json")," file. You can also manually provide a ",(0,o.kt)("inlineCode",{parentName:"p"},"Credentials")," object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GmailToolkit", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.gmail.toolkit.GmailToolkit.html", "title": "Gmail"}]--\x3e\nfrom langchain.agents.agent_toolkits import GmailToolkit\n\ntoolkit = GmailToolkit()\n')),(0,o.kt)("h2",{id:"customizing-authentication"},"Customizing Authentication"),(0,o.kt)("p",null,"Behind the scenes, a ",(0,o.kt)("inlineCode",{parentName:"p"},"googleapi")," resource is created using the following methods.\nyou can manually build a ",(0,o.kt)("inlineCode",{parentName:"p"},"googleapi")," resource for more auth control. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "build_resource_service", "source": "langchain.tools.gmail.utils", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.gmail.utils.build_resource_service.html", "title": "Gmail"}, {"imported": "get_gmail_credentials", "source": "langchain.tools.gmail.utils", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.gmail.utils.get_gmail_credentials.html", "title": "Gmail"}]--\x3e\nfrom langchain.tools.gmail.utils import build_resource_service, get_gmail_credentials\n\n# Can review scopes here https://developers.google.com/gmail/api/auth/scopes\n# For instance, readonly scope is \'https://www.googleapis.com/auth/gmail.readonly\'\ncredentials = get_gmail_credentials(\n    token_file="token.json",\n    scopes=["https://mail.google.com/"],\n    client_secrets_file="credentials.json",\n)\napi_resource = build_resource_service(credentials=credentials)\ntoolkit = GmailToolkit(api_resource=api_resource)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"tools = toolkit.get_tools()\ntools\n")),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [GmailCreateDraft(name='create_gmail_draft', description='Use this tool to create a draft email with the provided message fields.', args_schema=<class 'langchain.tools.gmail.create_draft.CreateDraftSchema'>, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>),\n     GmailSendMessage(name='send_gmail_message', description='Use this tool to send email messages. The input is the message, recipents', args_schema=None, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>),\n     GmailSearch(name='search_gmail', description=('Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource.',), args_schema=<class 'langchain.tools.gmail.search.SearchArgsSchema'>, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>),\n     GmailGetMessage(name='get_gmail_message', description='Use this tool to fetch an email by message ID. Returns the thread ID, snipet, body, subject, and sender.', args_schema=<class 'langchain.tools.gmail.get_message.SearchArgsSchema'>, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>),\n     GmailGetThread(name='get_gmail_thread', description=('Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages.',), args_schema=<class 'langchain.tools.gmail.get_thread.GetThreadSchema'>, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>)]\n"))),(0,o.kt)("h2",{id:"use-within-an-agent"},"Use within an Agent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Gmail"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Gmail"}]--\x3e\nfrom langchain import OpenAI\nfrom langchain.agents import initialize_agent, AgentType\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI(temperature=0)\nagent = initialize_agent(\n    tools=toolkit.get_tools(),\n    llm=llm,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent.run(\n    "Create a gmail draft for me to edit of a letter from the perspective of a sentient parrot"\n    " who is looking to collaborate on some research with her"\n    " estranged friend, a cat. Under no circumstances may you send the message, however."\n)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    WARNING:root:Failed to load default session, using empty session: 0\n    WARNING:root:Failed to persist run: {"detail":"Not Found"}\n\n\n\n\n\n    \'I have created a draft email for you to edit. The draft Id is r5681294731961864018.\'\n'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("Could you search in my drafts for the latest email?")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    WARNING:root:Failed to load default session, using empty session: 0\n    WARNING:root:Failed to persist run: {"detail":"Not Found"}\n\n\n\n\n\n    "The latest email in your drafts is from hopefulparrot@gmail.com with the subject \'Collaboration Opportunity\'. The body of the email reads: \'Dear [Friend], I hope this letter finds you well. I am writing to you in the hopes of rekindling our friendship and to discuss the possibility of collaborating on some research together. I know that we have had our differences in the past, but I believe that we can put them aside and work together for the greater good. I look forward to hearing from you. Sincerely, [Parrot]\'"\n'))))}d.isMDXComponent=!0}}]);