"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[18226],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,h=m["".concat(c,".").concat(u)]||m[u]||p[u]||r;return n?a.createElement(h,s(s({ref:t},l),{},{components:n})):a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},71123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const r={},s="Annoy",i={unversionedId:"integrations/vectorstores/annoy",id:"integrations/vectorstores/annoy",title:"Annoy",description:"Annoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.",source:"@site/docs/integrations/vectorstores/annoy.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/annoy",permalink:"/langchain/docs/integrations/vectorstores/annoy",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"AnalyticDB",permalink:"/langchain/docs/integrations/vectorstores/analyticdb"},next:{title:"Atlas",permalink:"/langchain/docs/integrations/vectorstores/atlas"}},c={},d=[{value:"Create VectorStore from texts",id:"create-vectorstore-from-texts",level:2},{value:"Create VectorStore from docs",id:"create-vectorstore-from-docs",level:2},{value:"Create VectorStore via existing embeddings",id:"create-vectorstore-via-existing-embeddings",level:2},{value:"Search via embeddings",id:"search-via-embeddings",level:2},{value:"Search via docstore id",id:"search-via-docstore-id",level:2},{value:"Save and load",id:"save-and-load",level:2},{value:"Construct from scratch",id:"construct-from-scratch",level:2}],l=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const p={toc:d},u="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"annoy"},"Annoy"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/spotify/annoy"},"Annoy")," (",(0,o.kt)("inlineCode",{parentName:"p"},"Approximate Nearest Neighbors Oh Yeah"),") is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.")),(0,o.kt)("p",null,"This notebook shows how to use functionality related to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Annoy")," vector database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{note}"},"NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!\nIf you want to progressively add new entries to your VectorStore then better choose an alternative!\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#!pip install annoy\n")),(0,o.kt)("h2",{id:"create-vectorstore-from-texts"},"Create VectorStore from texts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HuggingFaceEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.HuggingFaceEmbeddings.html", "title": "Annoy"}, {"imported": "Annoy", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.annoy.Annoy.html", "title": "Annoy"}]--\x3e\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.vectorstores import Annoy\n\nembeddings_func = HuggingFaceEmbeddings()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'texts = ["pizza is great", "I love salad", "my car", "a dog"]\n\n# default metric is angular\nvector_store = Annoy.from_texts(texts, embeddings_func)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"\nvector_store_v2 = Annoy.from_texts(\n    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'vector_store.similarity_search("food", k=3)\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='pizza is great', metadata={}),\n     Document(page_content='I love salad', metadata={}),\n     Document(page_content='my car', metadata={})]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# the score is a distance metric, so lower is better\nvector_store.similarity_search_with_score("food", k=3)\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),\n     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),\n     (Document(page_content='my car', metadata={}), 1.1580758094787598)]\n"))),(0,o.kt)("h2",{id:"create-vectorstore-from-docs"},"Create VectorStore from docs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Annoy"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Annoy"}]--\x3e\nfrom langchain.document_loaders import TextLoader\nfrom langchain.text_splitter import CharacterTextSplitter\n\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"docs[:5]\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \\n\\nLast year COVID-19 kept us apart. This year we are finally together again. \\n\\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \\n\\nWith a duty to one another to the American people to the Constitution. \\n\\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \\n\\nSix days ago, Russia\u2019s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \\n\\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \\n\\nHe met the Ukrainian people. \\n\\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),\n     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \\n\\nIn this struggle as President Zelenskyy said in his speech to the European Parliament \u201cLight will win over darkness.\u201d The Ukrainian Ambassador to the United States is here tonight. \\n\\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \\n\\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \\n\\nThroughout our history we\u2019ve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \\n\\nThey keep moving.   \\n\\nAnd the costs and the threats to America and the world keep rising.   \\n\\nThat\u2019s why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \\n\\nThe United States is a member along with 29 other nations. \\n\\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),\n     Document(page_content='Putin\u2019s latest attack on Ukraine was premeditated and unprovoked. \\n\\nHe rejected repeated efforts at diplomacy. \\n\\nHe thought the West and NATO wouldn\u2019t respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \\n\\nWe prepared extensively and carefully. \\n\\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \\n\\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \\n\\nWe countered Russia\u2019s lies with truth.   \\n\\nAnd now that he has acted the free world is holding him accountable. \\n\\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),\n     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \\n\\nTogether with our allies \u2013we are right now enforcing powerful economic sanctions. \\n\\nWe are cutting off Russia\u2019s largest banks from the international financial system.  \\n\\nPreventing Russia\u2019s central bank from defending the Russian Ruble making Putin\u2019s $630 Billion \u201cwar fund\u201d worthless.   \\n\\nWe are choking off Russia\u2019s access to technology that will sap its economic strength and weaken its military for years to come.  \\n\\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \\n\\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \\n\\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),\n     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights \u2013 further isolating Russia \u2013 and adding an additional squeeze \u2013on their economy. The Ruble has lost 30% of its value. \\n\\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia\u2019s economy is reeling and Putin alone is to blame. \\n\\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \\n\\nWe are giving more than $1 Billion in direct assistance to Ukraine. \\n\\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \\n\\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \\n\\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies \u2013 in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\ndocs = vector_store_from_docs.similarity_search(query)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content[:100])\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Ac\n"))),(0,o.kt)("h2",{id:"create-vectorstore-via-existing-embeddings"},"Create VectorStore via existing embeddings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"embs = embeddings_func.embed_documents(texts)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"data = list(zip(texts, embs))\n\nvector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'vector_store_from_embeddings.similarity_search_with_score("food", k=3)\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),\n     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),\n     (Document(page_content='my car', metadata={}), 1.1580758094787598)]\n"))),(0,o.kt)("h2",{id:"search-via-embeddings"},"Search via embeddings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'motorbike_emb = embeddings_func.embed_query("motorbike")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"vector_store.similarity_search_by_vector(motorbike_emb, k=3)\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='my car', metadata={}),\n     Document(page_content='a dog', metadata={}),\n     Document(page_content='pizza is great', metadata={})]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [(Document(page_content='my car', metadata={}), 1.0870471000671387),\n     (Document(page_content='a dog', metadata={}), 1.2095637321472168),\n     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]\n"))),(0,o.kt)("h2",{id:"search-via-docstore-id"},"Search via docstore id"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"vector_store.index_to_docstore_id\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',\n     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',\n     2: '927f1120-985b-4691-b577-ad5cb42e011c',\n     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"some_docstore_id = 0  # texts[0]\n\nvector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Document(page_content='pizza is great', metadata={})\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# same document has distance 0\nvector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [(Document(page_content='pizza is great', metadata={}), 0.0),\n     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),\n     (Document(page_content='my car', metadata={}), 1.2895267009735107)]\n"))),(0,o.kt)("h2",{id:"save-and-load"},"Save and load"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'vector_store.save_local("my_annoy_index_and_docstore")\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    saving config\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loaded_vector_store = Annoy.load_local(\n    "my_annoy_index_and_docstore", embeddings=embeddings_func\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# same document has distance 0\nloaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [(Document(page_content='pizza is great', metadata={}), 0.0),\n     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),\n     (Document(page_content='my car', metadata={}), 1.2895267009735107)]\n"))),(0,o.kt)("h2",{id:"construct-from-scratch"},"Construct from scratch"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Document", "source": "langchain.docstore.document", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Annoy"}, {"imported": "InMemoryDocstore", "source": "langchain.docstore.in_memory", "docs": "https://api.python.langchain.com/en/latest/docstore/langchain.docstore.in_memory.InMemoryDocstore.html", "title": "Annoy"}]--\x3e\nimport uuid\nfrom annoy import AnnoyIndex\nfrom langchain.docstore.document import Document\nfrom langchain.docstore.in_memory import InMemoryDocstore\n\nmetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]\n\n# embeddings\nembeddings = embeddings_func.embed_documents(texts)\n\n# embedding dim\nf = len(embeddings[0])\n\n# index\nmetric = "angular"\nindex = AnnoyIndex(f, metric=metric)\nfor i, emb in enumerate(embeddings):\n    index.add_item(i, emb)\nindex.build(10)\n\n# docstore\ndocuments = []\nfor i, text in enumerate(texts):\n    metadata = metadatas[i] if metadatas else {}\n    documents.append(Document(page_content=text, metadata=metadata))\nindex_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}\ndocstore = InMemoryDocstore(\n    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)}\n)\n\ndb_manually = Annoy(\n    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'db_manually.similarity_search_with_score("eating!", k=3)\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [(Document(page_content='pizza is great', metadata={'x': 'food'}),\n      1.1314140558242798),\n     (Document(page_content='I love salad', metadata={'x': 'food'}),\n      1.1668788194656372),\n     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]\n"))))}h.isMDXComponent=!0}}]);