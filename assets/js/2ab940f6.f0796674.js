"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[44533],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),d=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=o,h=u["".concat(i,".").concat(m)]||u[m]||p[m]||r;return t?a.createElement(h,c(c({ref:n},s),{},{components:t})):a.createElement(h,c({ref:n},s))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,c=new Array(r);c[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[u]="string"==typeof e?e:o,c[1]=l;for(var d=2;d<r;d++)c[d]=t[d];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},80013:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const r={},c="Blockchain",l={unversionedId:"integrations/document_loaders/blockchain",id:"integrations/document_loaders/blockchain",title:"Blockchain",description:"Overview",source:"@site/docs/integrations/document_loaders/blockchain.md",sourceDirName:"integrations/document_loaders",slug:"/integrations/document_loaders/blockchain",permalink:"/langchain/docs/integrations/document_loaders/blockchain",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Blackboard",permalink:"/langchain/docs/integrations/document_loaders/blackboard"},next:{title:"Brave Search",permalink:"/langchain/docs/integrations/document_loaders/brave_search"}},i={},d=[{value:"Overview",id:"overview",level:2},{value:"Load NFTs into Document Loader",id:"load-nfts-into-document-loader",level:2},{value:"Option 1: Ethereum Mainnet (default BlockchainType)",id:"option-1-ethereum-mainnet-default-blockchaintype",level:3},{value:"Option 2: Polygon Mainnet",id:"option-2-polygon-mainnet",level:3}],s={toc:d},u="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"blockchain"},"Blockchain"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The intention of this notebook is to provide a means of testing functionality in the Langchain Document Loader for Blockchain."),(0,o.kt)("p",null,"Initially this Loader supports:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Loading NFTs as Documents from NFT Smart Contracts (ERC721 and ERC1155)"),(0,o.kt)("li",{parentName:"ul"},"Ethereum Mainnnet, Ethereum Testnet, Polygon Mainnet, Polygon Testnet (default is eth-mainnet)"),(0,o.kt)("li",{parentName:"ul"},"Alchemy's getNFTsForCollection API")),(0,o.kt)("p",null,"It can be extended if the community finds value in this loader.  Specifically:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Additional APIs can be added (e.g. Tranction-related APIs)")),(0,o.kt)("p",null,"This Document Loader Requires:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A free ",(0,o.kt)("a",{parentName:"li",href:"https://www.alchemy.com/"},"Alchemy API Key"))),(0,o.kt)("p",null,"The output takes the following format:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"pageContent= Individual NFT"),(0,o.kt)("li",{parentName:"ul"},"metadata={'source': '0x1a92f7381b9f03921564a437210bb9396471050c', 'blockchain': 'eth-mainnet', 'tokenId': '0x15'})")),(0,o.kt)("h2",{id:"load-nfts-into-document-loader"},"Load NFTs into Document Loader"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# get ALCHEMY_API_KEY from https://www.alchemy.com/\n\nalchemyApiKey = "..."\n')),(0,o.kt)("h3",{id:"option-1-ethereum-mainnet-default-blockchaintype"},"Option 1: Ethereum Mainnet (default BlockchainType)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "BlockchainDocumentLoader", "source": "langchain.document_loaders.blockchain", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.blockchain.BlockchainDocumentLoader.html", "title": "Blockchain"}, {"imported": "BlockchainType", "source": "langchain.document_loaders.blockchain", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.blockchain.BlockchainType.html", "title": "Blockchain"}]--\x3e\nfrom langchain.document_loaders.blockchain import (\n    BlockchainDocumentLoader,\n    BlockchainType,\n)\n\ncontractAddress = "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d"  # Bored Ape Yacht Club contract address\n\nblockchainType = BlockchainType.ETH_MAINNET  # default value, optional parameter\n\nblockchainLoader = BlockchainDocumentLoader(\n    contract_address=contractAddress, api_key=alchemyApiKey\n)\n\nnfts = blockchainLoader.load()\n\nnfts[:2]\n')),(0,o.kt)("h3",{id:"option-2-polygon-mainnet"},"Option 2: Polygon Mainnet"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'contractAddress = (\n    "0x448676ffCd0aDf2D85C1f0565e8dde6924A9A7D9"  # Polygon Mainnet contract address\n)\n\nblockchainType = BlockchainType.POLYGON_MAINNET\n\nblockchainLoader = BlockchainDocumentLoader(\n    contract_address=contractAddress,\n    blockchainType=blockchainType,\n    api_key=alchemyApiKey,\n)\n\nnfts = blockchainLoader.load()\n\nnfts[:2]\n')))}p.isMDXComponent=!0}}]);