"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[85394],{3905:(e,t,n)=>{n.d(t,{Zo:()=>y,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},y=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,y=r(e,["components","mdxType","originalType","parentName"]),p=m(n),h=o,d=p["".concat(l,".").concat(h)]||p[h]||c[h]||s;return n?a.createElement(d,i(i({ref:t},y),{},{components:n})):a.createElement(d,i({ref:t},y))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=h;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:o,i[1]=r;for(var m=2;m<s;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>m});var a=n(87462),o=(n(67294),n(3905));const s={},i="Dynamodb Chat Message History",r={unversionedId:"integrations/memory/dynamodb_chat_message_history",id:"integrations/memory/dynamodb_chat_message_history",title:"Dynamodb Chat Message History",description:"This notebook goes over how to use Dynamodb to store chat message history.",source:"@site/docs/integrations/memory/dynamodb_chat_message_history.md",sourceDirName:"integrations/memory",slug:"/integrations/memory/dynamodb_chat_message_history",permalink:"/langchain/docs/integrations/memory/dynamodb_chat_message_history",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Cassandra Chat Message History",permalink:"/langchain/docs/integrations/memory/cassandra_chat_message_history"},next:{title:"Entity Memory with SQLite storage",permalink:"/langchain/docs/integrations/memory/entity_memory_with_sqlite"}},l={},m=[{value:"DynamoDBChatMessageHistory",id:"dynamodbchatmessagehistory",level:2},{value:"DynamoDBChatMessageHistory with Custom Endpoint URL",id:"dynamodbchatmessagehistory-with-custom-endpoint-url",level:2},{value:"DynamoDBChatMessageHistory With Different Keys Composite Keys",id:"dynamodbchatmessagehistory-with-different-keys-composite-keys",level:2},{value:"Primary Key Name",id:"primary-key-name",level:3},{value:"Composite Keys",id:"composite-keys",level:3},{value:"Agent with DynamoDB Memory",id:"agent-with-dynamodb-memory",level:2}],y=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var p;const c={toc:m},h="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dynamodb-chat-message-history"},"Dynamodb Chat Message History"),(0,o.kt)("p",null,"This notebook goes over how to use Dynamodb to store chat message history."),(0,o.kt)("p",null,"First make sure you have correctly configured the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html"},"AWS CLI"),". Then make sure you have installed boto3."),(0,o.kt)("p",null,"Next, create the DynamoDB Table where we will be storing messages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import boto3\n\n# Get the service resource.\ndynamodb = boto3.resource("dynamodb")\n\n# Create the DynamoDB table.\ntable = dynamodb.create_table(\n    TableName="SessionTable",\n    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],\n    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],\n    BillingMode="PAY_PER_REQUEST",\n)\n\n# Wait until the table exists.\ntable.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")\n\n# Print out some data about the table.\nprint(table.item_count)\n')),(0,o.kt)(y,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    0\n"))),(0,o.kt)("h2",{id:"dynamodbchatmessagehistory"},"DynamoDBChatMessageHistory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "DynamoDBChatMessageHistory", "source": "langchain.memory.chat_message_histories", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.dynamodb.DynamoDBChatMessageHistory.html", "title": "Dynamodb Chat Message History"}]--\x3e\nfrom langchain.memory.chat_message_histories import DynamoDBChatMessageHistory\n\nhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")\n\nhistory.add_user_message("hi!")\n\nhistory.add_ai_message("whats up?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"history.messages\n")),(0,o.kt)(y,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [HumanMessage(content='hi!', additional_kwargs={}, example=False),\n     AIMessage(content='whats up?', additional_kwargs={}, example=False),\n     HumanMessage(content='hi!', additional_kwargs={}, example=False),\n     AIMessage(content='whats up?', additional_kwargs={}, example=False)]\n"))),(0,o.kt)("h2",{id:"dynamodbchatmessagehistory-with-custom-endpoint-url"},"DynamoDBChatMessageHistory with Custom Endpoint URL"),(0,o.kt)("p",null,"Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against ",(0,o.kt)("a",{parentName:"p",href:"https://localstack.cloud/"},"Localstack"),". For those cases you can specify the URL via the ",(0,o.kt)("inlineCode",{parentName:"p"},"endpoint_url")," parameter in the constructor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "DynamoDBChatMessageHistory", "source": "langchain.memory.chat_message_histories", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.dynamodb.DynamoDBChatMessageHistory.html", "title": "Dynamodb Chat Message History"}]--\x3e\nfrom langchain.memory.chat_message_histories import DynamoDBChatMessageHistory\n\nhistory = DynamoDBChatMessageHistory(\n    table_name="SessionTable",\n    session_id="0",\n    endpoint_url="http://localhost.localstack.cloud:4566",\n)\n')),(0,o.kt)("h2",{id:"dynamodbchatmessagehistory-with-different-keys-composite-keys"},"DynamoDBChatMessageHistory With Different Keys Composite Keys"),(0,o.kt)("p",null,"The default key for DynamoDBChatMessageHistory is ",(0,o.kt)("inlineCode",{parentName:"p"},'{"SessionId": self.session_id}'),", but you can modify this to match your table design."),(0,o.kt)("h3",{id:"primary-key-name"},"Primary Key Name"),(0,o.kt)("p",null,"You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following:\n",(0,o.kt)("inlineCode",{parentName:"p"},"{self.primary_key_name: self.session_id}")),(0,o.kt)("h3",{id:"composite-keys"},"Composite Keys"),(0,o.kt)("p",null,"When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," parameter."),(0,o.kt)("p",null,"Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "DynamoDBChatMessageHistory", "source": "langchain.memory.chat_message_histories", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.dynamodb.DynamoDBChatMessageHistory.html", "title": "Dynamodb Chat Message History"}]--\x3e\nfrom langchain.memory.chat_message_histories import DynamoDBChatMessageHistory\n\ncomposite_table = dynamodb.create_table(\n    TableName="CompositeTable",\n    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],\n    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],\n    BillingMode="PAY_PER_REQUEST",\n)\n\n# Wait until the table exists.\ncomposite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")\n\n# Print out some data about the table.\nprint(composite_table.item_count)\n\nmy_key = {\n    "PK": "session_id::0",\n    "SK":  "langchain_history",\n}\n\ncomposite_key_history = DynamoDBChatMessageHistory(\n    table_name="CompositeTable",\n    session_id="0",\n    endpoint_url="http://localhost.localstack.cloud:4566",\n    key=my_key,\n)\n\ncomposite_key_history.add_user_message("hello, composite dynamodb table!")\n\ncomposite_key_history.messages\n')),(0,o.kt)(y,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    0\n\n\n\n\n\n    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]\n"))),(0,o.kt)("h2",{id:"agent-with-dynamodb-memory"},"Agent with DynamoDB Memory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Dynamodb Chat Message History"}, {"imported": "ConversationBufferMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.buffer.ConversationBufferMemory.html", "title": "Dynamodb Chat Message History"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Dynamodb Chat Message History"}, {"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Dynamodb Chat Message History"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Dynamodb Chat Message History"}, {"imported": "PythonREPL", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.python.PythonREPL.html", "title": "Dynamodb Chat Message History"}]--\x3e\nfrom langchain.agents import Tool\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\nfrom langchain.utilities import PythonREPL\nfrom getpass import getpass\n\nmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")\nmemory = ConversationBufferMemory(\n    memory_key="chat_history", chat_memory=message_history, return_messages=True\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'python_repl = PythonREPL()\n\n# You can create the tool to pass to an agent\ntools = [\n    Tool(\n        name="python_repl",\n        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",\n        func=python_repl.run,\n    )\n]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"llm = ChatOpenAI(temperature=0)\nagent_chain = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,\n    verbose=True,\n    memory=memory,\n)\n")),(0,o.kt)(y,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ---------------------------------------------------------------------------\n\n    ValidationError                           Traceback (most recent call last)\n\n    Cell In[17], line 1\n    ----\x3e 1 llm = ChatOpenAI(temperature=0)\n          2 agent_chain = initialize_agent(\n          3     tools,\n          4     llm,\n       (...)\n          7     memory=memory,\n          8 )\n\n\n    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)\n         73 def __init__(self, **kwargs: Any) -> None:\n    ---\x3e 74     super().__init__(**kwargs)\n         75     self._lc_kwargs = kwargs\n\n\n    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()\n\n\n    ValidationError: 1 validation error for ChatOpenAI\n    __root__\n      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_chain.run(input="Hello!")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_chain.run(input="Who owns Twitter?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_chain.run(input="My name is Bob.")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_chain.run(input="Who am I?")\n')))}d.isMDXComponent=!0}}]);