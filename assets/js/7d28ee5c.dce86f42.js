"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64512],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=s(n),m=r,f=l["".concat(p,".").concat(m)]||l[m]||u[m]||a;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[l]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},15575:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={},i="Open Document Format (ODT)",c={unversionedId:"integrations/document_loaders/odt",id:"integrations/document_loaders/odt",title:"Open Document Format (ODT)",description:"The Open Document Format for Office Applications (ODF), also known as OpenDocument, is an open file format for word processing documents, spreadsheets, presentations and graphics and using ZIP-compressed XML files. It was developed with the aim of providing an open, XML-based file format specification for office applications.",source:"@site/docs/integrations/document_loaders/odt.md",sourceDirName:"integrations/document_loaders",slug:"/integrations/document_loaders/odt",permalink:"/langchain/docs/integrations/document_loaders/odt",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Obsidian",permalink:"/langchain/docs/integrations/document_loaders/obsidian"},next:{title:"Open City Data",permalink:"/langchain/docs/integrations/document_loaders/open_city_data"}},p={},s=[],d=(l="CodeOutputBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var l;const u={toc:s},m="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"open-document-format-odt"},"Open Document Format (ODT)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/OpenDocument"},"Open Document Format for Office Applications (ODF)"),", also known as ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenDocument"),", is an open file format for word processing documents, spreadsheets, presentations and graphics and using ZIP-compressed XML files. It was developed with the aim of providing an open, XML-based file format specification for office applications.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The standard is developed and maintained by a technical committee in the Organization for the Advancement of Structured Information Standards (",(0,r.kt)("inlineCode",{parentName:"p"},"OASIS"),") consortium. It was based on the Sun Microsystems specification for OpenOffice.org XML, the default format for ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenOffice.org")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"LibreOffice"),". It was originally developed for ",(0,r.kt)("inlineCode",{parentName:"p"},"StarOffice"),' "to provide an open standard for office documents."')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"UnstructuredODTLoader")," is used to load ",(0,r.kt)("inlineCode",{parentName:"p"},"Open Office ODT")," files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "UnstructuredODTLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.odt.UnstructuredODTLoader.html", "title": "Open Document Format (ODT)"}]--\x3e\nfrom langchain.document_loaders import UnstructuredODTLoader\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'loader = UnstructuredODTLoader("example_data/fake.odt", mode="elements")\ndocs = loader.load()\ndocs[0]\n')),(0,r.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Document(page_content='Lorem ipsum dolor sit amet.', metadata={'source': 'example_data/fake.odt', 'filename': 'example_data/fake.odt', 'category': 'Title'})\n"))))}f.isMDXComponent=!0}}]);