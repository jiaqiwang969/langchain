"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[20496],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,u=p["".concat(s,".").concat(m)]||p[m]||g[m]||a;return t?r.createElement(u,i(i({ref:n},d),{},{components:t})):r.createElement(u,i({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},98501:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},i="Google Vertex AI MatchingEngine",l={unversionedId:"integrations/vectorstores/matchingengine",id:"integrations/vectorstores/matchingengine",title:"Google Vertex AI MatchingEngine",description:"This notebook shows how to use functionality related to the GCP Vertex AI MatchingEngine vector database.",source:"@site/docs/integrations/vectorstores/matchingengine.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/matchingengine",permalink:"/langchain/docs/integrations/vectorstores/matchingengine",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Marqo",permalink:"/langchain/docs/integrations/vectorstores/marqo"},next:{title:"Meilisearch",permalink:"/langchain/docs/integrations/vectorstores/meilisearch"}},s={},c=[{value:"Create VectorStore from texts",id:"create-vectorstore-from-texts",level:2},{value:"Create Index and deploy it to an Endpoint",id:"create-index-and-deploy-it-to-an-endpoint",level:2},{value:"Imports, Constants and Configs",id:"imports-constants-and-configs",level:3},{value:"Using Tensorflow Universal Sentence Encoder as an Embedder",id:"using-tensorflow-universal-sentence-encoder-as-an-embedder",level:3},{value:"Inserting a test embedding",id:"inserting-a-test-embedding",level:3},{value:"Creating Index",id:"creating-index",level:3},{value:"Creating Endpoint",id:"creating-endpoint",level:3},{value:"Deploy Index",id:"deploy-index",level:3}],d={toc:c},p="wrapper";function g(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"google-vertex-ai-matchingengine"},"Google Vertex AI MatchingEngine"),(0,o.kt)("p",null,"This notebook shows how to use functionality related to the ",(0,o.kt)("inlineCode",{parentName:"p"},"GCP Vertex AI MatchingEngine")," vector database."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Vertex AI ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/vertex-ai/docs/matching-engine/overview"},"Matching Engine")," provides the industry's leading high-scale low latency vector database. These vector databases are commonly referred to as vector similarity-matching or an approximate nearest neighbor (ANN) service.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": This module expects an endpoint and deployed index already created as the creation time takes close to one hour. To see how to create an index refer to the section ",(0,o.kt)("a",{parentName:"p",href:"#create-index-and-deploy-it-to-an-endpoint"},"Create Index and deploy it to an Endpoint")),(0,o.kt)("h2",{id:"create-vectorstore-from-texts"},"Create VectorStore from texts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MatchingEngine", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.matching_engine.MatchingEngine.html", "title": "Google Vertex AI MatchingEngine"}]--\x3e\nfrom langchain.vectorstores import MatchingEngine\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'texts = [\n    "The cat sat on",\n    "the mat.",\n    "I like to",\n    "eat pizza for",\n    "dinner.",\n    "The sun sets",\n    "in the west.",\n]\n\n\nvector_store = MatchingEngine.from_components(\n    texts=texts,\n    project_id="<my_project_id>",\n    region="<my_region>",\n    gcs_bucket_uri="<my_gcs_bucket>",\n    index_id="<my_matching_engine_index_id>",\n    endpoint_id="<my_matching_engine_endpoint_id>",\n)\n\nvector_store.add_texts(texts=texts)\n\nvector_store.similarity_search("lunch", k=2)\n')),(0,o.kt)("h2",{id:"create-index-and-deploy-it-to-an-endpoint"},"Create Index and deploy it to an Endpoint"),(0,o.kt)("h3",{id:"imports-constants-and-configs"},"Imports, Constants and Configs"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Installing dependencies.\npip install tensorflow \\\n            google-cloud-aiplatform \\\n            tensorflow-hub \\\n            tensorflow-text\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport json\n\nfrom google.cloud import aiplatform\nimport tensorflow_hub as hub\nimport tensorflow_text\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'PROJECT_ID = "<my_project_id>"\nREGION = "<my_region>"\nVPC_NETWORK = "<my_vpc_network_name>"\nPEERING_RANGE_NAME = "ann-langchain-me-range"  # Name for creating the VPC peering.\nBUCKET_URI = "gs://<bucket_uri>"\n# The number of dimensions for the tensorflow universal sentence encoder.\n# If other embedder is used, the dimensions would probably need to change.\nDIMENSIONS = 512\nDISPLAY_NAME = "index-test-name"\nEMBEDDING_DIR = f"{BUCKET_URI}/banana"\nDEPLOYED_INDEX_ID = "endpoint-test-name"\n\nPROJECT_NUMBER = !gcloud projects list --filter="PROJECT_ID:\'{PROJECT_ID}\'" --format=\'value(PROJECT_NUMBER)\'\nPROJECT_NUMBER = PROJECT_NUMBER[0]\nVPC_NETWORK_FULL = f"projects/{PROJECT_NUMBER}/global/networks/{VPC_NETWORK}"\n\n# Change this if you need the VPC to be created.\nCREATE_VPC = False\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Set the project id\n gcloud config set project {PROJECT_ID}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Remove the if condition to run the encapsulated code\nif CREATE_VPC:\n    # Create a VPC network\n gcloud compute networks create {VPC_NETWORK} --bgp-routing-mode=regional --subnet-mode=auto --project={PROJECT_ID}\n\n    # Add necessary firewall rules\n gcloud compute firewall-rules create {VPC_NETWORK}-allow-icmp --network {VPC_NETWORK} --priority 65534 --project {PROJECT_ID} --allow icmp\n gcloud compute firewall-rules create {VPC_NETWORK}-allow-internal --network {VPC_NETWORK} --priority 65534 --project {PROJECT_ID} --allow all --source-ranges 10.128.0.0/9\n gcloud compute firewall-rules create {VPC_NETWORK}-allow-rdp --network {VPC_NETWORK} --priority 65534 --project {PROJECT_ID} --allow tcp:3389\n gcloud compute firewall-rules create {VPC_NETWORK}-allow-ssh --network {VPC_NETWORK} --priority 65534 --project {PROJECT_ID} --allow tcp:22\n\n    # Reserve IP range\n gcloud compute addresses create {PEERING_RANGE_NAME} --global --prefix-length=16 --network={VPC_NETWORK} --purpose=VPC_PEERING --project={PROJECT_ID} --description="peering range"\n\n    # Set up peering with service networking\n    # Your account must have the "Compute Network Admin" role to run the following.\n gcloud services vpc-peerings connect --service=servicenetworking.googleapis.com --network={VPC_NETWORK} --ranges={PEERING_RANGE_NAME} --project={PROJECT_ID}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Creating bucket.\n gsutil mb -l $REGION -p $PROJECT_ID $BUCKET_URI\n")),(0,o.kt)("h3",{id:"using-tensorflow-universal-sentence-encoder-as-an-embedder"},"Using Tensorflow Universal Sentence Encoder as an Embedder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Load the Universal Sentence Encoder module\nmodule_url = "https://tfhub.dev/google/universal-sentence-encoder-multilingual/3"\nmodel = hub.load(module_url)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Generate embeddings for each word\nembeddings = model(["banana"])\n')),(0,o.kt)("h3",{id:"inserting-a-test-embedding"},"Inserting a test embedding"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'initial_config = {\n    "id": "banana_id",\n    "embedding": [float(x) for x in list(embeddings.numpy()[0])],\n}\n\nwith open("data.json", "w") as f:\n    json.dump(initial_config, f)\ngsutil cp data.json {EMBEDDING_DIR}/file.json\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"aiplatform.init(project=PROJECT_ID, location=REGION, staging_bucket=BUCKET_URI)\n")),(0,o.kt)("h3",{id:"creating-index"},"Creating Index"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'my_index = aiplatform.MatchingEngineIndex.create_tree_ah_index(\n    display_name=DISPLAY_NAME,\n    contents_delta_uri=EMBEDDING_DIR,\n    dimensions=DIMENSIONS,\n    approximate_neighbors_count=150,\n    distance_measure_type="DOT_PRODUCT_DISTANCE",\n)\n')),(0,o.kt)("h3",{id:"creating-endpoint"},"Creating Endpoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'my_index_endpoint = aiplatform.MatchingEngineIndexEndpoint.create(\n    display_name=f"{DISPLAY_NAME}-endpoint",\n    network=VPC_NETWORK_FULL,\n)\n')),(0,o.kt)("h3",{id:"deploy-index"},"Deploy Index"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"my_index_endpoint = my_index_endpoint.deploy_index(\n    index=my_index, deployed_index_id=DEPLOYED_INDEX_ID\n)\n\nmy_index_endpoint.deployed_indexes\n")))}g.isMDXComponent=!0}}]);