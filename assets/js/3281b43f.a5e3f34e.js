"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[57540],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(r),g=i,u=d["".concat(c,".").concat(g)]||d[g]||m[g]||a;return r?n.createElement(u,o(o({ref:t},p),{},{components:r})):n.createElement(u,o({ref:t},p))}));function u(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},93207:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(87462),i=(r(67294),r(3905));const a={},o="Tigris",s={unversionedId:"integrations/vectorstores/tigris",id:"integrations/vectorstores/tigris",title:"Tigris",description:"Tigris is an open source Serverless NoSQL Database and Search Platform designed to simplify building high-performance vector search applications.",source:"@site/docs/integrations/vectorstores/tigris.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/tigris",permalink:"/langchain/docs/integrations/vectorstores/tigris",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Tencent Cloud VectorDB",permalink:"/langchain/docs/integrations/vectorstores/tencentvectordb"},next:{title:"Typesense",permalink:"/langchain/docs/integrations/vectorstores/typesense"}},c={},l=[{value:"Initialize Tigris vector store",id:"initialize-tigris-vector-store",level:3},{value:"Similarity Search",id:"similarity-search",level:3},{value:"Similarity Search with score (vector distance)",id:"similarity-search-with-score-vector-distance",level:3}],p={toc:l},d="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tigris"},"Tigris"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"htttps://tigrisdata.com"},"Tigris")," is an open source Serverless NoSQL Database and Search Platform designed to simplify building high-performance vector search applications.\n",(0,i.kt)("inlineCode",{parentName:"p"},"Tigris")," eliminates the infrastructure complexity of managing, operating, and synchronizing multiple tools, allowing you to focus on building great applications instead.")),(0,i.kt)("p",null,"This notebook guides you how to use Tigris as your VectorStore"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Pre requisites")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"An OpenAI account. You can sign up for an account ",(0,i.kt)("a",{parentName:"li",href:"https://platform.openai.com/"},"here")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://console.preview.tigrisdata.cloud"},"Sign up for a free Tigris account"),". Once you have signed up for the Tigris account, create a new project called ",(0,i.kt)("inlineCode",{parentName:"li"},"vectordemo"),". Next, make a note of the ",(0,i.kt)("em",{parentName:"li"},"Uri")," for the region you've created your project in, the ",(0,i.kt)("strong",{parentName:"li"},"clientId")," and ",(0,i.kt)("strong",{parentName:"li"},"clientSecret"),". You can get all this information from the ",(0,i.kt)("strong",{parentName:"li"},"Application Keys")," section of the project.")),(0,i.kt)("p",null,"Let's first install our dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install tigrisdb openapi-schema-pydantic openai tiktoken\n")),(0,i.kt)("p",null,"We will load the ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenAI")," api key and ",(0,i.kt)("inlineCode",{parentName:"p"},"Tigris")," credentials in our environment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\nos.environ["TIGRIS_PROJECT"] = getpass.getpass("Tigris Project Name:")\nos.environ["TIGRIS_CLIENT_ID"] = getpass.getpass("Tigris Client Id:")\nos.environ["TIGRIS_CLIENT_SECRET"] = getpass.getpass("Tigris Client Secret:")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Tigris"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Tigris"}, {"imported": "Tigris", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.tigris.Tigris.html", "title": "Tigris"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Tigris"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Tigris\nfrom langchain.document_loaders import TextLoader\n')),(0,i.kt)("h3",{id:"initialize-tigris-vector-store"},"Initialize Tigris vector store"),(0,i.kt)("p",null,"Let's import our test dataset:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'loader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'vector_store = Tigris.from_documents(docs, embeddings, index_name="my_embeddings")\n')),(0,i.kt)("h3",{id:"similarity-search"},"Similarity Search"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\nfound_docs = vector_store.similarity_search(query)\nprint(found_docs)\n')),(0,i.kt)("h3",{id:"similarity-search-with-score-vector-distance"},"Similarity Search with score (vector distance)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\nresult = vector_store.similarity_search_with_score(query)\nfor doc, score in result:\n    print(f"document={doc}, score={score}")\n')))}m.isMDXComponent=!0}}]);