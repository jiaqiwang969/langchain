"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[46802],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=u(t),p=a,f=m["".concat(s,".").concat(p)]||m[p]||d[p]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[m]="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},37063:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const o={},i="Nuclia Understanding API document transformer",c={unversionedId:"integrations/document_transformers/nuclia_transformer",id:"integrations/document_transformers/nuclia_transformer",title:"Nuclia Understanding API document transformer",description:"Nuclia automatically indexes your unstructured data from any internal and external source, providing optimized search results and generative answers. It can handle video and audio transcription, image content extraction, and document parsing.",source:"@site/docs/integrations/document_transformers/nuclia_transformer.md",sourceDirName:"integrations/document_transformers",slug:"/integrations/document_transformers/nuclia_transformer",permalink:"/langchain/docs/integrations/document_transformers/nuclia_transformer",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"html2text",permalink:"/langchain/docs/integrations/document_transformers/html2text"},next:{title:"OpenAI Functions Metadata Tagger",permalink:"/langchain/docs/integrations/document_transformers/openai_metadata_tagger"}},s={},u=[],l={toc:u},m="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nuclia-understanding-api-document-transformer"},"Nuclia Understanding API document transformer"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://nuclia.com"},"Nuclia")," automatically indexes your unstructured data from any internal and external source, providing optimized search results and generative answers. It can handle video and audio transcription, image content extraction, and document parsing."),(0,a.kt)("p",null,"The Nuclia Understanding API document transformer splits text into paragraphs and sentences, identifies entities, provides a summary of the text and generates embeddings for all the sentences."),(0,a.kt)("p",null,"To use the Nuclia Understanding API, you need to have a Nuclia account. You can create one for free at ",(0,a.kt)("a",{parentName:"p",href:"https://nuclia.cloud"},"https://nuclia.cloud"),", and then ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nuclia.dev/docs/docs/using/understanding/intro"},"create a NUA key"),"."),(0,a.kt)("p",null,"from langchain.document_transformers.nuclia_text_transform import NucliaTextTransformer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"#!pip install --upgrade protobuf\n#!pip install nucliadb-protos\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nos.environ["NUCLIA_ZONE"] = "<YOUR_ZONE>"  # e.g. europe-1\nos.environ["NUCLIA_NUA_KEY"] = "<YOUR_API_KEY>"\n')),(0,a.kt)("p",null,"To use the Nuclia document transformer, you need to instantiate a ",(0,a.kt)("inlineCode",{parentName:"p"},"NucliaUnderstandingAPI")," tool with ",(0,a.kt)("inlineCode",{parentName:"p"},"enable_ml")," set to ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "NucliaUnderstandingAPI", "source": "langchain.tools.nuclia", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.nuclia.tool.NucliaUnderstandingAPI.html", "title": "Nuclia Understanding API document transformer"}]--\x3e\nfrom langchain.tools.nuclia import NucliaUnderstandingAPI\n\nnua = NucliaUnderstandingAPI(enable_ml=True)\n')),(0,a.kt)("p",null,"The Nuclia document transformer must be called in async mode, so you need to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"atransform_documents")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "NucliaTextTransformer", "source": "langchain.document_transformers.nuclia_text_transform", "docs": "https://api.python.langchain.com/en/latest/document_transformers/langchain.document_transformers.nuclia_text_transform.NucliaTextTransformer.html", "title": "Nuclia Understanding API document transformer"}, {"imported": "Document", "source": "langchain.schema.document", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Nuclia Understanding API document transformer"}]--\x3e\nimport asyncio\n\nfrom langchain.document_transformers.nuclia_text_transform import NucliaTextTransformer\nfrom langchain.schema.document import Document\n\n\nasync def process():\n    documents = [\n        Document(page_content="<TEXT 1>", metadata={}),\n        Document(page_content="<TEXT 2>", metadata={}),\n        Document(page_content="<TEXT 3>", metadata={}),\n    ]\n    nuclia_transformer = NucliaTextTransformer(nua)\n    transformed_documents = await nuclia_transformer.atransform_documents(documents)\n    print(transformed_documents)\n\n\nasyncio.run(process())\n')))}d.isMDXComponent=!0}}]);