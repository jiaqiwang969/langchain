"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[47108],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>u});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var m=n.createContext({}),l=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},i=function(e){var t=l(e.components);return n.createElement(m.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,m=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),c=l(a),g=o,u=c["".concat(m,".").concat(g)]||c[g]||h[g]||r;return a?n.createElement(u,s(s({ref:t},i),{},{components:a})):n.createElement(u,s({ref:t},i))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=g;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[c]="string"==typeof e?e:o,s[1]=p;for(var l=2;l<r;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},51117:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var n=a(87462),o=(a(67294),a(3905));const r={},s="JinaChat",p={unversionedId:"integrations/chat/jinachat",id:"integrations/chat/jinachat",title:"JinaChat",description:"This notebook covers how to get started with JinaChat chat models.",source:"@site/docs/integrations/chat/jinachat.md",sourceDirName:"integrations/chat",slug:"/integrations/chat/jinachat",permalink:"/langchain/docs/integrations/chat/jinachat",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Google Cloud Platform Vertex AI PaLM",permalink:"/langchain/docs/integrations/chat/google_vertex_ai_palm"},next:{title:"\ud83d\ude85 LiteLLM",permalink:"/langchain/docs/integrations/chat/litellm"}},m={},l=[],i=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const h={toc:l},g="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(g,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"jinachat"},"JinaChat"),(0,o.kt)("p",null,"This notebook covers how to get started with JinaChat chat models."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "JinaChat", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.jinachat.JinaChat.html", "title": "JinaChat"}, {"imported": "ChatPromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "JinaChat"}, {"imported": "SystemMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.SystemMessagePromptTemplate.html", "title": "JinaChat"}, {"imported": "AIMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.AIMessagePromptTemplate.html", "title": "JinaChat"}, {"imported": "HumanMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.HumanMessagePromptTemplate.html", "title": "JinaChat"}, {"imported": "AIMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.AIMessage.html", "title": "JinaChat"}, {"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "JinaChat"}, {"imported": "SystemMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.SystemMessage.html", "title": "JinaChat"}]--\x3e\nfrom langchain.chat_models import JinaChat\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    AIMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\nfrom langchain.schema import AIMessage, HumanMessage, SystemMessage\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chat = JinaChat(temperature=0)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'messages = [\n    SystemMessage(\n        content="You are a helpful assistant that translates English to French."\n    ),\n    HumanMessage(\n        content="Translate this sentence from English to French. I love programming."\n    ),\n]\nchat(messages)\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'aime programmer.", additional_kwargs={}, example=False)\n'))),(0,o.kt)("p",null,"You can make use of templating by using a ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),". You can build a ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate")," from one or more ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplates"),". You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"format_prompt")," -- this returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptValue"),", which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model."),(0,o.kt)("p",null,"For convenience, there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"from_template")," method exposed on the template. If you were to use this template, this is what it would look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = (\n    "You are a helpful assistant that translates {input_language} to {output_language}."\n)\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template = "{text}"\nhuman_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt = ChatPromptTemplate.from_messages(\n    [system_message_prompt, human_message_prompt]\n)\n\n# get a chat completion from the formatted messages\nchat(\n    chat_prompt.format_prompt(\n        input_language="English", output_language="French", text="I love programming."\n    ).to_messages()\n)\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'aime programmer.", additional_kwargs={}, example=False)\n'))))}u.isMDXComponent=!0}}]);