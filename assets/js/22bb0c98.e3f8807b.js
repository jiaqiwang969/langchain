"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[68235],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=l(n),u=i,h=p["".concat(c,".").concat(u)]||p[u]||m[u]||o;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=u;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[p]="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},87431:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const o={},s="sqlite-vss",a={unversionedId:"integrations/vectorstores/sqlitevss",id:"integrations/vectorstores/sqlitevss",title:"sqlite-vss",description:"sqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.",source:"@site/docs/integrations/vectorstores/sqlitevss.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/sqlitevss",permalink:"/langchain/docs/integrations/vectorstores/sqlitevss",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"scikit-learn",permalink:"/langchain/docs/integrations/vectorstores/sklearn"},next:{title:"StarRocks",permalink:"/langchain/docs/integrations/vectorstores/starrocks"}},c={},l=[{value:"Quickstart",id:"quickstart",level:3},{value:"Using existing sqlite connection",id:"using-existing-sqlite-connection",level:3}],d=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var p;const m={toc:l},u="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sqlite-vss"},"sqlite-vss"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"https://alexgarcia.xyz/sqlite-vss/"},"sqlite-vss")," is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.")),(0,i.kt)("p",null,"This notebook shows how to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"SQLiteVSS")," vector database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# You need to install sqlite-vss as a dependency.\n%pip install sqlite-vss\n")),(0,i.kt)("h3",{id:"quickstart"},"Quickstart"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SentenceTransformerEmbeddings", "source": "langchain.embeddings.sentence_transformer", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.SentenceTransformerEmbeddings.html", "title": "sqlite-vss"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "sqlite-vss"}, {"imported": "SQLiteVSS", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.sqlitevss.SQLiteVSS.html", "title": "sqlite-vss"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "sqlite-vss"}]--\x3e\nfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import SQLiteVSS\nfrom langchain.document_loaders import TextLoader\n\n# load the document and split it into chunks\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\n\n# split it into chunks\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\ntexts = [doc.page_content for doc in docs]\n\n\n# create the open-source embedding function\nembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")\n\n\n# load it in sqlite-vss in a table named state_union.\n# the db_file parameter is the name of the file you want\n# as your sqlite database.\ndb = SQLiteVSS.from_texts(\n    texts=texts,\n    embedding=embedding_function,\n    table="state_union",\n    db_file="/tmp/vss.db"\n)\n\n# query it\nquery = "What did the president say about Ketanji Brown Jackson"\ndata = db.similarity_search(query)\n\n# print results\ndata[0].page_content\n')),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \\n\\nTonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \\n\\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.'\n"))),(0,i.kt)("h3",{id:"using-existing-sqlite-connection"},"Using existing sqlite connection"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SentenceTransformerEmbeddings", "source": "langchain.embeddings.sentence_transformer", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.SentenceTransformerEmbeddings.html", "title": "sqlite-vss"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "sqlite-vss"}, {"imported": "SQLiteVSS", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.sqlitevss.SQLiteVSS.html", "title": "sqlite-vss"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "sqlite-vss"}]--\x3e\nfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import SQLiteVSS\nfrom langchain.document_loaders import TextLoader\n\n# load the document and split it into chunks\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\n\n# split it into chunks\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\ntexts = [doc.page_content for doc in docs]\n\n\n# create the open-source embedding function\nembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")\nconnection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")\n\ndb1 = SQLiteVSS(\n    table="state_union",\n    embedding=embedding_function,\n    connection=connection\n)\n\ndb1.add_texts(["Ketanji Brown Jackson is awesome"])\n# query it again\nquery = "What did the president say about Ketanji Brown Jackson"\ndata = db1.similarity_search(query)\n\n# print results\ndata[0].page_content\n')),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    'Ketanji Brown Jackson is awesome'\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Cleaning up\nimport os\nos.remove("/tmp/vss.db")\n')))}h.isMDXComponent=!0}}]);