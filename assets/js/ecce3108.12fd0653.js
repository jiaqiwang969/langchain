"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1844],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},s=Object.keys(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=a.createContext({}),c=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(l.Provider,{value:e},t.children)},u="mdxType",h={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,s=t.originalType,l=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),u=c(n),m=o,g=u["".concat(l,".").concat(m)]||u[m]||h[m]||s;return n?a.createElement(g,r(r({ref:e},p),{},{components:n})):a.createElement(g,r({ref:e},p))}));function g(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var s=n.length,r=new Array(s);r[0]=m;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i[u]="string"==typeof t?t:o,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},40758:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const s={},r="Use ToolKits with OpenAI Functions",i={unversionedId:"modules/agents/how_to/use_toolkits_with_openai_functions",id:"modules/agents/how_to/use_toolkits_with_openai_functions",title:"Use ToolKits with OpenAI Functions",description:"This notebook shows how to use the OpenAI functions agent with arbitrary toolkits.",source:"@site/docs/modules/agents/how_to/use_toolkits_with_openai_functions.md",sourceDirName:"modules/agents/how_to",slug:"/modules/agents/how_to/use_toolkits_with_openai_functions",permalink:"/langchain/docs/modules/agents/how_to/use_toolkits_with_openai_functions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Streaming final agent output",permalink:"/langchain/docs/modules/agents/how_to/streaming_stdout_final_only"},next:{title:"Tools",permalink:"/langchain/docs/modules/agents/tools/"}},l={},c=[],p=(u="CodeOutputBlock",function(t){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)});var u;const h={toc:c},m="wrapper";function g(t){let{components:e,...n}=t;return(0,o.kt)(m,(0,a.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"use-toolkits-with-openai-functions"},"Use ToolKits with OpenAI Functions"),(0,o.kt)("p",null,"This notebook shows how to use the OpenAI functions agent with arbitrary toolkits."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Use ToolKits with OpenAI Functions"}, {"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Use ToolKits with OpenAI Functions"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Use ToolKits with OpenAI Functions"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Use ToolKits with OpenAI Functions"}, {"imported": "SQLDatabaseToolkit", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.toolkit.SQLDatabaseToolkit.html", "title": "Use ToolKits with OpenAI Functions"}, {"imported": "SystemMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.SystemMessage.html", "title": "Use ToolKits with OpenAI Functions"}]--\x3e\nfrom langchain import (\n    LLMMathChain,\n    OpenAI,\n    SerpAPIWrapper,\n    SQLDatabase,\n    SQLDatabaseChain,\n)\nfrom langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\nfrom langchain.schema import SystemMessage\n')),(0,o.kt)("p",null,"Load the toolkit:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'db = SQLDatabase.from_uri("sqlite:///../../../../../notebooks/Chinook.db")\ntoolkit = SQLDatabaseToolkit(llm=ChatOpenAI(), db=db)\n')),(0,o.kt)("p",null,"Set a system message specific to that toolkit:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent_kwargs = {\n    "system_message": SystemMessage(content="You are an expert SQL data analyst.")\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'llm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")\nagent = initialize_agent(\n    toolkit.get_tools(),\n    llm,\n    agent=AgentType.OPENAI_FUNCTIONS,\n    verbose=True,\n    agent_kwargs=agent_kwargs,\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("how many different artists are there?")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    \n    Invoking: `sql_db_query` with `{'query': 'SELECT COUNT(DISTINCT artist_name) AS num_artists FROM artists'}`\n    \n    \n    Error: (sqlite3.OperationalError) no such table: artists\n    [SQL: SELECT COUNT(DISTINCT artist_name) AS num_artists FROM artists]\n    (Background on this error at: https://sqlalche.me/e/20/e3q8)\n    Invoking: `sql_db_list_tables` with `{}`\n    \n    \n    MediaType, Track, Playlist, sales_table, Customer, Genre, PlaylistTrack, Artist, Invoice, Album, InvoiceLine, Employee\n    Invoking: `sql_db_query` with `{'query': 'SELECT COUNT(DISTINCT artist_id) AS num_artists FROM Artist'}`\n    \n    \n    Error: (sqlite3.OperationalError) no such column: artist_id\n    [SQL: SELECT COUNT(DISTINCT artist_id) AS num_artists FROM Artist]\n    (Background on this error at: https://sqlalche.me/e/20/e3q8)\n    Invoking: `sql_db_query` with `{'query': 'SELECT COUNT(DISTINCT Name) AS num_artists FROM Artist'}`\n    \n    \n    [(275,)]There are 275 different artists in the database.\n    \n    > Finished chain.\n\n\n\n\n\n    'There are 275 different artists in the database.'\n"))))}g.isMDXComponent=!0}}]);