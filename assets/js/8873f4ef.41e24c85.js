"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[48264],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),c=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(t),d=a,m=h["".concat(i,".").concat(d)]||h[d]||p[d]||r;return t?o.createElement(m,l(l({ref:n},u),{},{components:t})):o.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[h]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},57089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const r={},l="Defining Custom Tools",s={unversionedId:"modules/agents/tools/custom_tools",id:"modules/agents/tools/custom_tools",title:"Defining Custom Tools",description:"When constructing your own agent, you will need to provide it with a list of Tools that it can use. Besides the actual function that is called, the Tool consists of several components:",source:"@site/docs/modules/agents/tools/custom_tools.md",sourceDirName:"modules/agents/tools",slug:"/modules/agents/tools/custom_tools",permalink:"/langchain/docs/modules/agents/tools/custom_tools",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Tools",permalink:"/langchain/docs/modules/agents/tools/"},next:{title:"Human-in-the-loop Tool Validation",permalink:"/langchain/docs/modules/agents/tools/human_approval"}},i={},c=[{value:"Completely New Tools - String Input and Output",id:"completely-new-tools---string-input-and-output",level:2},{value:"Tool dataclass",id:"tool-dataclass",level:3},{value:"Subclassing the BaseTool class",id:"subclassing-the-basetool-class",level:3},{value:"Using the <code>tool</code> decorator",id:"using-the-tool-decorator",level:2},{value:"Custom Structured Tools",id:"custom-structured-tools",level:2},{value:"StructuredTool dataclass",id:"structuredtool-dataclass",level:3},{value:"Subclassing the BaseTool",id:"subclassing-the-basetool",level:2},{value:"Using the decorator",id:"using-the-decorator",level:2},{value:"Modify existing tools",id:"modify-existing-tools",level:2},{value:"Defining the priorities among Tools",id:"defining-the-priorities-among-tools",level:2},{value:"Using tools to return directly",id:"using-tools-to-return-directly",level:2},{value:"Handling Tool Errors",id:"handling-tool-errors",level:2}],u=(h="CodeOutputBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var h;const p={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"defining-custom-tools"},"Defining Custom Tools"),(0,a.kt)("p",null,"When constructing your own agent, you will need to provide it with a list of Tools that it can use. Besides the actual function that is called, the Tool consists of several components:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," (str), is required and must be unique within a set of tools provided to an agent"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"description")," (str), is optional but recommended, as it is used by an agent to determine tool use"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"return_direct")," (bool), defaults to False"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"args_schema")," (Pydantic BaseModel), is optional but recommended, can be used to provide more information (e.g., few-shot examples) or validation for expected parameters.")),(0,a.kt)("p",null,"There are two main ways to define a tool, we will cover both in the example below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Defining Custom Tools"}, {"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Defining Custom Tools"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Defining Custom Tools"}, {"imported": "BaseTool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.BaseTool.html", "title": "Defining Custom Tools"}, {"imported": "StructuredTool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.StructuredTool.html", "title": "Defining Custom Tools"}, {"imported": "Tool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Defining Custom Tools"}, {"imported": "tool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.tool.html", "title": "Defining Custom Tools"}]--\x3e\n# Import things that are needed generically\nfrom langchain import LLMMathChain, SerpAPIWrapper\nfrom langchain.agents import AgentType, initialize_agent\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.tools import BaseTool, StructuredTool, Tool, tool\n')),(0,a.kt)("p",null,"Initialize the LLM to use for the agent."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"llm = ChatOpenAI(temperature=0)\n")),(0,a.kt)("h2",{id:"completely-new-tools---string-input-and-output"},"Completely New Tools - String Input and Output"),(0,a.kt)("p",null,"The simplest tools accept a single query string and return a string output. If your tool function requires multiple arguments, you might want to skip down to the ",(0,a.kt)("inlineCode",{parentName:"p"},"StructuredTool")," section below."),(0,a.kt)("p",null,"There are two ways to do this: either by using the Tool dataclass, or by subclassing the BaseTool class."),(0,a.kt)("h3",{id:"tool-dataclass"},"Tool dataclass"),(0,a.kt)("p",null,"The 'Tool' dataclass wraps functions that accept a single string input and returns a string output."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Load the tool configs that are needed.\nsearch = SerpAPIWrapper()\nllm_math_chain = LLMMathChain(llm=llm, verbose=True)\ntools = [\n    Tool.from_function(\n        func=search.run,\n        name="Search",\n        description="useful for when you need to answer questions about current events"\n        # coroutine= ... <- you can specify an async method if desired as well\n    ),\n]\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    /Users/wfh/code/lc/lckg/langchain/chains/llm_math/base.py:50: UserWarning: Directly instantiating an LLMMathChain with an llm is deprecated. Please instantiate with llm_chain argument or using the from_llm class method.\n      warnings.warn(\n"))),(0,a.kt)("p",null,"You can also define a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"args_schema")," to provide more information about inputs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel, Field\n\n\nclass CalculatorInput(BaseModel):\n    question: str = Field()\n\n\ntools.append(\n    Tool.from_function(\n        func=llm_math_chain.run,\n        name="Calculator",\n        description="useful for when you need to answer questions about math",\n        args_schema=CalculatorInput\n        # coroutine= ... <- you can specify an async method if desired as well\n    )\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Construct the agent. We will use the default agent type here.\n# See documentation for a full list of options.\nagent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run(\n    "Who is Leo DiCaprio\'s girlfriend? What is her current age raised to the 0.43 power?"\n)\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    I need to find out Leo DiCaprio\'s girlfriend\'s name and her age\n    Action: Search\n    Action Input: "Leo DiCaprio girlfriend"\n    Observation: After rumours of a romance with Gigi Hadid, the Oscar winner has seemingly moved on. First being linked to the television personality in September 2022, it appears as if his "age bracket" has moved up. This follows his rumoured relationship with mere 19-year-old Eden Polani.\n    Thought:I still need to find out his current girlfriend\'s name and age\n    Action: Search\n    Action Input: "Leo DiCaprio current girlfriend"\n    Observation: Just Jared on Instagram: \u201cLeonardo DiCaprio & girlfriend Camila Morrone couple up for a lunch date!\n    Thought:Now that I know his girlfriend\'s name is Camila Morrone, I need to find her current age\n    Action: Search\n    Action Input: "Camila Morrone age"\n    Observation: 25 years\n    Thought:Now that I have her age, I need to calculate her age raised to the 0.43 power\n    Action: Calculator\n    Action Input: 25^(0.43)\n    \n    > Entering new LLMMathChain chain...\n    25^(0.43)```text\n    25**(0.43)\n    ```\n    ...numexpr.evaluate("25**(0.43)")...\n    \n    Answer: 3.991298452658078\n    > Finished chain.\n    \n    Observation: Answer: 3.991298452658078\n    Thought:I now know the final answer\n    Final Answer: Camila Morrone\'s current age raised to the 0.43 power is approximately 3.99.\n    \n    > Finished chain.\n\n\n\n\n\n    "Camila Morrone\'s current age raised to the 0.43 power is approximately 3.99."\n'))),(0,a.kt)("h3",{id:"subclassing-the-basetool-class"},"Subclassing the BaseTool class"),(0,a.kt)("p",null,"You can also directly subclass ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseTool"),". This is useful if you want more control over the instance variables or if you want to propagate callbacks to nested chains or other tools."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "AsyncCallbackManagerForToolRun", "source": "langchain.callbacks.manager", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.AsyncCallbackManagerForToolRun.html", "title": "Defining Custom Tools"}, {"imported": "CallbackManagerForToolRun", "source": "langchain.callbacks.manager", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.CallbackManagerForToolRun.html", "title": "Defining Custom Tools"}]--\x3e\nfrom typing import Optional, Type\n\nfrom langchain.callbacks.manager import (\n    AsyncCallbackManagerForToolRun,\n    CallbackManagerForToolRun,\n)\n\n\nclass CustomSearchTool(BaseTool):\n    name = "custom_search"\n    description = "useful for when you need to answer questions about current events"\n\n    def _run(\n        self, query: str, run_manager: Optional[CallbackManagerForToolRun] = None\n    ) -> str:\n        """Use the tool."""\n        return search.run(query)\n\n    async def _arun(\n        self, query: str, run_manager: Optional[AsyncCallbackManagerForToolRun] = None\n    ) -> str:\n        """Use the tool asynchronously."""\n        raise NotImplementedError("custom_search does not support async")\n\n\nclass CustomCalculatorTool(BaseTool):\n    name = "Calculator"\n    description = "useful for when you need to answer questions about math"\n    args_schema: Type[BaseModel] = CalculatorInput\n\n    def _run(\n        self, query: str, run_manager: Optional[CallbackManagerForToolRun] = None\n    ) -> str:\n        """Use the tool."""\n        return llm_math_chain.run(query)\n\n    async def _arun(\n        self, query: str, run_manager: Optional[AsyncCallbackManagerForToolRun] = None\n    ) -> str:\n        """Use the tool asynchronously."""\n        raise NotImplementedError("Calculator does not support async")\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"tools = [CustomSearchTool(), CustomCalculatorTool()]\nagent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run(\n    "Who is Leo DiCaprio\'s girlfriend? What is her current age raised to the 0.43 power?"\n)\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    I need to use custom_search to find out who Leo DiCaprio\'s girlfriend is, and then use the Calculator to raise her age to the 0.43 power.\n    Action: custom_search\n    Action Input: "Leo DiCaprio girlfriend"\n    Observation: After rumours of a romance with Gigi Hadid, the Oscar winner has seemingly moved on. First being linked to the television personality in September 2022, it appears as if his "age bracket" has moved up. This follows his rumoured relationship with mere 19-year-old Eden Polani.\n    Thought:I need to find out the current age of Eden Polani.\n    Action: custom_search\n    Action Input: "Eden Polani age"\n    Observation: 19 years old\n    Thought:Now I can use the Calculator to raise her age to the 0.43 power.\n    Action: Calculator\n    Action Input: 19 ^ 0.43\n    \n    > Entering new LLMMathChain chain...\n    19 ^ 0.43```text\n    19 ** 0.43\n    ```\n    ...numexpr.evaluate("19 ** 0.43")...\n    \n    Answer: 3.547023357958959\n    > Finished chain.\n    \n    Observation: Answer: 3.547023357958959\n    Thought:I now know the final answer.\n    Final Answer: 3.547023357958959\n    \n    > Finished chain.\n\n\n\n\n\n    \'3.547023357958959\'\n'))),(0,a.kt)("h2",{id:"using-the-tool-decorator"},"Using the ",(0,a.kt)("inlineCode",{parentName:"h2"},"tool")," decorator"),(0,a.kt)("p",null,"To make it easier to define custom tools, a ",(0,a.kt)("inlineCode",{parentName:"p"},"@tool")," decorator is provided. This decorator can be used to quickly create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Tool")," from a simple function. The decorator uses the function name as the tool name by default, but this can be overridden by passing a string as the first argument. Additionally, the decorator will use the function's docstring as the tool's description."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "tool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.tool.html", "title": "Defining Custom Tools"}]--\x3e\nfrom langchain.tools import tool\n\n\n@tool\ndef search_api(query: str) -> str:\n    """Searches the API for the query."""\n    return f"Results for query {query}"\n\n\nsearch_api\n')),(0,a.kt)("p",null,"You can also provide arguments like the tool name and whether to return directly."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@tool("search", return_direct=True)\ndef search_api(query: str) -> str:\n    """Searches the API for the query."""\n    return "Results"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"search_api\n")),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Tool(name='search', description='search(query: str) -> str - Searches the API for the query.', args_schema=<class 'pydantic.main.SearchApi'>, return_direct=True, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x12748c4c0>, func=<function search_api at 0x16bd66310>, coroutine=None)\n"))),(0,a.kt)("p",null,"You can also provide ",(0,a.kt)("inlineCode",{parentName:"p"},"args_schema")," to provide more information about the argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class SearchInput(BaseModel):\n    query: str = Field(description="should be a search query")\n\n\n@tool("search", return_direct=True, args_schema=SearchInput)\ndef search_api(query: str) -> str:\n    """Searches the API for the query."""\n    return "Results"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"search_api\n")),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Tool(name='search', description='search(query: str) -> str - Searches the API for the query.', args_schema=<class '__main__.SearchInput'>, return_direct=True, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x12748c4c0>, func=<function search_api at 0x16bcf0ee0>, coroutine=None)\n"))),(0,a.kt)("h2",{id:"custom-structured-tools"},"Custom Structured Tools"),(0,a.kt)("p",null,"If your functions require more structured arguments, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"StructuredTool")," class directly, or still subclass the ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseTool")," class."),(0,a.kt)("h3",{id:"structuredtool-dataclass"},"StructuredTool dataclass"),(0,a.kt)("p",null,"To dynamically generate a structured tool from a given function, the fastest way to get started is with ",(0,a.kt)("inlineCode",{parentName:"p"},"StructuredTool.from_function()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "StructuredTool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.StructuredTool.html", "title": "Defining Custom Tools"}]--\x3e\nimport requests\nfrom langchain.tools import StructuredTool\n\n\ndef post_message(url: str, body: dict, parameters: Optional[dict] = None) -> str:\n    """Sends a POST request to the given url with the given body and parameters."""\n    result = requests.post(url, json=body, params=parameters)\n    return f"Status: {result.status_code} - {result.text}"\n\n\ntool = StructuredTool.from_function(post_message)\n')),(0,a.kt)("h2",{id:"subclassing-the-basetool"},"Subclassing the BaseTool"),(0,a.kt)("p",null,"The BaseTool automatically infers the schema from the ",(0,a.kt)("inlineCode",{parentName:"p"},"_run")," method's signature."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "AsyncCallbackManagerForToolRun", "source": "langchain.callbacks.manager", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.AsyncCallbackManagerForToolRun.html", "title": "Defining Custom Tools"}, {"imported": "CallbackManagerForToolRun", "source": "langchain.callbacks.manager", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.CallbackManagerForToolRun.html", "title": "Defining Custom Tools"}]--\x3e\nfrom typing import Optional, Type\n\nfrom langchain.callbacks.manager import (\n    AsyncCallbackManagerForToolRun,\n    CallbackManagerForToolRun,\n)\n\n\nclass CustomSearchTool(BaseTool):\n    name = "custom_search"\n    description = "useful for when you need to answer questions about current events"\n\n    def _run(\n        self,\n        query: str,\n        engine: str = "google",\n        gl: str = "us",\n        hl: str = "en",\n        run_manager: Optional[CallbackManagerForToolRun] = None,\n    ) -> str:\n        """Use the tool."""\n        search_wrapper = SerpAPIWrapper(params={"engine": engine, "gl": gl, "hl": hl})\n        return search_wrapper.run(query)\n\n    async def _arun(\n        self,\n        query: str,\n        engine: str = "google",\n        gl: str = "us",\n        hl: str = "en",\n        run_manager: Optional[AsyncCallbackManagerForToolRun] = None,\n    ) -> str:\n        """Use the tool asynchronously."""\n        raise NotImplementedError("custom_search does not support async")\n\n\n# You can provide a custom args schema to add descriptions or custom validation\n\n\nclass SearchSchema(BaseModel):\n    query: str = Field(description="should be a search query")\n    engine: str = Field(description="should be a search engine")\n    gl: str = Field(description="should be a country code")\n    hl: str = Field(description="should be a language code")\n\n\nclass CustomSearchTool(BaseTool):\n    name = "custom_search"\n    description = "useful for when you need to answer questions about current events"\n    args_schema: Type[SearchSchema] = SearchSchema\n\n    def _run(\n        self,\n        query: str,\n        engine: str = "google",\n        gl: str = "us",\n        hl: str = "en",\n        run_manager: Optional[CallbackManagerForToolRun] = None,\n    ) -> str:\n        """Use the tool."""\n        search_wrapper = SerpAPIWrapper(params={"engine": engine, "gl": gl, "hl": hl})\n        return search_wrapper.run(query)\n\n    async def _arun(\n        self,\n        query: str,\n        engine: str = "google",\n        gl: str = "us",\n        hl: str = "en",\n        run_manager: Optional[AsyncCallbackManagerForToolRun] = None,\n    ) -> str:\n        """Use the tool asynchronously."""\n        raise NotImplementedError("custom_search does not support async")\n')),(0,a.kt)("h2",{id:"using-the-decorator"},"Using the decorator"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tool")," decorator creates a structured tool automatically if the signature has multiple arguments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "tool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.tool.html", "title": "Defining Custom Tools"}]--\x3e\nimport requests\nfrom langchain.tools import tool\n\n\n@tool\ndef post_message(url: str, body: dict, parameters: Optional[dict] = None) -> str:\n    """Sends a POST request to the given url with the given body and parameters."""\n    result = requests.post(url, json=body, params=parameters)\n    return f"Status: {result.status_code} - {result.text}"\n')),(0,a.kt)("h2",{id:"modify-existing-tools"},"Modify existing tools"),(0,a.kt)("p",null,"Now, we show how to load existing tools and modify them directly. In the example below, we do something really simple and change the Search tool to have the name ",(0,a.kt)("inlineCode",{parentName:"p"},"Google Search"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "load_tools", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.load_tools.load_tools.html", "title": "Defining Custom Tools"}]--\x3e\nfrom langchain.agents import load_tools\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'tools = load_tools(["serpapi", "llm-math"], llm=llm)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'tools[0].name = "Google Search"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"agent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run(\n    "Who is Leo DiCaprio\'s girlfriend? What is her current age raised to the 0.43 power?"\n)\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    I need to find out Leo DiCaprio\'s girlfriend\'s name and her age.\n    Action: Google Search\n    Action Input: "Leo DiCaprio girlfriend"\n    Observation: After rumours of a romance with Gigi Hadid, the Oscar winner has seemingly moved on. First being linked to the television personality in September 2022, it appears as if his "age bracket" has moved up. This follows his rumoured relationship with mere 19-year-old Eden Polani.\n    Thought:I still need to find out his current girlfriend\'s name and her age.\n    Action: Google Search\n    Action Input: "Leo DiCaprio current girlfriend age"\n    Observation: Leonardo DiCaprio has been linked with 19-year-old model Eden Polani, continuing the rumour that he doesn\'t date any women over the age of ...\n    Thought:I need to find out the age of Eden Polani.\n    Action: Calculator\n    Action Input: 19^(0.43)\n    Observation: Answer: 3.547023357958959\n    Thought:I now know the final answer.\n    Final Answer: The age of Leo DiCaprio\'s girlfriend raised to the 0.43 power is approximately 3.55.\n    \n    > Finished chain.\n\n\n\n\n\n    "The age of Leo DiCaprio\'s girlfriend raised to the 0.43 power is approximately 3.55."\n'))),(0,a.kt)("h2",{id:"defining-the-priorities-among-tools"},"Defining the priorities among Tools"),(0,a.kt)("p",null,"When you made a Custom tool, you may want the Agent to use the custom tool more than normal tools."),(0,a.kt)("p",null,"For example, you made a custom tool, which gets information on music from your database. When a user wants information on songs, You want the Agent to use  ",(0,a.kt)("inlineCode",{parentName:"p"},"the custom tool")," more than the normal ",(0,a.kt)("inlineCode",{parentName:"p"},"Search tool"),". But the Agent might prioritize a normal Search tool."),(0,a.kt)("p",null,"This can be accomplished by adding a statement such as ",(0,a.kt)("inlineCode",{parentName:"p"},"Use this more than the normal search if the question is about Music, like 'who is the singer of yesterday?' or 'what is the most popular song in 2022?'")," to the description."),(0,a.kt)("p",null,"An example is below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Defining Custom Tools"}, {"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Defining Custom Tools"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Defining Custom Tools"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Defining Custom Tools"}]--\x3e\n# Import things that are needed generically\nfrom langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\nfrom langchain.llms import OpenAI\nfrom langchain import LLMMathChain, SerpAPIWrapper\n\nsearch = SerpAPIWrapper()\ntools = [\n    Tool(\n        name="Search",\n        func=search.run,\n        description="useful for when you need to answer questions about current events",\n    ),\n    Tool(\n        name="Music Search",\n        func=lambda x: "\'All I Want For Christmas Is You\' by Mariah Carey.",  # Mock Function\n        description="A Music search engine. Use this more than the normal search if the question is about Music, like \'who is the singer of yesterday?\' or \'what is the most popular song in 2022?\'",\n    ),\n]\n\nagent = initialize_agent(\n    tools,\n    OpenAI(temperature=0),\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("what is the most famous song of christmas")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n     I should use a music search engine to find the answer\n    Action: Music Search\n    Action Input: most famous song of christmas'All I Want For Christmas Is You' by Mariah Carey. I now know the final answer\n    Final Answer: 'All I Want For Christmas Is You' by Mariah Carey.\n    \n    > Finished chain.\n\n\n\n\n\n    \"'All I Want For Christmas Is You' by Mariah Carey.\"\n"))),(0,a.kt)("h2",{id:"using-tools-to-return-directly"},"Using tools to return directly"),(0,a.kt)("p",null,"Often, it can be desirable to have a tool output returned directly to the user, if it\u2019s called. You can do this easily with LangChain by setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"return_direct")," flag for a tool to be True."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm_math_chain = LLMMathChain(llm=llm)\ntools = [\n    Tool(\n        name="Calculator",\n        func=llm_math_chain.run,\n        description="useful for when you need to answer questions about math",\n        return_direct=True,\n    )\n]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI(temperature=0)\nagent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("whats 2**.12")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n     I need to calculate this\n    Action: Calculator\n    Action Input: 2**.12Answer: 1.086734862526058\n    \n    > Finished chain.\n\n\n\n\n\n    'Answer: 1.086734862526058'\n"))),(0,a.kt)("h2",{id:"handling-tool-errors"},"Handling Tool Errors"),(0,a.kt)("p",null,"When a tool encounters an error and the exception is not caught, the agent will stop executing. If you want the agent to continue execution, you can raise a ",(0,a.kt)("inlineCode",{parentName:"p"},"ToolException")," and set ",(0,a.kt)("inlineCode",{parentName:"p"},"handle_tool_error")," accordingly. "),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"ToolException")," is thrown, the agent will not stop working, but will handle the exception according to the ",(0,a.kt)("inlineCode",{parentName:"p"},"handle_tool_error")," variable of the tool, and the processing result will be returned to the agent as observation, and printed in red."),(0,a.kt)("p",null,"You can set ",(0,a.kt)("inlineCode",{parentName:"p"},"handle_tool_error")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),", set it a unified string value, or set it as a function. If it's set as a function, the function should take a ",(0,a.kt)("inlineCode",{parentName:"p"},"ToolException")," as a parameter and return a ",(0,a.kt)("inlineCode",{parentName:"p"},"str")," value."),(0,a.kt)("p",null,"Please note that only raising a ",(0,a.kt)("inlineCode",{parentName:"p"},"ToolException")," won't be effective. You need to first set the ",(0,a.kt)("inlineCode",{parentName:"p"},"handle_tool_error")," of the tool because its default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ToolException", "source": "langchain.tools.base", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.ToolException.html", "title": "Defining Custom Tools"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Defining Custom Tools"}, {"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Defining Custom Tools"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Defining Custom Tools"}, {"imported": "Tool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Defining Custom Tools"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Defining Custom Tools"}]--\x3e\nfrom langchain.tools.base import ToolException\n\nfrom langchain import SerpAPIWrapper\nfrom langchain.agents import AgentType, initialize_agent\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.tools import Tool\n\nfrom langchain.chat_models import ChatOpenAI\n\n\ndef _handle_error(error: ToolException) -> str:\n    return (\n        "The following errors occurred during tool execution:"\n        + error.args[0]\n        + "Please try another tool."\n    )\n\n\ndef search_tool1(s: str):\n    raise ToolException("The search tool1 is not available.")\n\n\ndef search_tool2(s: str):\n    raise ToolException("The search tool2 is not available.")\n\n\nsearch_tool3 = SerpAPIWrapper()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'description = "useful for when you need to answer questions about current events.You should give priority to using it."\ntools = [\n    Tool.from_function(\n        func=search_tool1,\n        name="Search_tool1",\n        description=description,\n        handle_tool_error=True,\n    ),\n    Tool.from_function(\n        func=search_tool2,\n        name="Search_tool2",\n        description=description,\n        handle_tool_error=_handle_error,\n    ),\n    Tool.from_function(\n        func=search_tool3.run,\n        name="Search_tool3",\n        description="useful for when you need to answer questions about current events",\n    ),\n]\n\nagent = initialize_agent(\n    tools,\n    ChatOpenAI(temperature=0),\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("Who is Leo DiCaprio\'s girlfriend?")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    I should use Search_tool1 to find recent news articles about Leo DiCaprio\'s personal life.\n    Action: Search_tool1\n    Action Input: "Leo DiCaprio girlfriend"\n    Observation: The search tool1 is not available.\n    Thought:I should try using Search_tool2 instead.\n    Action: Search_tool2\n    Action Input: "Leo DiCaprio girlfriend"\n    Observation: The following errors occurred during tool execution:The search tool2 is not available.Please try another tool.\n    Thought:I should try using Search_tool3 as a last resort.\n    Action: Search_tool3\n    Action Input: "Leo DiCaprio girlfriend"\n    Observation: Leonardo DiCaprio and Gigi Hadid were recently spotted at a pre-Oscars party, sparking interest once again in their rumored romance. The Revenant actor and the model first made headlines when they were spotted together at a New York Fashion Week afterparty in September 2022.\n    Thought:Based on the information from Search_tool3, it seems that Gigi Hadid is currently rumored to be Leo DiCaprio\'s girlfriend.\n    Final Answer: Gigi Hadid is currently rumored to be Leo DiCaprio\'s girlfriend.\n    \n    > Finished chain.\n\n\n\n\n\n    "Gigi Hadid is currently rumored to be Leo DiCaprio\'s girlfriend."\n'))))}m.isMDXComponent=!0}}]);