"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98551],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=l(t),u=r,m=h["".concat(c,".").concat(u)]||h[u]||d[u]||s;return t?a.createElement(m,i(i({ref:n},p),{},{components:t})):a.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[h]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},24523:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const s={},i="OpenSearch",o={unversionedId:"integrations/vectorstores/opensearch",id:"integrations/vectorstores/opensearch",title:"OpenSearch",description:"OpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.",source:"@site/docs/integrations/vectorstores/opensearch.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/opensearch",permalink:"/langchain/docs/integrations/vectorstores/opensearch",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"nucliadb_vectorstore",permalink:"/langchain/docs/integrations/vectorstores/nucliadb_vectorstore"},next:{title:"Postgres Embedding",permalink:"/langchain/docs/integrations/vectorstores/pgembedding"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"similarity_search using Approximate k-NN",id:"similarity_search-using-approximate-k-nn",level:2},{value:"similarity_search using Script Scoring",id:"similarity_search-using-script-scoring",level:2},{value:"similarity_search using Painless Scripting",id:"similarity_search-using-painless-scripting",level:2},{value:"Maximum marginal relevance search (MMR)",id:"maximum-marginal-relevance-search-mmr",level:2},{value:"Using a preexisting OpenSearch instance",id:"using-a-preexisting-opensearch-instance",level:2},{value:"Using AOSS (Amazon OpenSearch Service Serverless)",id:"using-aoss-amazon-opensearch-service-serverless",level:2},{value:"Using AOS (Amazon OpenSearch Service)",id:"using-aos-amazon-opensearch-service",level:2}],p={toc:l},h="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(h,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"opensearch"},"OpenSearch"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://opensearch.org/"},"OpenSearch")," is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenSearch")," is a distributed search and analytics engine based on ",(0,r.kt)("inlineCode",{parentName:"p"},"Apache Lucene"),".")),(0,r.kt)("p",null,"This notebook shows how to use functionality related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenSearch")," database."),(0,r.kt)("p",null,"To run, you should have an OpenSearch instance up and running: ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/opensearchproject/opensearch"},"see here for an easy Docker installation"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"similarity_search")," by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for\nlarge datasets. To perform brute force search we have other search methods known as Script Scoring and Painless Scripting.\nCheck ",(0,r.kt)("a",{parentName:"p",href:"https://opensearch.org/docs/latest/search-plugins/knn/index/"},"this")," for more details."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install the Python client."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install opensearch-py\n")),(0,r.kt)("p",null,"We want to use OpenAIEmbeddings so we have to get the OpenAI API Key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "OpenSearch"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "OpenSearch"}, {"imported": "OpenSearchVectorSearch", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.opensearch_vector_search.OpenSearchVectorSearch.html", "title": "OpenSearch"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "OpenSearch"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import OpenSearchVectorSearch\nfrom langchain.document_loaders import TextLoader\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "OpenSearch"}]--\x3e\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n')),(0,r.kt)("h2",{id:"similarity_search-using-approximate-k-nn"},"similarity_search using Approximate k-NN"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"similarity_search")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"Approximate k-NN")," Search with Custom Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = OpenSearchVectorSearch.from_documents(\n    docs, embeddings, opensearch_url="http://localhost:9200"\n)\n\n# If using the default Docker installation, use this instantiation instead:\n# docsearch = OpenSearchVectorSearch.from_documents(\n#     docs,\n#     embeddings,\n#     opensearch_url="https://localhost:9200",\n#     http_auth=("admin", "admin"),\n#     use_ssl = False,\n#     verify_certs = False,\n#     ssl_assert_hostname = False,\n#     ssl_show_warn = False,\n# )\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(query, k=10)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = OpenSearchVectorSearch.from_documents(\n    docs,\n    embeddings,\n    opensearch_url="http://localhost:9200",\n    engine="faiss",\n    space_type="innerproduct",\n    ef_construction=256,\n    m=48,\n)\n\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(query)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,r.kt)("h2",{id:"similarity_search-using-script-scoring"},"similarity_search using Script Scoring"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"similarity_search")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"Script Scoring")," with Custom Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = OpenSearchVectorSearch.from_documents(\n    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False\n)\n\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(\n    "What did the president say about Ketanji Brown Jackson",\n    k=1,\n    search_type="script_scoring",\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,r.kt)("h2",{id:"similarity_search-using-painless-scripting"},"similarity_search using Painless Scripting"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"similarity_search")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"Painless Scripting")," with Custom Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = OpenSearchVectorSearch.from_documents(\n    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False\n)\nfilter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(\n    "What did the president say about Ketanji Brown Jackson",\n    search_type="painless_scripting",\n    space_type="cosineSimilarity",\n    pre_filter=filter,\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,r.kt)("h2",{id:"maximum-marginal-relevance-search-mmr"},"Maximum marginal relevance search (MMR)"),(0,r.kt)("p",null,"If you\u2019d like to look up for some similar documents, but you\u2019d also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)\n')),(0,r.kt)("h2",{id:"using-a-preexisting-opensearch-instance"},"Using a preexisting OpenSearch instance"),(0,r.kt)("p",null,"It's also possible to use a preexisting OpenSearch instance with documents that already have vectors present."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# this is just an example, you would need to change these values to point to another opensearch instance\ndocsearch = OpenSearchVectorSearch(\n    index_name="index-*",\n    embedding_function=embeddings,\n    opensearch_url="http://localhost:9200",\n)\n\n# you can specify custom field names to match the fields you\'re using to store your embedding, document text value, and metadata\ndocs = docsearch.similarity_search(\n    "Who was asking about getting lunch today?",\n    search_type="script_scoring",\n    space_type="cosinesimil",\n    vector_field="message_embedding",\n    text_field="message",\n    metadata_field="message_metadata",\n)\n')),(0,r.kt)("h2",{id:"using-aoss-amazon-opensearch-service-serverless"},"Using AOSS (Amazon OpenSearch Service Serverless)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.\n\nservice = 'aoss' # must set the service as 'aoss'\nregion = 'us-east-2'\ncredentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()\nawsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)\n\ndocsearch = OpenSearchVectorSearch.from_documents(\n    docs,\n    embeddings,\n    opensearch_url=\"host url\",\n    http_auth=awsauth,\n    timeout = 300,\n    use_ssl = True,\n    verify_certs = True,\n    connection_class = RequestsHttpConnection,\n    index_name=\"test-index-using-aoss\",\n    engine=\"faiss\",\n)\n\ndocs = docsearch.similarity_search(\n    \"What is feature selection\",\n     efficient_filter=filter,\n     k=200,\n)\n")),(0,r.kt)("h2",{id:"using-aos-amazon-opensearch-service"},"Using AOS (Amazon OpenSearch Service)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# This is just an example to show how to use AOS , you need to set proper values.\n\nservice = 'es' # must set the service as 'es'\nregion = 'us-east-2'\ncredentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()\nawsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)\n\ndocsearch = OpenSearchVectorSearch.from_documents(\n    docs,\n    embeddings,\n    opensearch_url=\"host url\",\n    http_auth=awsauth,\n    timeout = 300,\n    use_ssl = True,\n    verify_certs = True,\n    connection_class = RequestsHttpConnection,\n    index_name=\"test-index\",\n)\n\ndocs = docsearch.similarity_search(\n    \"What is feature selection\",\n     k=200,\n)\n")))}d.isMDXComponent=!0}}]);