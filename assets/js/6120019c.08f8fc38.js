"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[95877],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=c(n),h=l,d=m["".concat(i,".").concat(h)]||m[h]||u[h]||o;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,s=new Array(o);s[0]=h;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r[m]="string"==typeof e?e:l,s[1]=r;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},57583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(87462),l=(n(67294),n(3905));const o={title:"SQL",sidebar_position:2},s=void 0,r={unversionedId:"use_cases/qa_structured/sql",id:"use_cases/qa_structured/sql",title:"SQL",description:"Open In Collab",source:"@site/docs/use_cases/qa_structured/sql.md",sourceDirName:"use_cases/qa_structured",slug:"/use_cases/qa_structured/sql",permalink:"/langchain/docs/use_cases/qa_structured/sql",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"SQL",sidebar_position:2},sidebar:"use_cases",previous:{title:"QA using Activeloop's DeepLake",permalink:"/langchain/docs/use_cases/question_answering/integrations/semantic-search-over-chat"},next:{title:"Elasticsearch",permalink:"/langchain/docs/use_cases/qa_structured/integrations/elasticsearch"}},i={},c=[{value:"Use case",id:"use-case",level:2},{value:"Overview",id:"overview",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"Go deeper",id:"go-deeper",level:3},{value:"Case 1: Text-to-SQL query",id:"case-1-text-to-sql-query",level:2},{value:"Go deeper",id:"go-deeper-1",level:3},{value:"Case 2: Text-to-SQL query and execution",id:"case-2-text-to-sql-query-and-execution",level:2},{value:"Go deeper",id:"go-deeper-2",level:3},{value:"Case 3: SQL agents",id:"case-3-sql-agents",level:2},{value:"Agent task example #1 - Running queries",id:"agent-task-example-1---running-queries",level:3},{value:"Agent task example #2 - Describing a Table",id:"agent-task-example-2---describing-a-table",level:3},{value:"Extending the SQL Toolkit",id:"extending-the-sql-toolkit",level:3},{value:"Including dynamic few-shot examples",id:"including-dynamic-few-shot-examples",level:4},{value:"Finding and correcting misspellings for proper nouns",id:"finding-and-correcting-misspellings-for-proper-nouns",level:4},{value:"Go deeper",id:"go-deeper-3",level:3},{value:"Elastic Search",id:"elastic-search",level:2}],p=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var m;const u={toc:c},h="wrapper";function d(e){let{components:t,...o}=e;return(0,l.kt)(h,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/langchain-ai/langchain/blob/master/docs/extras/use_cases/qa_structured/sql.ipynb"},(0,l.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Collab"}))),(0,l.kt)("h2",{id:"use-case"},"Use case"),(0,l.kt)("p",null,"Enterprise data is often stored in SQL databases."),(0,l.kt)("p",null,"LLMs make it possible to interact with SQL databases using natural langugae."),(0,l.kt)("p",null,"LangChain offers SQL Chains and Agents to build and run SQL queries based on natural language prompts. "),(0,l.kt)("p",null,"These are compatible with any SQL dialect supported by SQLAlchemy (e.g., MySQL, PostgreSQL, Oracle SQL, Databricks, SQLite)."),(0,l.kt)("p",null,"They enable use cases such as:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Generating queries that will be run based on natural language questions"),(0,l.kt)("li",{parentName:"ul"},"Creating chatbots that can answer questions based on database data"),(0,l.kt)("li",{parentName:"ul"},"Building custom dashboards based on insights a user wants to analyze")),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"LangChain provides tools to interact with SQL Databases:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"Build SQL queries")," based on natural language user questions"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"Query a SQL database")," using chains for query creation and execution"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"Interact with a SQL database")," using agents for robust and flexible querying ")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"sql_usecase.png",src:n(58886).Z,width:"1571",height:"470"})),(0,l.kt)("h2",{id:"quickstart"},"Quickstart"),(0,l.kt)("p",null,"First, get required packages and set environment variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install langchain langchain-experimental openai\n\n# Set env var OPENAI_API_KEY or load from a .env file\n# import dotenv\n\n# dotenv.load_dotenv()\n")),(0,l.kt)("p",null,"The below example will use a SQLite connection with Chinook database. "),(0,l.kt)("p",null,"Follow ",(0,l.kt)("a",{parentName:"p",href:"https://database.guide/2-sample-databases-sqlite/"},"installation steps")," to create ",(0,l.kt)("inlineCode",{parentName:"p"},"Chinook.db")," in the same directory as this notebook:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Save ",(0,l.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/lerocha/chinook-database/master/ChinookDatabase/DataSources/Chinook_Sqlite.sql"},"this file")," to the directory as ",(0,l.kt)("inlineCode",{parentName:"li"},"Chinook_Sqlite.sql")),(0,l.kt)("li",{parentName:"ul"},"Run ",(0,l.kt)("inlineCode",{parentName:"li"},"sqlite3 Chinook.db")),(0,l.kt)("li",{parentName:"ul"},"Run ",(0,l.kt)("inlineCode",{parentName:"li"},".read Chinook_Sqlite.sql")),(0,l.kt)("li",{parentName:"ul"},"Test ",(0,l.kt)("inlineCode",{parentName:"li"},"SELECT * FROM Artist LIMIT 10;"))),(0,l.kt)("p",null,"Now, ",(0,l.kt)("inlineCode",{parentName:"p"},"Chinhook.db")," is in our directory."),(0,l.kt)("p",null,"Let's create a ",(0,l.kt)("inlineCode",{parentName:"p"},"SQLDatabaseChain")," to create and execute SQL queries."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SQLDatabase", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.sql_database.SQLDatabase.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.utilities import SQLDatabase\nfrom langchain.llms import OpenAI\nfrom langchain_experimental.sql import SQLDatabaseChain\n\ndb = SQLDatabase.from_uri("sqlite:///Chinook.db")\nllm = OpenAI(temperature=0, verbose=True)\ndb_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'db_chain.run("How many employees are there?")\n')),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new SQLDatabaseChain chain...\n    How many employees are there?\n    SQLQuery:SELECT COUNT(*) FROM \"Employee\";\n    SQLResult: [(8,)]\n    Answer:There are 8 employees.\n    > Finished chain.\n\n\n\n\n\n    'There are 8 employees.'\n"))),(0,l.kt)("p",null,"Note that this both creates and executes the query. "),(0,l.kt)("p",null,"In the following sections, we will cover the 3 different use cases mentioned in the overview."),(0,l.kt)("h3",{id:"go-deeper"},"Go deeper"),(0,l.kt)("p",null,"You can load tabular data from other sources other than SQL Databases.\nFor example:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/document_loaders/csv"},"Loading a CSV file")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/document_loaders/pandas_dataframe"},"Loading a Pandas DataFrame"),"\nHere you can ",(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/document_loaders/"},"check full list of Document Loaders"))),(0,l.kt)("h2",{id:"case-1-text-to-sql-query"},"Case 1: Text-to-SQL query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "create_sql_query_chain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.sql_database.query.create_sql_query_chain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import create_sql_query_chain\n')),(0,l.kt)("p",null,"Let's create the chain that will build the SQL Query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'chain = create_sql_query_chain(ChatOpenAI(temperature=0), db)\nresponse = chain.invoke({"question":"How many employees are there"})\nprint(response)\n')),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    SELECT COUNT(*) FROM Employee\n"))),(0,l.kt)("p",null,"After building the SQL query based on a user question, we can execute the query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"db.run(response)\n")),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    '[(8,)]'\n"))),(0,l.kt)("p",null,"As we can see, the SQL Query Builder chain ",(0,l.kt)("strong",{parentName:"p"},"only created")," the query, and we handled the ",(0,l.kt)("strong",{parentName:"p"},"query execution separately"),"."),(0,l.kt)("h3",{id:"go-deeper-1"},"Go deeper"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Looking under the hood")),(0,l.kt)("p",null,"We can look at the ",(0,l.kt)("a",{parentName:"p",href:"https://smith.langchain.com/public/c8fa52ea-be46-4829-bde2-52894970b830/r"},"LangSmith trace")," to unpack this:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/2204.00498.pdf"},"Some papers")," have reported good performance when prompting with:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"CREATE TABLE")," description for each table, which include column names, their types, etc"),(0,l.kt)("li",{parentName:"ul"},"Followed by three example rows in a ",(0,l.kt)("inlineCode",{parentName:"li"},"SELECT")," statement")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"create_sql_query_chain")," adopts this the best practice (see more in this ",(0,l.kt)("a",{parentName:"p",href:"https://blog.langchain.dev/llms-and-sql/"},"blog"),").",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("img",{alt:"sql_usecase.png",src:n(17336).Z,width:"1501",height:"894"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Improvements")),(0,l.kt)("p",null,"The query builder can be improved in several ways, such as (but not limited to):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Customizing database description to your specific use case"),(0,l.kt)("li",{parentName:"ul"},"Hardcoding a few examples of questions and their corresponding SQL query in the prompt"),(0,l.kt)("li",{parentName:"ul"},"Using a vector database to include dynamic examples that are relevant to the specific user question")),(0,l.kt)("p",null,"All these examples involve customizing the chain's prompt. "),(0,l.kt)("p",null,"For example, we can include a few examples in our prompt like so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.prompts import PromptTemplate\n\nTEMPLATE = """Given an input question, first create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.\nUse the following format:\n\nQuestion: "Question here"\nSQLQuery: "SQL Query to run"\nSQLResult: "Result of the SQLQuery"\nAnswer: "Final answer here"\n\nOnly use the following tables:\n\n{table_info}.\n\nSome examples of SQL queries that corrsespond to questions are:\n\n{few_shot_examples}\n\nQuestion: {input}"""\n\nCUSTOM_PROMPT = PromptTemplate(\n    input_variables=["input", "few_shot_examples", "table_info", "dialect"], template=TEMPLATE\n)\n')),(0,l.kt)("p",null,"We can also access this ",(0,l.kt)("a",{parentName:"p",href:"https://smith.langchain.com/hub/rlm/text-to-sql"},"prompt")," in the LangChain prompt hub."),(0,l.kt)("p",null,"This will work with your ",(0,l.kt)("a",{parentName:"p",href:"https://docs.smith.langchain.com/"},"LangSmith API key"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import hub\nCUSTOM_PROMPT = hub.pull("rlm/text-to-sql")\n')),(0,l.kt)("h2",{id:"case-2-text-to-sql-query-and-execution"},"Case 2: Text-to-SQL query and execution"),(0,l.kt)("p",null,"We can use ",(0,l.kt)("inlineCode",{parentName:"p"},"SQLDatabaseChain")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"langchain_experimental")," to create and run SQL queries."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.llms import OpenAI\nfrom langchain_experimental.sql import SQLDatabaseChain\n\nllm = OpenAI(temperature=0, verbose=True)\ndb_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'db_chain.run("How many employees are there?")\n')),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new SQLDatabaseChain chain...\n    How many employees are there?\n    SQLQuery:SELECT COUNT(*) FROM \"Employee\";\n    SQLResult: [(8,)]\n    Answer:There are 8 employees.\n    > Finished chain.\n\n\n\n\n\n    'There are 8 employees.'\n"))),(0,l.kt)("p",null,"As we can see, we get the same result as the previous case."),(0,l.kt)("p",null,"Here, the chain ",(0,l.kt)("strong",{parentName:"p"},"also handles the query execution")," and provides a final answer based on the user question and the query result."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Be careful")," while using this approach as it is susceptible to ",(0,l.kt)("inlineCode",{parentName:"p"},"SQL Injection"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The chain is executing queries that are created by an LLM, and weren't validated"),(0,l.kt)("li",{parentName:"ul"},"e.g. records may be created, modified or deleted unintentionally_")),(0,l.kt)("p",null,"This is why we see the ",(0,l.kt)("inlineCode",{parentName:"p"},"SQLDatabaseChain")," is inside ",(0,l.kt)("inlineCode",{parentName:"p"},"langchain_experimental"),"."),(0,l.kt)("h3",{id:"go-deeper-2"},"Go deeper"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Looking under the hood")),(0,l.kt)("p",null,"We can use the ",(0,l.kt)("a",{parentName:"p",href:"https://smith.langchain.com/public/7f202a0c-1e35-42d6-a84a-6c2a58f697ef/r"},"LangSmith trace")," to see what is happening under the hood:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"As discussed above, first we create the query:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"text: ' SELECT COUNT(*) FROM \"Employee\";'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Then, it executes the query and passes the results to an LLM for synthesis.")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"sql_usecase.png",src:n(20714).Z,width:"2428",height:"1084"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Improvements")),(0,l.kt)("p",null,"The performance of the ",(0,l.kt)("inlineCode",{parentName:"p"},"SQLDatabaseChain")," can be enhanced in several ways:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#adding-sample-rows"},"Adding sample rows")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/tools/sqlite#custom-table-info"},"Specifying custom table information")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/tools/sqlite#use-query-checker"},"Using Query Checker")," self-correct invalid SQL using parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"use_query_checker=True")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/tools/sqlite#customize-prompt"},"Customizing the LLM Prompt")," include specific instructions or relevant information, using parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"prompt=CUSTOM_PROMPT")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/tools/sqlite#return-intermediate-steps"},"Get intermediate steps")," access the SQL statement as well as the final result using parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"return_intermediate_steps=True")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/tools/sqlite#choosing-how-to-limit-the-number-of-rows-returned"},"Limit the number of rows")," a query will return using parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"top_k=5"))),(0,l.kt)("p",null,"You might find ",(0,l.kt)("a",{parentName:"p",href:"/docs/integrations/tools/sqlite#sqldatabasesequentialchain"},"SQLDatabaseSequentialChain"),"\nuseful for cases in which the number of tables in the database is large."),(0,l.kt)("p",null,"This ",(0,l.kt)("inlineCode",{parentName:"p"},"Sequential Chain")," handles the process of:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Determining which tables to use based on the user question"),(0,l.kt)("li",{parentName:"ol"},"Calling the normal SQL database chain using only relevant tables")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Adding Sample Rows")),(0,l.kt)("p",null,"Providing sample data can help the LLM construct correct queries when the data format is not obvious. "),(0,l.kt)("p",null,"For example, we can tell LLM that artists are saved with their full names by providing two rows from the Track table."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"db = SQLDatabase.from_uri(\n    \"sqlite:///Chinook.db\",\n    include_tables=['Track'], # we include only one table to save tokens in the prompt :)\n    sample_rows_in_table_info=2)\n")),(0,l.kt)("p",null,"The sample rows are added to the prompt after each corresponding table's column information."),(0,l.kt)("p",null,"We can use ",(0,l.kt)("inlineCode",{parentName:"p"},"db.table_info")," and check which sample rows are included:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"print(db.table_info)\n")),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'    \n    CREATE TABLE "Track" (\n        "TrackId" INTEGER NOT NULL, \n        "Name" NVARCHAR(200) NOT NULL, \n        "AlbumId" INTEGER, \n        "MediaTypeId" INTEGER NOT NULL, \n        "GenreId" INTEGER, \n        "Composer" NVARCHAR(220), \n        "Milliseconds" INTEGER NOT NULL, \n        "Bytes" INTEGER, \n        "UnitPrice" NUMERIC(10, 2) NOT NULL, \n        PRIMARY KEY ("TrackId"), \n        FOREIGN KEY("MediaTypeId") REFERENCES "MediaType" ("MediaTypeId"), \n        FOREIGN KEY("GenreId") REFERENCES "Genre" ("GenreId"), \n        FOREIGN KEY("AlbumId") REFERENCES "Album" ("AlbumId")\n    )\n    \n    /*\n    2 rows from Track table:\n    TrackId Name    AlbumId MediaTypeId GenreId Composer    Milliseconds    Bytes   UnitPrice\n    1   For Those About To Rock (We Salute You) 1   1   1   Angus Young, Malcolm Young, Brian Johnson   343719  11170334    0.99\n    2   Balls to the Wall   2   2   1   None    342562  5510424 0.99\n    */\n'))),(0,l.kt)("h2",{id:"case-3-sql-agents"},"Case 3: SQL agents"),(0,l.kt)("p",null,"LangChain has an SQL Agent which provides a more flexible way of interacting with SQL Databases than the ",(0,l.kt)("inlineCode",{parentName:"p"},"SQLDatabaseChain"),"."),(0,l.kt)("p",null,"The main advantages of using the SQL Agent are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It can answer questions based on the databases' schema as well as on the databases' content (like describing a specific table)"),(0,l.kt)("li",{parentName:"ul"},"It can recover from errors by running a generated query, catching the traceback and regenerating it correctly")),(0,l.kt)("p",null,"To initialize the agent, we use ",(0,l.kt)("inlineCode",{parentName:"p"},"create_sql_agent")," function. "),(0,l.kt)("p",null,"This agent contains the ",(0,l.kt)("inlineCode",{parentName:"p"},"SQLDatabaseToolkit")," which contains tools to: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Create and execute queries"),(0,l.kt)("li",{parentName:"ul"},"Check query syntax"),(0,l.kt)("li",{parentName:"ul"},"Retrieve table descriptions"),(0,l.kt)("li",{parentName:"ul"},"... and more")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_sql_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.base.create_sql_agent.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "SQLDatabaseToolkit", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.toolkit.SQLDatabaseToolkit.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "AgentExecutor", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.AgentExecutor.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "AgentType", "source": "langchain.agents.agent_types", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.agents import create_sql_agent\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\n# from langchain.agents import AgentExecutor\nfrom langchain.agents.agent_types import AgentType\n\ndb = SQLDatabase.from_uri("sqlite:///Chinook.db")\nllm = OpenAI(temperature=0, verbose=True)\n\nagent_executor = create_sql_agent(\n    llm=OpenAI(temperature=0),\n    toolkit=SQLDatabaseToolkit(db=db, llm=OpenAI(temperature=0)),\n    verbose=True,\n    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n)\n')),(0,l.kt)("h3",{id:"agent-task-example-1---running-queries"},"Agent task example #1 - Running queries"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run(\n    "List the total sales per country. Which country\'s customers spent the most?"\n)\n')),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    Action: sql_db_list_tables\n    Action Input: \n    Observation: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track\n    Thought: I should query the schema of the Invoice and Customer tables.\n    Action: sql_db_schema\n    Action Input: Invoice, Customer\n    Observation: \n    CREATE TABLE "Customer" (\n        "CustomerId" INTEGER NOT NULL, \n        "FirstName" NVARCHAR(40) NOT NULL, \n        "LastName" NVARCHAR(20) NOT NULL, \n        "Company" NVARCHAR(80), \n        "Address" NVARCHAR(70), \n        "City" NVARCHAR(40), \n        "State" NVARCHAR(40), \n        "Country" NVARCHAR(40), \n        "PostalCode" NVARCHAR(10), \n        "Phone" NVARCHAR(24), \n        "Fax" NVARCHAR(24), \n        "Email" NVARCHAR(60) NOT NULL, \n        "SupportRepId" INTEGER, \n        PRIMARY KEY ("CustomerId"), \n        FOREIGN KEY("SupportRepId") REFERENCES "Employee" ("EmployeeId")\n    )\n    \n    /*\n    3 rows from Customer table:\n    CustomerId  FirstName   LastName    Company Address City    State   Country PostalCode  Phone   Fax Email   SupportRepId\n    1   Lu\xeds    Gon\xe7alves   Embraer - Empresa Brasileira de Aeron\xe1utica S.A.    Av. Brigadeiro Faria Lima, 2170 S\xe3o Jos\xe9 dos Campos SP  Brazil  12227-000   +55 (12) 3923-5555  +55 (12) 3923-5566  luisg@embraer.com.br    3\n    2   Leonie  K\xf6hler  None    Theodor-Heuss-Stra\xdfe 34 Stuttgart   None    Germany 70174   +49 0711 2842222    None    leonekohler@surfeu.de   5\n    3   Fran\xe7ois    Tremblay    None    1498 rue B\xe9langer   Montr\xe9al    QC  Canada  H2G 1A7 +1 (514) 721-4711   None    ftremblay@gmail.com 3\n    */\n    \n    \n    CREATE TABLE "Invoice" (\n        "InvoiceId" INTEGER NOT NULL, \n        "CustomerId" INTEGER NOT NULL, \n        "InvoiceDate" DATETIME NOT NULL, \n        "BillingAddress" NVARCHAR(70), \n        "BillingCity" NVARCHAR(40), \n        "BillingState" NVARCHAR(40), \n        "BillingCountry" NVARCHAR(40), \n        "BillingPostalCode" NVARCHAR(10), \n        "Total" NUMERIC(10, 2) NOT NULL, \n        PRIMARY KEY ("InvoiceId"), \n        FOREIGN KEY("CustomerId") REFERENCES "Customer" ("CustomerId")\n    )\n    \n    /*\n    3 rows from Invoice table:\n    InvoiceId   CustomerId  InvoiceDate BillingAddress  BillingCity BillingState    BillingCountry  BillingPostalCode   Total\n    1   2   2009-01-01 00:00:00 Theodor-Heuss-Stra\xdfe 34 Stuttgart   None    Germany 70174   1.98\n    2   4   2009-01-02 00:00:00 Ullev\xe5lsveien 14    Oslo    None    Norway  0171    3.96\n    3   8   2009-01-03 00:00:00 Gr\xe9trystraat 63 Brussels    None    Belgium 1000    5.94\n    */\n    Thought: I should query the total sales per country.\n    Action: sql_db_query\n    Action Input: SELECT Country, SUM(Total) AS TotalSales FROM Invoice INNER JOIN Customer ON Invoice.CustomerId = Customer.CustomerId GROUP BY Country ORDER BY TotalSales DESC LIMIT 10\n    Observation: [(\'USA\', 523.0600000000003), (\'Canada\', 303.9599999999999), (\'France\', 195.09999999999994), (\'Brazil\', 190.09999999999997), (\'Germany\', 156.48), (\'United Kingdom\', 112.85999999999999), (\'Czech Republic\', 90.24000000000001), (\'Portugal\', 77.23999999999998), (\'India\', 75.25999999999999), (\'Chile\', 46.62)]\n    Thought: I now know the final answer\n    Final Answer: The country with the highest total sales is the USA, with a total of $523.06.\n    \n    > Finished chain.\n\n\n\n\n\n    \'The country with the highest total sales is the USA, with a total of $523.06.\'\n'))),(0,l.kt)("p",null,"Looking at the ",(0,l.kt)("a",{parentName:"p",href:"https://smith.langchain.com/public/a86dbe17-5782-4020-bce6-2de85343168a/r"},"LangSmith trace"),", we can see:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The agent is using a ReAct style prompt"),(0,l.kt)("li",{parentName:"ul"},"First, it will look at the tables: ",(0,l.kt)("inlineCode",{parentName:"li"},"Action: sql_db_list_tables")," using tool ",(0,l.kt)("inlineCode",{parentName:"li"},"sql_db_list_tables")),(0,l.kt)("li",{parentName:"ul"},"Given the tables as an observation, it ",(0,l.kt)("inlineCode",{parentName:"li"},"thinks")," and then determinates the next ",(0,l.kt)("inlineCode",{parentName:"li"},"action"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Observation: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track\nThought: I should query the schema of the Invoice and Customer tables.\nAction: sql_db_schema\nAction Input: Invoice, Customer\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It then formulates the query using the schema from tool ",(0,l.kt)("inlineCode",{parentName:"li"},"sql_db_schema"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Thought: I should query the total sales per country.\nAction: sql_db_query\nAction Input: SELECT Country, SUM(Total) AS TotalSales FROM Invoice INNER JOIN Customer ON Invoice.CustomerId = Customer.CustomerId GROUP BY Country ORDER BY TotalSales DESC LIMIT 10\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It finally executes the generated query using tool ",(0,l.kt)("inlineCode",{parentName:"li"},"sql_db_query"))),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"sql_usecase.png",src:n(83293).Z,width:"3317",height:"1116"})),(0,l.kt)("h3",{id:"agent-task-example-2---describing-a-table"},"Agent task example #2 - Describing a Table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("Describe the playlisttrack table")\n')),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    Action: sql_db_list_tables\n    Action Input: \n    Observation: Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track\n    Thought: The PlaylistTrack table is the most relevant to the question.\n    Action: sql_db_schema\n    Action Input: PlaylistTrack\n    Observation: \n    CREATE TABLE "PlaylistTrack" (\n        "PlaylistId" INTEGER NOT NULL, \n        "TrackId" INTEGER NOT NULL, \n        PRIMARY KEY ("PlaylistId", "TrackId"), \n        FOREIGN KEY("TrackId") REFERENCES "Track" ("TrackId"), \n        FOREIGN KEY("PlaylistId") REFERENCES "Playlist" ("PlaylistId")\n    )\n    \n    /*\n    3 rows from PlaylistTrack table:\n    PlaylistId  TrackId\n    1   3402\n    1   3389\n    1   3390\n    */\n    Thought: I now know the final answer\n    Final Answer: The PlaylistTrack table contains two columns, PlaylistId and TrackId, which are both integers and form a primary key. It also has two foreign keys, one to the Track table and one to the Playlist table.\n    \n    > Finished chain.\n\n\n\n\n\n    \'The PlaylistTrack table contains two columns, PlaylistId and TrackId, which are both integers and form a primary key. It also has two foreign keys, one to the Track table and one to the Playlist table.\'\n'))),(0,l.kt)("h3",{id:"extending-the-sql-toolkit"},"Extending the SQL Toolkit"),(0,l.kt)("p",null,"Although the out-of-the-box SQL Toolkit contains the necessary tools to start working on a database, it is often the case that some extra tools may be useful for extending the agent's capabilities. This is particularly useful when trying to use ",(0,l.kt)("strong",{parentName:"p"},"domain specific knowledge")," in the solution, in order to improve its overall performance."),(0,l.kt)("p",null,"Some examples include:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Including dynamic few shot examples"),(0,l.kt)("li",{parentName:"ul"},"Finding misspellings in proper nouns to use as column filters")),(0,l.kt)("p",null,"We can create separate tools which tackle these specific use cases and include them as a complement to the standard SQL Toolkit. Let's see how to include these two custom tools."),(0,l.kt)("h4",{id:"including-dynamic-few-shot-examples"},"Including dynamic few-shot examples"),(0,l.kt)("p",null,"In order to include dynamic few-shot examples, we need a custom ",(0,l.kt)("strong",{parentName:"p"},"Retriever Tool")," that handles the vector database in order to retrieve the examples that are semantically similar to the user\u2019s question."),(0,l.kt)("p",null,"Let's start by creating a dictionary with some examples: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# few_shots = {'List all artists.': 'SELECT * FROM artists;',\n#              \"Find all albums for the artist 'AC/DC'.\": \"SELECT * FROM albums WHERE ArtistId = (SELECT ArtistId FROM artists WHERE Name = 'AC/DC');\",\n#              \"List all tracks in the 'Rock' genre.\": \"SELECT * FROM tracks WHERE GenreId = (SELECT GenreId FROM genres WHERE Name = 'Rock');\",\n#              'Find the total duration of all tracks.': 'SELECT SUM(Milliseconds) FROM tracks;',\n#              'List all customers from Canada.': \"SELECT * FROM customers WHERE Country = 'Canada';\",\n#              'How many tracks are there in the album with ID 5?': 'SELECT COUNT(*) FROM tracks WHERE AlbumId = 5;',\n#              'Find the total number of invoices.': 'SELECT COUNT(*) FROM invoices;',\n#              'List all tracks that are longer than 5 minutes.': 'SELECT * FROM tracks WHERE Milliseconds > 300000;',\n#              'Who are the top 5 customers by total purchase?': 'SELECT CustomerId, SUM(Total) AS TotalPurchase FROM invoices GROUP BY CustomerId ORDER BY TotalPurchase DESC LIMIT 5;',\n#              'Which albums are from the year 2000?': \"SELECT * FROM albums WHERE strftime('%Y', ReleaseDate) = '2000';\",\n#              'How many employees are there': 'SELECT COUNT(*) FROM \"employee\"'\n#             }\n")),(0,l.kt)("p",null,"We can then create a retriever using the list of questions, assigning the target SQL query as metadata:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "FAISS", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.faiss.FAISS.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "Document", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores import FAISS\nfrom langchain.schema import Document\n\nembeddings = OpenAIEmbeddings()\n\nfew_shot_docs = [Document(page_content=question, metadata={\'sql_query\': few_shots[question]}) for question in few_shots.keys()]\nvector_db = FAISS.from_documents(few_shot_docs, embeddings)\nretriever = vector_db.as_retriever()\n')),(0,l.kt)("p",null,"Now we can create our own custom tool and append it as a new tool in the ",(0,l.kt)("inlineCode",{parentName:"p"},"create_sql_agent")," function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_retriever_tool", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.conversational_retrieval.tool.create_retriever_tool.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.agents.agent_toolkits import create_retriever_tool\n\ntool_description = """\nThis tool will help you understand similar examples to adapt them to the user question.\nInput to this tool should be the user question.\n"""\n\nretriever_tool = create_retriever_tool(\n        retriever,\n        name=\'sql_get_similar_examples\',\n        description=tool_description\n    )\ncustom_tool_list = [retriever_tool]\n')),(0,l.kt)("p",null,"Now we can create the agent, adjusting the standard SQL Agent suffix to consider our use case. Although the most straightforward way to handle this would be to include it just in the tool description, this is often not enough and we need to specify it in the agent prompt using the ",(0,l.kt)("inlineCode",{parentName:"p"},"suffix")," argument in the constructor."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_sql_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.base.create_sql_agent.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "SQLDatabaseToolkit", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.toolkit.SQLDatabaseToolkit.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "SQLDatabase", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.sql_database.SQLDatabase.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.agents import create_sql_agent, AgentType\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\nfrom langchain.utilities import SQLDatabase\nfrom langchain.chat_models import ChatOpenAI\n\ndb = SQLDatabase.from_uri("sqlite:///Chinook.db")\nllm = ChatOpenAI(model_name=\'gpt-4\',temperature=0)\n\ntoolkit = SQLDatabaseToolkit(db=db, llm=llm)\n\ncustom_suffix = """\nI should first get the similar examples I know.\nIf the examples are enough to construct the query, I can build it.\nOtherwise, I can then look at the tables in the database to see what I can query.\nThen I should query the schema of the most relevant tables\n"""\n\nagent = create_sql_agent(llm=llm,\n                         toolkit=toolkit,\n                         verbose=True,\n                         agent_type=AgentType.OPENAI_FUNCTIONS,\n                         extra_tools=custom_tool_list,\n                         suffix=custom_suffix\n                        )\n')),(0,l.kt)("p",null,"Let's try it out:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("How many employees do we have?")\n')),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    \n    Invoking: `sql_get_similar_examples` with `How many employees do we have?`\n    \n    \n    [Document(page_content='How many employees are there', metadata={'sql_query': 'SELECT COUNT(*) FROM \"employee\"'}), Document(page_content='Find the total number of invoices.', metadata={'sql_query': 'SELECT COUNT(*) FROM invoices;'})]\n    Invoking: `sql_db_query_checker` with `SELECT COUNT(*) FROM employee`\n    responded: {content}\n    \n    SELECT COUNT(*) FROM employee\n    Invoking: `sql_db_query` with `SELECT COUNT(*) FROM employee`\n    \n    \n    [(8,)]We have 8 employees.\n    \n    > Finished chain.\n\n\n\n\n\n    'We have 8 employees.'\n"))),(0,l.kt)("p",null,"As we can see, the agent first used the ",(0,l.kt)("inlineCode",{parentName:"p"},"sql_get_similar_examples")," tool in order to retrieve similar examples. As the question was very similar to other few shot examples, the agent ",(0,l.kt)("strong",{parentName:"p"},"didn't need to use any other tool")," from the standard Toolkit, thus ",(0,l.kt)("strong",{parentName:"p"},"saving time and tokens"),"."),(0,l.kt)("h4",{id:"finding-and-correcting-misspellings-for-proper-nouns"},"Finding and correcting misspellings for proper nouns"),(0,l.kt)("p",null,"In order to filter columns that contain proper nouns such as addresses, song names or artists, we first need to double-check the spelling in order to filter the data correctly. "),(0,l.kt)("p",null,"We can achieve this by creating a vector store using all the distinct proper nouns that exist in the database. We can then have the agent query that vector store each time the user includes a proper noun in their question, to find the correct spelling for that word. In this way, the agent can make sure it understands which entity the user is referring to before building the target query."),(0,l.kt)("p",null,"Let's follow a similar approach to the few shots, but without metadata: just embedding the proper nouns and then querying to get the most similar one to the misspelled user question."),(0,l.kt)("p",null,"First we need the unique values for each entity we want, for which we define a function that parses the result into a list of elements:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import ast\nimport re\n\ndef run_query_save_results(db, query):\n    res = db.run(query)\n    res = [el for sub in ast.literal_eval(res) for el in sub if el]\n    res = [re.sub(r'\\b\\d+\\b', '', string).strip() for string in res]\n    return res\n\nartists = run_query_save_results(db, \"SELECT Name FROM Artist\")\nalbums = run_query_save_results(db, \"SELECT Title FROM Album\")\n")),(0,l.kt)("p",null,"Now we can proceed with creating the custom ",(0,l.kt)("strong",{parentName:"p"},"retreiver tool")," and the final agent:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_retriever_tool", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.conversational_retrieval.tool.create_retriever_tool.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "FAISS", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.faiss.FAISS.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.agents.agent_toolkits import create_retriever_tool\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores import FAISS\n\n\ntexts = (artists + albums)\n\nembeddings = OpenAIEmbeddings()\nvector_db = FAISS.from_texts(texts, embeddings)\nretriever = vector_db.as_retriever()\n\nretriever_tool = create_retriever_tool(\n        retriever,\n        name=\'name_search\',\n        description=\'use to learn how a piece of data is actually written, can be from names, surnames addresses etc\'\n    )\n\ncustom_tool_list = [retriever_tool]\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_sql_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.base.create_sql_agent.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "SQLDatabaseToolkit", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.toolkit.SQLDatabaseToolkit.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "SQLDatabase", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.sql_database.SQLDatabase.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.agents import create_sql_agent, AgentType\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\nfrom langchain.utilities import SQLDatabase\nfrom langchain.chat_models import ChatOpenAI\n\n# db = SQLDatabase.from_uri("sqlite:///Chinook.db")\nllm = ChatOpenAI(model_name=\'gpt-4\', temperature=0)\n\ntoolkit = SQLDatabaseToolkit(db=db, llm=llm)\n\ncustom_suffix = """\nIf a user asks for me to filter based on proper nouns, I should first check the spelling using the name_search tool.\nOtherwise, I can then look at the tables in the database to see what I can query.\nThen I should query the schema of the most relevant tables\n"""\n\nagent = create_sql_agent(llm=llm,\n                         toolkit=toolkit,\n                         verbose=True,\n                         agent_type=AgentType.OPENAI_FUNCTIONS,\n                         extra_tools=custom_tool_list,\n                         suffix=custom_suffix\n                        )\n')),(0,l.kt)("p",null,"Let's try it out:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("How many albums does alis in pains have?")\n')),(0,l.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    \n    Invoking: `name_search` with `alis in pains`\n    \n    \n    [Document(page_content=\'House of Pain\', metadata={}), Document(page_content=\'Alice In Chains\', metadata={}), Document(page_content=\'Aisha Duo\', metadata={}), Document(page_content=\'House Of Pain\', metadata={})]\n    Invoking: `sql_db_list_tables` with ``\n    responded: {content}\n    \n    Album, Artist, Customer, Employee, Genre, Invoice, InvoiceLine, MediaType, Playlist, PlaylistTrack, Track\n    Invoking: `sql_db_schema` with `Album, Artist`\n    responded: {content}\n    \n    \n    CREATE TABLE "Album" (\n        "AlbumId" INTEGER NOT NULL, \n        "Title" NVARCHAR(160) NOT NULL, \n        "ArtistId" INTEGER NOT NULL, \n        PRIMARY KEY ("AlbumId"), \n        FOREIGN KEY("ArtistId") REFERENCES "Artist" ("ArtistId")\n    )\n    \n    /*\n    3 rows from Album table:\n    AlbumId Title   ArtistId\n    1   For Those About To Rock We Salute You   1\n    2   Balls to the Wall   2\n    3   Restless and Wild   2\n    */\n    \n    \n    CREATE TABLE "Artist" (\n        "ArtistId" INTEGER NOT NULL, \n        "Name" NVARCHAR(120), \n        PRIMARY KEY ("ArtistId")\n    )\n    \n    /*\n    3 rows from Artist table:\n    ArtistId    Name\n    1   AC/DC\n    2   Accept\n    3   Aerosmith\n    */\n    Invoking: `sql_db_query_checker` with `SELECT COUNT(*) FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = \'Alice In Chains\'`\n    responded: {content}\n    \n    SELECT COUNT(*) FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = \'Alice In Chains\'\n    Invoking: `sql_db_query` with `SELECT COUNT(*) FROM Album JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = \'Alice In Chains\'`\n    \n    \n    [(1,)]Alice In Chains has 1 album in the database.\n    \n    > Finished chain.\n\n\n\n\n\n    \'Alice In Chains has 1 album in the database.\'\n'))),(0,l.kt)("p",null,"As we can see, the agent used the ",(0,l.kt)("inlineCode",{parentName:"p"},"name_search")," tool in order to check how to correctly query the database for this specific artist."),(0,l.kt)("h3",{id:"go-deeper-3"},"Go deeper"),(0,l.kt)("p",null,"To learn more about the SQL Agent and how it works we refer to the ",(0,l.kt)("a",{parentName:"p",href:"/docs/integrations/toolkits/sql_database"},"SQL Agent Toolkit")," documentation."),(0,l.kt)("p",null,"You can also check Agents for other document types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/toolkits/pandas.html"},"Pandas Agent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/integrations/toolkits/csv.html"},"CSV Agent"))),(0,l.kt)("h2",{id:"elastic-search"},"Elastic Search"),(0,l.kt)("p",null,"Going beyond the above use-case, there are integrations with other databases."),(0,l.kt)("p",null,"For example, we can interact with Elasticsearch analytics database. "),(0,l.kt)("p",null,"This chain builds search queries via the Elasticsearch DSL API (filters and aggregations)."),(0,l.kt)("p",null,"The Elasticsearch client must have permissions for index listing, mapping description and search queries."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html"},"here")," for instructions on how to run Elasticsearch locally."),(0,l.kt)("p",null,"Make sure to install the Elasticsearch Python client before:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"pip install elasticsearch\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "ElasticsearchDatabaseChain", "source": "langchain.chains.elasticsearch_database", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.elasticsearch_database.base.ElasticsearchDatabaseChain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom elasticsearch import Elasticsearch\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains.elasticsearch_database import ElasticsearchDatabaseChain\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Initialize Elasticsearch python client.\n# See https://elasticsearch-py.readthedocs.io/en/v8.8.2/api.html#elasticsearch.Elasticsearch\nELASTIC_SEARCH_SERVER = "https://elastic:pass@localhost:9200"\ndb = Elasticsearch(ELASTIC_SEARCH_SERVER)\n')),(0,l.kt)("p",null,"Uncomment the next cell to initially populate your db."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# customers = [\n#     {"firstname": "Jennifer", "lastname": "Walters"},\n#     {"firstname": "Monica","lastname":"Rambeau"},\n#     {"firstname": "Carol","lastname":"Danvers"},\n#     {"firstname": "Wanda","lastname":"Maximoff"},\n#     {"firstname": "Jennifer","lastname":"Takeda"},\n# ]\n# for i, customer in enumerate(customers):\n#     db.create(index="customers", document=customer, id=i)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'llm = ChatOpenAI(model_name="gpt-4", temperature=0)\nchain = ElasticsearchDatabaseChain.from_llm(llm=llm, database=db, verbose=True)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'question = "What are the first names of all the customers?"\nchain.run(question)\n')),(0,l.kt)("p",null,"We can customize the prompt."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts.prompt", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.chains.elasticsearch_database.prompts import DEFAULT_DSL_TEMPLATE\nfrom langchain.prompts.prompt import PromptTemplate\n\nPROMPT_TEMPLATE = """Given an input question, create a syntactically correct Elasticsearch query to run. Unless the user specifies in their question a specific number of examples they wish to obtain, always limit your query to at most {top_k} results. You can order the results by a relevant column to return the most interesting examples in the database.\n\nUnless told to do not query for all the columns from a specific index, only ask for a the few relevant columns given the question.\n\nPay attention to use only the column names that you can see in the mapping description. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which index. Return the query as valid json.\n\nUse the following format:\n\nQuestion: Question here\nESQuery: Elasticsearch Query formatted as json\n"""\n\nPROMPT = PromptTemplate.from_template(\n    PROMPT_TEMPLATE,\n)\nchain = ElasticsearchDatabaseChain.from_llm(llm=llm, database=db, query_prompt=PROMPT)\n')))}d.isMDXComponent=!0},83293:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/SQLDatabaseToolkit-e91acbc75814721926cf1bb972f77adb.png"},17336:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/create_sql_query_chain-0801324d1d148cb9c328b5d3b1e497f6.png"},58886:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/sql_usecase-d432701261f05ab69b38576093718cf3.png"},20714:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/sqldbchain_trace-e1234134db2b235e0f96a4424d2ab2a7.png"}}]);