"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1341],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={},s="Improve document indexing with HyDE",i={unversionedId:"use_cases/question_answering/how_to/hyde",id:"use_cases/question_answering/how_to/hyde",title:"Improve document indexing with HyDE",description:"This notebook goes over how to use Hypothetical Document Embeddings (HyDE), as described in this paper.",source:"@site/docs/use_cases/question_answering/how_to/hyde.md",sourceDirName:"use_cases/question_answering/how_to",slug:"/use_cases/question_answering/how_to/hyde",permalink:"/langchain/docs/use_cases/question_answering/how_to/hyde",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Retrieve as you generate with FLARE",permalink:"/langchain/docs/use_cases/question_answering/how_to/flare"},next:{title:"Use local LLMs",permalink:"/langchain/docs/use_cases/question_answering/how_to/local_retrieval_qa"}},l={},p=[{value:"Multiple generations",id:"multiple-generations",level:2},{value:"Using our own prompts",id:"using-our-own-prompts",level:2},{value:"Using HyDE",id:"using-hyde",level:2}],u=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"improve-document-indexing-with-hyde"},"Improve document indexing with HyDE"),(0,o.kt)("p",null,"This notebook goes over how to use Hypothetical Document Embeddings (HyDE), as described in ",(0,o.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2212.10496"},"this paper"),". "),(0,o.kt)("p",null,"At a high level, HyDE is an embedding technique that takes queries, generates a hypothetical answer, and then embeds that generated document and uses that as the final example. "),(0,o.kt)("p",null,"In order to use HyDE, we therefore need to provide a base embedding model, as well as an LLMChain that can be used to generate those documents. By default, the HyDE class comes with some default prompts to use (see the paper for more details on them), but we can also create our own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.llms import OpenAI\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.chains import LLMChain, HypotheticalDocumentEmbedder\nfrom langchain.prompts import PromptTemplate\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"base_embeddings = OpenAIEmbeddings()\nllm = OpenAI()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Load with `web_search` prompt\nembeddings = HypotheticalDocumentEmbedder.from_llm(llm, base_embeddings, "web_search")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Now we can use it as any embedding class!\nresult = embeddings.embed_query("Where is the Taj Mahal?")\n')),(0,o.kt)("h2",{id:"multiple-generations"},"Multiple generations"),(0,o.kt)("p",null,"We can also generate multiple documents and then combine the embeddings for those. By default, we combine those by taking the average. We can do this by changing the LLM we use to generate documents to return multiple things."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"multi_llm = OpenAI(n=4, best_of=4)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = HypotheticalDocumentEmbedder.from_llm(\n    multi_llm, base_embeddings, "web_search"\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'result = embeddings.embed_query("Where is the Taj Mahal?")\n')),(0,o.kt)("h2",{id:"using-our-own-prompts"},"Using our own prompts"),(0,o.kt)("p",null,"Besides using preconfigured prompts, we can also easily construct our own prompts and use those in the LLMChain that is generating the documents. This can be useful if we know the domain our queries will be in, as we can condition the prompt to generate text more similar to that."),(0,o.kt)("p",null,"In the example below, let's condition it to generate text about a state of the union address (because we will use that in the next example)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'prompt_template = """Please answer the user\'s question about the most recent state of the union address\nQuestion: {question}\nAnswer:"""\nprompt = PromptTemplate(input_variables=["question"], template=prompt_template)\nllm_chain = LLMChain(llm=llm, prompt=prompt)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"embeddings = HypotheticalDocumentEmbedder(\n    llm_chain=llm_chain, base_embeddings=base_embeddings\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'result = embeddings.embed_query(\n    "What did the president say about Ketanji Brown Jackson"\n)\n')),(0,o.kt)("h2",{id:"using-hyde"},"Using HyDE"),(0,o.kt)("p",null,"Now that we have HyDE, we can use it as we would any other embedding class! Here is using it to find similar passages in the state of the union example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Chroma\n\nwith open("../../state_of_the_union.txt") as f:\n    state_of_the_union = f.read()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_text(state_of_the_union)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = Chroma.from_texts(texts, embeddings)\n\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(query)\n')),(0,o.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Running Chroma using direct local API.\n    Using DuckDB in-memory for database. Data will be transient.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,o.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    In state after state, new laws have been passed, not only to suppress the vote, but to subvert entire elections. \n    \n    We cannot let this happen. \n    \n    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.\n"))))}h.isMDXComponent=!0}}]);