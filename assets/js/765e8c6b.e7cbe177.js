"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1640],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,g=p["".concat(i,".").concat(m)]||p[m]||h[m]||r;return n?o.createElement(g,l(l({ref:t},u),{},{components:n})):o.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<r;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const r={},l="Custom agent with tool retrieval",s={unversionedId:"modules/agents/how_to/custom_agent_with_tool_retrieval",id:"modules/agents/how_to/custom_agent_with_tool_retrieval",title:"Custom agent with tool retrieval",description:"This notebook builds off of this notebook and assumes familiarity with how agents work.",source:"@site/docs/modules/agents/how_to/custom_agent_with_tool_retrieval.md",sourceDirName:"modules/agents/how_to",slug:"/modules/agents/how_to/custom_agent_with_tool_retrieval",permalink:"/langchain/docs/modules/agents/how_to/custom_agent_with_tool_retrieval",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom agent",permalink:"/langchain/docs/modules/agents/how_to/custom_agent"},next:{title:"Custom LLM agent",permalink:"/langchain/docs/modules/agents/how_to/custom_llm_agent"}},i={},c=[{value:"Set up environment",id:"set-up-environment",level:2},{value:"Set up tools",id:"set-up-tools",level:2},{value:"Tool Retriever",id:"tool-retriever",level:2},{value:"Prompt template",id:"prompt-template",level:2},{value:"Output parser",id:"output-parser",level:2},{value:"Set up LLM, stop sequence, and the agent",id:"set-up-llm-stop-sequence-and-the-agent",level:2},{value:"Use the Agent",id:"use-the-agent",level:2}],u=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const h={toc:c},m="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-agent-with-tool-retrieval"},"Custom agent with tool retrieval"),(0,a.kt)("p",null,"This notebook builds off of ",(0,a.kt)("a",{parentName:"p",href:"/docs/modules/agents/how_to/custom_llm_agent.html"},"this notebook")," and assumes familiarity with how agents work."),(0,a.kt)("p",null,"The novel idea introduced in this notebook is the idea of using retrieval to select the set of tools to use to answer an agent query. This is useful when you have many many tools to select from. You cannot put the description of all the tools in the prompt (because of context length issues) so instead you dynamically select the N tools you do want to consider using at run time."),(0,a.kt)("p",null,"In this notebook we will create a somewhat contrived example. We will have one legitimate tool (search) and then 99 fake tools which are just nonsense. We will then add a step in the prompt template that takes the user input and retrieves tool relevant to the query."),(0,a.kt)("h2",{id:"set-up-environment"},"Set up environment"),(0,a.kt)("p",null,"Do necessary imports, etc."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Custom agent with tool retrieval"}, {"imported": "AgentExecutor", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.AgentExecutor.html", "title": "Custom agent with tool retrieval"}, {"imported": "LLMSingleActionAgent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.LLMSingleActionAgent.html", "title": "Custom agent with tool retrieval"}, {"imported": "AgentOutputParser", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.AgentOutputParser.html", "title": "Custom agent with tool retrieval"}, {"imported": "StringPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.base.StringPromptTemplate.html", "title": "Custom agent with tool retrieval"}, {"imported": "AgentAction", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.agent.AgentAction.html", "title": "Custom agent with tool retrieval"}, {"imported": "AgentFinish", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.agent.AgentFinish.html", "title": "Custom agent with tool retrieval"}]--\x3e\nfrom langchain.agents import (\n    Tool,\n    AgentExecutor,\n    LLMSingleActionAgent,\n    AgentOutputParser,\n)\nfrom langchain.prompts import StringPromptTemplate\nfrom langchain import OpenAI, SerpAPIWrapper, LLMChain\nfrom typing import List, Union\nfrom langchain.schema import AgentAction, AgentFinish\nimport re\n')),(0,a.kt)("h2",{id:"set-up-tools"},"Set up tools"),(0,a.kt)("p",null,"We will create one legitimate tool (search) and then 99 fake tools."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Define which tools the agent can use to answer user queries\nsearch = SerpAPIWrapper()\nsearch_tool = Tool(\n    name="Search",\n    func=search.run,\n    description="useful for when you need to answer questions about current events",\n)\n\n\ndef fake_func(inp: str) -> str:\n    return "foo"\n\n\nfake_tools = [\n    Tool(\n        name=f"foo-{i}",\n        func=fake_func,\n        description=f"a silly function that you can use to get more information about the number {i}",\n    )\n    for i in range(99)\n]\nALL_TOOLS = [search_tool] + fake_tools\n')),(0,a.kt)("h2",{id:"tool-retriever"},"Tool Retriever"),(0,a.kt)("p",null,"We will use a vector store to create embeddings for each tool description. Then, for an incoming query we can create embeddings for that query and do a similarity search for relevant tools."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "FAISS", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.faiss.FAISS.html", "title": "Custom agent with tool retrieval"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Custom agent with tool retrieval"}, {"imported": "Document", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Custom agent with tool retrieval"}]--\x3e\nfrom langchain.vectorstores import FAISS\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.schema import Document\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'docs = [\n    Document(page_content=t.description, metadata={"index": i})\n    for i, t in enumerate(ALL_TOOLS)\n]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"vector_store = FAISS.from_documents(docs, OpenAIEmbeddings())\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'retriever = vector_store.as_retriever()\n\n\ndef get_tools(query):\n    docs = retriever.get_relevant_documents(query)\n    return [ALL_TOOLS[d.metadata["index"]] for d in docs]\n')),(0,a.kt)("p",null,"We can now test this retriever to see if it seems to work."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'get_tools("whats the weather?")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    [Tool(name='Search', description='useful for when you need to answer questions about current events', return_direct=False, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x114b28a90>, func=<bound method SerpAPIWrapper.run of SerpAPIWrapper(search_engine=<class 'serpapi.google_search.GoogleSearch'>, params={'engine': 'google', 'google_domain': 'google.com', 'gl': 'us', 'hl': 'en'}, serpapi_api_key='', aiosession=None)>, coroutine=None),\n     Tool(name='foo-95', description='a silly function that you can use to get more information about the number 95', return_direct=False, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x114b28a90>, func=<function fake_func at 0x15e5bd1f0>, coroutine=None),\n     Tool(name='foo-12', description='a silly function that you can use to get more information about the number 12', return_direct=False, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x114b28a90>, func=<function fake_func at 0x15e5bd1f0>, coroutine=None),\n     Tool(name='foo-15', description='a silly function that you can use to get more information about the number 15', return_direct=False, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x114b28a90>, func=<function fake_func at 0x15e5bd1f0>, coroutine=None)]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'get_tools("whats the number 13?")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    [Tool(name='foo-13', description='a silly function that you can use to get more information about the number 13', return_direct=False, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x114b28a90>, func=<function fake_func at 0x15e5bd1f0>, coroutine=None),\n     Tool(name='foo-12', description='a silly function that you can use to get more information about the number 12', return_direct=False, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x114b28a90>, func=<function fake_func at 0x15e5bd1f0>, coroutine=None),\n     Tool(name='foo-14', description='a silly function that you can use to get more information about the number 14', return_direct=False, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x114b28a90>, func=<function fake_func at 0x15e5bd1f0>, coroutine=None),\n     Tool(name='foo-11', description='a silly function that you can use to get more information about the number 11', return_direct=False, verbose=False, callback_manager=<langchain.callbacks.shared.SharedCallbackManager object at 0x114b28a90>, func=<function fake_func at 0x15e5bd1f0>, coroutine=None)]\n"))),(0,a.kt)("h2",{id:"prompt-template"},"Prompt template"),(0,a.kt)("p",null,"The prompt template is pretty standard, because we're not actually changing that much logic in the actual prompt template, but rather we are just changing how retrieval is done."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Set up the base template\ntemplate = """Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:\n\n{tools}\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take, should be one of [{tool_names}]\nAction Input: the input to the action\nObservation: the result of the action\n... (this Thought/Action/Action Input/Observation can repeat N times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin! Remember to speak as a pirate when giving your final answer. Use lots of "Arg"s\n\nQuestion: {input}\n{agent_scratchpad}"""\n')),(0,a.kt)("p",null,"The custom prompt template now has the concept of a ",(0,a.kt)("inlineCode",{parentName:"p"},"tools_getter"),", which we call on the input to select the tools to use."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from typing import Callable\n\n\n# Set up a prompt template\nclass CustomPromptTemplate(StringPromptTemplate):\n    # The template to use\n    template: str\n    ############## NEW ######################\n    # The list of tools available\n    tools_getter: Callable\n\n    def format(self, **kwargs) -> str:\n        # Get the intermediate steps (AgentAction, Observation tuples)\n        # Format them in a particular way\n        intermediate_steps = kwargs.pop("intermediate_steps")\n        thoughts = ""\n        for action, observation in intermediate_steps:\n            thoughts += action.log\n            thoughts += f"\\nObservation: {observation}\\nThought: "\n        # Set the agent_scratchpad variable to that value\n        kwargs["agent_scratchpad"] = thoughts\n        ############## NEW ######################\n        tools = self.tools_getter(kwargs["input"])\n        # Create a tools variable from the list of tools provided\n        kwargs["tools"] = "\\n".join(\n            [f"{tool.name}: {tool.description}" for tool in tools]\n        )\n        # Create a list of tool names for the tools provided\n        kwargs["tool_names"] = ", ".join([tool.name for tool in tools])\n        return self.template.format(**kwargs)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'prompt = CustomPromptTemplate(\n    template=template,\n    tools_getter=get_tools,\n    # This omits the `agent_scratchpad`, `tools`, and `tool_names` variables because those are generated dynamically\n    # This includes the `intermediate_steps` variable because that is needed\n    input_variables=["input", "intermediate_steps"],\n)\n')),(0,a.kt)("h2",{id:"output-parser"},"Output parser"),(0,a.kt)("p",null,"The output parser is unchanged from the previous notebook, since we are not changing anything about the output format."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class CustomOutputParser(AgentOutputParser):\n    def parse(self, llm_output: str) -> Union[AgentAction, AgentFinish]:\n        # Check if agent should finish\n        if "Final Answer:" in llm_output:\n            return AgentFinish(\n                # Return values is generally always a dictionary with a single `output` key\n                # It is not recommended to try anything else at the moment :)\n                return_values={"output": llm_output.split("Final Answer:")[-1].strip()},\n                log=llm_output,\n            )\n        # Parse out the action and action input\n        regex = r"Action\\s*\\d*\\s*:(.*?)\\nAction\\s*\\d*\\s*Input\\s*\\d*\\s*:[\\s]*(.*)"\n        match = re.search(regex, llm_output, re.DOTALL)\n        if not match:\n            raise ValueError(f"Could not parse LLM output: `{llm_output}`")\n        action = match.group(1).strip()\n        action_input = match.group(2)\n        # Return the action and action input\n        return AgentAction(\n            tool=action, tool_input=action_input.strip(" ").strip(\'"\'), log=llm_output\n        )\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"output_parser = CustomOutputParser()\n")),(0,a.kt)("h2",{id:"set-up-llm-stop-sequence-and-the-agent"},"Set up LLM, stop sequence, and the agent"),(0,a.kt)("p",null,"Also the same as the previous notebook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI(temperature=0)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# LLM chain consisting of the LLM and a prompt\nllm_chain = LLMChain(llm=llm, prompt=prompt)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'tools = get_tools("whats the weather?")\ntool_names = [tool.name for tool in tools]\nagent = LLMSingleActionAgent(\n    llm_chain=llm_chain,\n    output_parser=output_parser,\n    stop=["\\nObservation:"],\n    allowed_tools=tool_names,\n)\n')),(0,a.kt)("h2",{id:"use-the-agent"},"Use the Agent"),(0,a.kt)("p",null,"Now we can use it!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"agent_executor = AgentExecutor.from_agent_and_tools(\n    agent=agent, tools=tools, verbose=True\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("What\'s the weather in SF?")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I need to find out what the weather is in SF\n    Action: Search\n    Action Input: Weather in SF\n    \n    Observation:Mostly cloudy skies early, then partly cloudy in the afternoon. High near 60F. ENE winds shifting to W at 10 to 15 mph. Humidity71%. UV Index6 of 10. I now know the final answer\n    Final Answer: 'Arg, 'tis mostly cloudy skies early, then partly cloudy in the afternoon. High near 60F. ENE winds shiftin' to W at 10 to 15 mph. Humidity71%. UV Index6 of 10.\n    \n    > Finished chain.\n\n\n\n\n\n    \"'Arg, 'tis mostly cloudy skies early, then partly cloudy in the afternoon. High near 60F. ENE winds shiftin' to W at 10 to 15 mph. Humidity71%. UV Index6 of 10.\"\n"))))}g.isMDXComponent=!0}}]);