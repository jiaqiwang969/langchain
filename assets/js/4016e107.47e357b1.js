"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27641],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(t),u=i,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||r;return t?a.createElement(g,l(l({ref:n},c),{},{components:t})):a.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},24139:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const r={},l="Eden AI",o={unversionedId:"integrations/llms/edenai",id:"integrations/llms/edenai",title:"Eden AI",description:"Eden AI is revolutionizing the AI landscape by uniting the best AI providers, empowering users to unlock limitless possibilities and tap into the true potential of artificial intelligence. With an all-in-one comprehensive and hassle-free platform, it allows users to deploy AI features to production lightning fast, enabling effortless access to the full breadth of AI capabilities via a single API. (website//edenai.co/)",source:"@site/docs/integrations/llms/edenai.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/edenai",permalink:"/langchain/docs/integrations/llms/edenai",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"DeepSparse",permalink:"/langchain/docs/integrations/llms/deepsparse"},next:{title:"Fireworks",permalink:"/langchain/docs/integrations/llms/fireworks"}},p={},s=[{value:"Calling a model",id:"calling-a-model",level:2},{value:"text generation",id:"text-generation",level:3},{value:"image generation",id:"image-generation",level:3},{value:"text generation with callback",id:"text-generation-with-callback",level:3},{value:"Chaining Calls",id:"chaining-calls",level:2}],c={toc:s},m="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"eden-ai"},"Eden AI"),(0,i.kt)("p",null,"Eden AI is revolutionizing the AI landscape by uniting the best AI providers, empowering users to unlock limitless possibilities and tap into the true potential of artificial intelligence. With an all-in-one comprehensive and hassle-free platform, it allows users to deploy AI features to production lightning fast, enabling effortless access to the full breadth of AI capabilities via a single API. (website: ",(0,i.kt)("a",{parentName:"p",href:"https://edenai.co/"},"https://edenai.co/"),")"),(0,i.kt)("p",null,"This example goes over how to use LangChain to interact with Eden AI models"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Accessing the EDENAI's API requires an API key, "),(0,i.kt)("p",null,"which you can get by creating an account ",(0,i.kt)("a",{parentName:"p",href:"https://app.edenai.run/user/register"},"https://app.edenai.run/user/register"),"  and heading here ",(0,i.kt)("a",{parentName:"p",href:"https://app.edenai.run/admin/account/settings"},"https://app.edenai.run/admin/account/settings")),(0,i.kt)("p",null,"Once we have a key we'll want to set it as an environment variable by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'export EDENAI_API_KEY="..."\n')),(0,i.kt)("p",null,"If you'd prefer not to set an environment variable you can pass the key in directly via the edenai_api_key named parameter"),(0,i.kt)("p",null," when initiating the EdenAI LLM class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "EdenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.edenai.EdenAI.html", "title": "Eden AI"}]--\x3e\nfrom langchain.llms import EdenAI\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'llm = EdenAI(edenai_api_key="...",provider="openai", temperature=0.2, max_tokens=250)\n')),(0,i.kt)("h2",{id:"calling-a-model"},"Calling a model"),(0,i.kt)("p",null,"The EdenAI API brings together various providers, each offering multiple models."),(0,i.kt)("p",null,"To access a specific model, you can simply add 'model' during instantiation."),(0,i.kt)("p",null,"For instance, let's explore the models provided by OpenAI, such as GPT3.5 "),(0,i.kt)("h3",{id:"text-generation"},"text generation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import PromptTemplate, LLMChain\nllm=EdenAI(feature="text",provider="openai",model="text-davinci-003",temperature=0.2, max_tokens=250)\n\nprompt = """\nUser: Answer the following yes/no question by reasoning step by step. Can a dog drive a car?\nAssistant:\n"""\n\nllm(prompt)\n')),(0,i.kt)("h3",{id:"image-generation"},"image generation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import base64\nfrom io import BytesIO\nfrom PIL import Image\nimport json\ndef print_base64_image(base64_string):\n    # Decode the base64 string into binary data\n    decoded_data = base64.b64decode(base64_string)\n\n    # Create an in-memory stream to read the binary data\n    image_stream = BytesIO(decoded_data)\n\n    # Open the image using PIL\n    image = Image.open(image_stream)\n\n    # Display the image\n    image.show()\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'text2image = EdenAI(\n    feature="image" ,\n    provider= "openai",\n    resolution="512x512"\n)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'image_output = text2image("A cat riding a motorcycle by Picasso")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"print_base64_image(image_output)\n")),(0,i.kt)("h3",{id:"text-generation-with-callback"},"text generation with callback"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "EdenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.edenai.EdenAI.html", "title": "Eden AI"}, {"imported": "StreamingStdOutCallbackHandler", "source": "langchain.callbacks.streaming_stdout", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streaming_stdout.StreamingStdOutCallbackHandler.html", "title": "Eden AI"}]--\x3e\nfrom langchain.llms import EdenAI\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n\nllm = EdenAI(\n    callbacks=[StreamingStdOutCallbackHandler()],\n    feature="text",provider="openai", temperature=0.2,max_tokens=250\n)\nprompt = """\nUser: Answer the following yes/no question by reasoning step by step. Can a dog drive a car?\nAssistant:\n"""\nprint(llm(prompt))\n')),(0,i.kt)("h2",{id:"chaining-calls"},"Chaining Calls"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SimpleSequentialChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.sequential.SimpleSequentialChain.html", "title": "Eden AI"}, {"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Eden AI"}, {"imported": "LLMChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "Eden AI"}]--\x3e\nfrom langchain.chains import SimpleSequentialChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'llm = EdenAI(\nfeature="text", provider="openai", temperature=0.2, max_tokens=250\n)\ntext2image = EdenAI(\nfeature="image", provider="openai", resolution="512x512"\n)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'prompt = PromptTemplate(\n    input_variables=["product"],\n    template="What is a good name for a company that makes {product}?",\n)\n\nchain = LLMChain(llm=llm, prompt=prompt)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'second_prompt = PromptTemplate(\n    input_variables=["company_name"],\n    template="Write a description of a logo for this company: {company_name}, the logo should not contain text at all ",\n)\nchain_two = LLMChain(llm=llm, prompt=second_prompt)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'third_prompt = PromptTemplate(\n    input_variables=["company_logo_description"],\n    template="{company_logo_description}",\n)\nchain_three = LLMChain(llm=text2image, prompt=third_prompt)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Run the chain specifying only the input variable for the first chain.\noverall_chain = SimpleSequentialChain(\n    chains=[chain, chain_two, chain_three],verbose=True\n)\noutput = overall_chain.run("hats")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"#print the image\nprint_base64_image(output)\n")))}d.isMDXComponent=!0}}]);