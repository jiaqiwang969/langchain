"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[32694],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(y,l(l({ref:t},p),{},{components:n})):r.createElement(y,l({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},41411:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},l="LLM Symbolic Math",i={unversionedId:"use_cases/more/code_writing/llm_symbolic_math",id:"use_cases/more/code_writing/llm_symbolic_math",title:"LLM Symbolic Math",description:"This notebook showcases using LLMs and Python to Solve Algebraic Equations. Under the hood is makes use of SymPy.",source:"@site/docs/use_cases/more/code_writing/llm_symbolic_math.md",sourceDirName:"use_cases/more/code_writing",slug:"/use_cases/more/code_writing/llm_symbolic_math",permalink:"/langchain/docs/use_cases/more/code_writing/llm_symbolic_math",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Math chain",permalink:"/langchain/docs/use_cases/more/code_writing/llm_math"},next:{title:"Program-aided language model (PAL) chain",permalink:"/langchain/docs/use_cases/more/code_writing/pal"}},s={},c=[{value:"Integrals and derivates",id:"integrals-and-derivates",level:2},{value:"Solve linear and differential equations",id:"solve-linear-and-differential-equations",level:2}],p=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const u={toc:c},d="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"llm-symbolic-math"},"LLM Symbolic Math"),(0,a.kt)("p",null,"This notebook showcases using LLMs and Python to Solve Algebraic Equations. Under the hood is makes use of ",(0,a.kt)("a",{parentName:"p",href:"https://www.sympy.org/en/index.html"},"SymPy"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.llms import OpenAI\nfrom langchain.chains.llm_symbolic_math.base import LLMSymbolicMathChain\n\nllm = OpenAI(temperature=0)\nllm_symbolic_math = LLMSymbolicMathChain.from_llm(llm)\n")),(0,a.kt)("h2",{id:"integrals-and-derivates"},"Integrals and derivates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm_symbolic_math.run("What is the derivative of sin(x)*exp(x) with respect to x?")\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    'Answer: exp(x)*sin(x) + exp(x)*cos(x)'\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm_symbolic_math.run(\n    "What is the integral of exp(x)*sin(x) + exp(x)*cos(x) with respect to x?"\n)\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    'Answer: exp(x)*sin(x)'\n"))),(0,a.kt)("h2",{id:"solve-linear-and-differential-equations"},"Solve linear and differential equations"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"llm_symbolic_math.run('Solve the differential equation y\" - y = e^t')\n")),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    'Answer: Eq(y(t), C2*exp(-t) + (C1 + t/2)*exp(t))'\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm_symbolic_math.run("What are the solutions to this equation y^3 + 1/3y?")\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    'Answer: {0, -sqrt(3)*I/3, sqrt(3)*I/3}'\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm_symbolic_math.run("x = y + 5, y = z - 3, z = x * y. Solve for x, y, z")\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    'Answer: (3 - sqrt(7), -sqrt(7) - 2, 1 - sqrt(7)), (sqrt(7) + 3, -2 + sqrt(7), 1 + sqrt(7))'\n"))))}y.isMDXComponent=!0}}]);