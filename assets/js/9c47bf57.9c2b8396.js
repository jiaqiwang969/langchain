"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[99885],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),g=a,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||i;return n?o.createElement(m,r(r({ref:t},c),{},{components:n})):o.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},17482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const i={},r="Gradio",s={unversionedId:"integrations/tools/gradio_tools",id:"integrations/tools/gradio_tools",title:"Gradio",description:"There are many 1000s of Gradio apps on Hugging Face Spaces. This library puts them at the tips of your LLM's fingers \ud83e\uddbe",source:"@site/docs/integrations/tools/gradio_tools.md",sourceDirName:"integrations/tools",slug:"/integrations/tools/gradio_tools",permalink:"/langchain/docs/integrations/tools/gradio_tools",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Google Serper",permalink:"/langchain/docs/integrations/tools/google_serper"},next:{title:"GraphQL",permalink:"/langchain/docs/integrations/tools/graphql"}},l={},p=[{value:"Using a tool",id:"using-a-tool",level:2},{value:"Using within an agent",id:"using-within-an-agent",level:2}],c=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const d={toc:p},g="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gradio"},"Gradio"),(0,a.kt)("p",null,"There are many 1000s of ",(0,a.kt)("inlineCode",{parentName:"p"},"Gradio")," apps on ",(0,a.kt)("inlineCode",{parentName:"p"},"Hugging Face Spaces"),". This library puts them at the tips of your LLM's fingers \ud83e\uddbe"),(0,a.kt)("p",null,"Specifically, ",(0,a.kt)("inlineCode",{parentName:"p"},"gradio-tools")," is a Python library for converting ",(0,a.kt)("inlineCode",{parentName:"p"},"Gradio")," apps into tools that can be leveraged by a large language model (LLM)-based agent to complete its task. For example, an LLM could use a ",(0,a.kt)("inlineCode",{parentName:"p"},"Gradio")," tool to transcribe a voice recording it finds online and then summarize it for you. Or it could use a different ",(0,a.kt)("inlineCode",{parentName:"p"},"Gradio")," tool to apply OCR to a document on your Google Drive and then answer questions about it."),(0,a.kt)("p",null,"It's very easy to create you own tool if you want to use a space that's not one of the pre-built tools. Please see this section of the gradio-tools documentation for information on how to do that. All contributions are welcome!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# !pip install gradio_tools\n")),(0,a.kt)("h2",{id:"using-a-tool"},"Using a tool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from gradio_tools.tools import StableDiffusionTool\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'local_file_path = StableDiffusionTool().langchain.run(\n    "Please create a photo of a dog riding a skateboard"\n)\nlocal_file_path\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Loaded as API: https://gradio-client-demos-stable-diffusion.hf.space \u2714\n    \n    Job Status: Status.STARTING eta: None\n\n\n\n\n\n    '/Users/harrisonchase/workplace/langchain/docs/modules/agents/tools/integrations/b61c1dd9-47e2-46f1-a47c-20d27640993d/tmp4ap48vnm.jpg'\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from PIL import Image\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"im = Image.open(local_file_path)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"display(im)\n")),(0,a.kt)("h2",{id:"using-within-an-agent"},"Using within an agent"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Gradio"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Gradio"}, {"imported": "ConversationBufferMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.buffer.ConversationBufferMemory.html", "title": "Gradio"}]--\x3e\nfrom langchain.agents import initialize_agent\nfrom langchain.llms import OpenAI\nfrom gradio_tools.tools import (\n    StableDiffusionTool,\n    ImageCaptioningTool,\n    StableDiffusionPromptGeneratorTool,\n    TextToVideoTool,\n)\n\nfrom langchain.memory import ConversationBufferMemory\n\nllm = OpenAI(temperature=0)\nmemory = ConversationBufferMemory(memory_key="chat_history")\ntools = [\n    StableDiffusionTool().langchain,\n    ImageCaptioningTool().langchain,\n    StableDiffusionPromptGeneratorTool().langchain,\n    TextToVideoTool().langchain,\n]\n\n\nagent = initialize_agent(\n    tools, llm, memory=memory, agent="conversational-react-description", verbose=True\n)\noutput = agent.run(\n    input=(\n        "Please create a photo of a dog riding a skateboard "\n        "but improve my prompt prior to using an image generator."\n        "Please caption the generated image and create a video for it using the improved prompt."\n    )\n)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Loaded as API: https://gradio-client-demos-stable-diffusion.hf.space \u2714\n    Loaded as API: https://taesiri-blip-2.hf.space \u2714\n    Loaded as API: https://microsoft-promptist.hf.space \u2714\n    Loaded as API: https://damo-vilab-modelscope-text-to-video-synthesis.hf.space \u2714\n    \n    \n    > Entering new AgentExecutor chain...\n    \n    Thought: Do I need to use a tool? Yes\n    Action: StableDiffusionPromptGenerator\n    Action Input: A dog riding a skateboard\n    Job Status: Status.STARTING eta: None\n    \n    Observation: A dog riding a skateboard, digital painting, artstation, concept art, smooth, sharp focus, illustration, art by artgerm and greg rutkowski and alphonse mucha\n    Thought: Do I need to use a tool? Yes\n    Action: StableDiffusion\n    Action Input: A dog riding a skateboard, digital painting, artstation, concept art, smooth, sharp focus, illustration, art by artgerm and greg rutkowski and alphonse mucha\n    Job Status: Status.STARTING eta: None\n    \n    Job Status: Status.PROCESSING eta: None\n    \n    Observation: /Users/harrisonchase/workplace/langchain/docs/modules/agents/tools/integrations/2e280ce4-4974-4420-8680-450825c31601/tmpfmiz2g1c.jpg\n    Thought: Do I need to use a tool? Yes\n    Action: ImageCaptioner\n    Action Input: /Users/harrisonchase/workplace/langchain/docs/modules/agents/tools/integrations/2e280ce4-4974-4420-8680-450825c31601/tmpfmiz2g1c.jpg\n    Job Status: Status.STARTING eta: None\n    \n    Observation: a painting of a dog sitting on a skateboard\n    Thought: Do I need to use a tool? Yes\n    Action: TextToVideo\n    Action Input: a painting of a dog sitting on a skateboard\n    Job Status: Status.STARTING eta: None\n    Due to heavy traffic on this app, the prediction will take approximately 73 seconds.For faster predictions without waiting in queue, you may duplicate the space using: Client.duplicate(damo-vilab/modelscope-text-to-video-synthesis)\n    \n    Job Status: Status.IN_QUEUE eta: 73.89824726581574\n    Due to heavy traffic on this app, the prediction will take approximately 42 seconds.For faster predictions without waiting in queue, you may duplicate the space using: Client.duplicate(damo-vilab/modelscope-text-to-video-synthesis)\n    \n    Job Status: Status.IN_QUEUE eta: 42.49370198879602\n    \n    Job Status: Status.IN_QUEUE eta: 21.314297944849187\n    \n    Observation: /var/folders/bm/ylzhm36n075cslb9fvvbgq640000gn/T/tmp5snj_nmzf20_cb3m.mp4\n    Thought: Do I need to use a tool? No\n    AI: Here is a video of a painting of a dog sitting on a skateboard.\n    \n    > Finished chain.\n"))))}m.isMDXComponent=!0}}]);