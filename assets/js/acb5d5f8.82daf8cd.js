"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[28772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=l,g=u["".concat(s,".").concat(h)]||u[h]||c[h]||o;return n?a.createElement(g,r(r({ref:t},m),{},{components:n})):a.createElement(g,r({ref:t},m))}));function g(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},65559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const o={},r="Llama.cpp",i={unversionedId:"integrations/llms/llamacpp",id:"integrations/llms/llamacpp",title:"Llama.cpp",description:"llama-cpp-python is a Python binding for llama.cpp.",source:"@site/docs/integrations/llms/llamacpp.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/llamacpp",permalink:"/langchain/docs/integrations/llms/llamacpp",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"KoboldAI API",permalink:"/langchain/docs/integrations/llms/koboldai"},next:{title:"LLM Caching integrations",permalink:"/langchain/docs/integrations/llms/llm_caching"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"CPU only installation",id:"cpu-only-installation",level:3},{value:"Installation with OpenBLAS / cuBLAS / CLBlast",id:"installation-with-openblas--cublas--clblast",level:3},{value:"Installation with Metal",id:"installation-with-metal",level:3},{value:"Installation with Windows",id:"installation-with-windows",level:3},{value:"Compiling and installing",id:"compiling-and-installing",level:4},{value:"Usage",id:"usage",level:2},{value:"CPU",id:"cpu",level:3},{value:"GPU",id:"gpu",level:3},{value:"Metal",id:"metal",level:3},{value:"Grammars",id:"grammars",level:3}],m=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var u;const c={toc:p},h="wrapper";function g(e){let{components:t,...n}=e;return(0,l.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"llamacpp"},"Llama.cpp"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/abetlen/llama-cpp-python"},"llama-cpp-python")," is a Python binding for ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ggerganov/llama.cpp"},"llama.cpp"),". "),(0,l.kt)("p",null,"It supports inference for ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ggerganov/llama.cpp"},"many LLMs"),", which can be accessed on ",(0,l.kt)("a",{parentName:"p",href:"https://huggingface.co/TheBloke"},"HuggingFace"),"."),(0,l.kt)("p",null,"This notebook goes over how to run ",(0,l.kt)("inlineCode",{parentName:"p"},"llama-cpp-python")," within LangChain."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note: new versions of ",(0,l.kt)("inlineCode",{parentName:"strong"},"llama-cpp-python")," use GGUF model files (see ",(0,l.kt)("a",{parentName:"strong",href:"https://github.com/abetlen/llama-cpp-python/pull/633"},"here"),").")),(0,l.kt)("p",null,"This is a breaking change."),(0,l.kt)("p",null,"To convert existing GGML models to GGUF you can run the following in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ggerganov/llama.cpp"},"llama.cpp"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python ./convert-llama-ggmlv3-to-gguf.py --eps 1e-5 --input models/openorca-platypus2-13b.ggmlv3.q4_0.bin --output models/openorca-platypus2-13b.gguf.q4_0.bin\n")),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"There are different options on how to install the llama-cpp package: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"CPU usage"),(0,l.kt)("li",{parentName:"ul"},"CPU + GPU (using one of many BLAS backends)"),(0,l.kt)("li",{parentName:"ul"},"Metal GPU (MacOS with Apple Silicon Chip) ")),(0,l.kt)("h3",{id:"cpu-only-installation"},"CPU only installation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install llama-cpp-python\n")),(0,l.kt)("h3",{id:"installation-with-openblas--cublas--clblast"},"Installation with OpenBLAS / cuBLAS / CLBlast"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"lama.cpp")," supports multiple BLAS backends for faster processing. Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"FORCE_CMAKE=1")," environment variable to force the use of cmake and install the pip package for the desired BLAS backend (",(0,l.kt)("a",{parentName:"p",href:"https://github.com/abetlen/llama-cpp-python#installation-with-openblas--cublas--clblast"},"source"),")."),(0,l.kt)("p",null,"Example installation with cuBLAS backend:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'CMAKE_ARGS="-DLLAMA_CUBLAS=on" FORCE_CMAKE=1 pip install llama-cpp-python\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"IMPORTANT"),": If you have already installed the CPU only version of the package, you need to reinstall it from scratch. Consider the following command: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'CMAKE_ARGS="-DLLAMA_CUBLAS=on" FORCE_CMAKE=1 pip install --upgrade --force-reinstall llama-cpp-python --no-cache-dir\n')),(0,l.kt)("h3",{id:"installation-with-metal"},"Installation with Metal"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"llama.cpp")," supports Apple silicon first-class citizen - optimized via ARM NEON, Accelerate and Metal frameworks. Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"FORCE_CMAKE=1")," environment variable to force the use of cmake and install the pip package for the Metal support (",(0,l.kt)("a",{parentName:"p",href:"https://github.com/abetlen/llama-cpp-python/blob/main/docs/install/macos.md"},"source"),")."),(0,l.kt)("p",null,"Example installation with Metal Support:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'CMAKE_ARGS="-DLLAMA_METAL=on" FORCE_CMAKE=1 pip install llama-cpp-python\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"IMPORTANT"),": If you have already installed a cpu only version of the package, you need to reinstall it from scratch: consider the following command: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'CMAKE_ARGS="-DLLAMA_METAL=on" FORCE_CMAKE=1 pip install --upgrade --force-reinstall llama-cpp-python --no-cache-dir\n')),(0,l.kt)("h3",{id:"installation-with-windows"},"Installation with Windows"),(0,l.kt)("p",null,"It is stable to install the ",(0,l.kt)("inlineCode",{parentName:"p"},"llama-cpp-python")," library by compiling from the source. You can follow most of the instructions in the repository itself but there are some windows specific instructions which might be useful."),(0,l.kt)("p",null,"Requirements to install the ",(0,l.kt)("inlineCode",{parentName:"p"},"llama-cpp-python"),","),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"git"),(0,l.kt)("li",{parentName:"ul"},"python"),(0,l.kt)("li",{parentName:"ul"},"cmake"),(0,l.kt)("li",{parentName:"ul"},"Visual Studio Community (make sure you install this with the following settings)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Desktop development with C++"),(0,l.kt)("li",{parentName:"ul"},"Python development"),(0,l.kt)("li",{parentName:"ul"},"Linux embedded development with C++")))),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Clone git repository recursively to get ",(0,l.kt)("inlineCode",{parentName:"li"},"llama.cpp")," submodule as well ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"git clone --recursive -j8 https://github.com/abetlen/llama-cpp-python.git\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Open up command Prompt (or anaconda prompt if you have it installed), set up environment variables to install. Follow this if you do not have a GPU, you must set both of the following variables.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"set FORCE_CMAKE=1\nset CMAKE_ARGS=-DLLAMA_CUBLAS=OFF\n")),(0,l.kt)("p",null,"You can ignore the second environment variable if you have an NVIDIA GPU."),(0,l.kt)("h4",{id:"compiling-and-installing"},"Compiling and installing"),(0,l.kt)("p",null,"In the same command prompt (anaconda prompt) you set the variables, you can ",(0,l.kt)("inlineCode",{parentName:"p"},"cd")," into ",(0,l.kt)("inlineCode",{parentName:"p"},"llama-cpp-python")," directory and run the following commands."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"python setup.py clean\npython setup.py install\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Make sure you are following all instructions to ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ggerganov/llama.cpp"},"install all necessary model files"),"."),(0,l.kt)("p",null,"You don't need an ",(0,l.kt)("inlineCode",{parentName:"p"},"API_TOKEN")," as you will run the LLM locally."),(0,l.kt)("p",null,"It is worth understanding which models are suitable to be used on the desired machine."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "LlamaCpp", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.llamacpp.LlamaCpp.html", "title": "Llama.cpp"}, {"imported": "CallbackManager", "source": "langchain.callbacks.manager", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.CallbackManager.html", "title": "Llama.cpp"}, {"imported": "StreamingStdOutCallbackHandler", "source": "langchain.callbacks.streaming_stdout", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streaming_stdout.StreamingStdOutCallbackHandler.html", "title": "Llama.cpp"}]--\x3e\nfrom langchain.llms import LlamaCpp\nfrom langchain import PromptTemplate, LLMChain\nfrom langchain.callbacks.manager import CallbackManager\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Consider using a template that suits your model! Check the models page on HuggingFace etc. to get a correct prompting template.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'template = """Question: {question}\n\nAnswer: Let\'s work this out in a step by step way to be sure we have the right answer."""\n\nprompt = PromptTemplate(template=template, input_variables=["question"])\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Callbacks support token-wise streaming\ncallback_manager = CallbackManager([StreamingStdOutCallbackHandler()])\n")),(0,l.kt)("h3",{id:"cpu"},"CPU"),(0,l.kt)("p",null,"Example using a LLaMA 2 7B model"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path="/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin",\n    temperature=0.75,\n    max_tokens=2000,\n    top_p=1,\n    callback_manager=callback_manager, \n    verbose=True, # Verbose is required to pass to the callback manager\n)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'prompt = """\nQuestion: A rap battle between Stephen Colbert and John Oliver\n"""\nllm(prompt)\n')),(0,l.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    Stephen Colbert:\n    Yo, John, I heard you've been talkin' smack about me on your show.\n    Let me tell you somethin', pal, I'm the king of late-night TV\n    My satire is sharp as a razor, it cuts deeper than a knife\n    While you're just a british bloke tryin' to be funny with your accent and your wit.\n    John Oliver:\n    Oh Stephen, don't be ridiculous, you may have the ratings but I got the real talk.\n    My show is the one that people actually watch and listen to, not just for the laughs but for the facts.\n    While you're busy talkin' trash, I'm out here bringing the truth to light.\n    Stephen Colbert:\n    Truth? Ha! You think your show is about truth? Please, it's all just a joke to you.\n    You're just a fancy-pants british guy tryin' to be funny with your news and your jokes.\n    While I'm the one who's really makin' a difference, with my sat\n\n    \n    llama_print_timings:        load time =   358.60 ms\n    llama_print_timings:      sample time =   172.55 ms /   256 runs   (    0.67 ms per token,  1483.59 tokens per second)\n    llama_print_timings: prompt eval time =   613.36 ms /    16 tokens (   38.33 ms per token,    26.09 tokens per second)\n    llama_print_timings:        eval time = 10151.17 ms /   255 runs   (   39.81 ms per token,    25.12 tokens per second)\n    llama_print_timings:       total time = 11332.41 ms\n\n\n\n\n\n    \"\\nStephen Colbert:\\nYo, John, I heard you've been talkin' smack about me on your show.\\nLet me tell you somethin', pal, I'm the king of late-night TV\\nMy satire is sharp as a razor, it cuts deeper than a knife\\nWhile you're just a british bloke tryin' to be funny with your accent and your wit.\\nJohn Oliver:\\nOh Stephen, don't be ridiculous, you may have the ratings but I got the real talk.\\nMy show is the one that people actually watch and listen to, not just for the laughs but for the facts.\\nWhile you're busy talkin' trash, I'm out here bringing the truth to light.\\nStephen Colbert:\\nTruth? Ha! You think your show is about truth? Please, it's all just a joke to you.\\nYou're just a fancy-pants british guy tryin' to be funny with your news and your jokes.\\nWhile I'm the one who's really makin' a difference, with my sat\"\n"))),(0,l.kt)("p",null,"Example using a LLaMA v1 model"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path="./ggml-model-q4_0.bin", callback_manager=callback_manager, verbose=True\n)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"llm_chain = LLMChain(prompt=prompt, llm=llm)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'question = "What NFL team won the Super Bowl in the year Justin Bieber was born?"\nllm_chain.run(question)\n')),(0,l.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    \n    1. First, find out when Justin Bieber was born.\n    2. We know that Justin Bieber was born on March 1, 1994.\n    3. Next, we need to look up when the Super Bowl was played in that year.\n    4. The Super Bowl was played on January 28, 1995.\n    5. Finally, we can use this information to answer the question. The NFL team that won the Super Bowl in the year Justin Bieber was born is the San Francisco 49ers.\n\n    \n    llama_print_timings:        load time =   434.15 ms\n    llama_print_timings:      sample time =    41.81 ms /   121 runs   (    0.35 ms per token)\n    llama_print_timings: prompt eval time =  2523.78 ms /    48 tokens (   52.58 ms per token)\n    llama_print_timings:        eval time = 23971.57 ms /   121 runs   (  198.11 ms per token)\n    llama_print_timings:       total time = 28945.95 ms\n\n\n\n\n\n    '\\n\\n1. First, find out when Justin Bieber was born.\\n2. We know that Justin Bieber was born on March 1, 1994.\\n3. Next, we need to look up when the Super Bowl was played in that year.\\n4. The Super Bowl was played on January 28, 1995.\\n5. Finally, we can use this information to answer the question. The NFL team that won the Super Bowl in the year Justin Bieber was born is the San Francisco 49ers.'\n"))),(0,l.kt)("h3",{id:"gpu"},"GPU"),(0,l.kt)("p",null,"If the installation with BLAS backend was correct, you will see a ",(0,l.kt)("inlineCode",{parentName:"p"},"BLAS = 1")," indicator in model properties."),(0,l.kt)("p",null,"Two of the most important parameters for use with GPU are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"n_gpu_layers")," - determines how many layers of the model are offloaded to your GPU."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"n_batch")," - how many tokens are processed in parallel. ")),(0,l.kt)("p",null,"Setting these parameters correctly will dramatically improve the evaluation speed (see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mmagnesium/langchain/blob/master/langchain/llms/llamacpp.py"},"wrapper code")," for more details)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'n_gpu_layers = 40  # Change this value based on your model and your GPU VRAM pool.\nn_batch = 512  # Should be between 1 and n_ctx, consider the amount of VRAM in your GPU.\n\n# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path="/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin",\n    n_gpu_layers=n_gpu_layers,\n    n_batch=n_batch,\n    callback_manager=callback_manager,\n    verbose=True, # Verbose is required to pass to the callback manager\n)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'llm_chain = LLMChain(prompt=prompt, llm=llm)\nquestion = "What NFL team won the Super Bowl in the year Justin Bieber was born?"\nllm_chain.run(question)\n')),(0,l.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    \n    1. Identify Justin Bieber's birth date: Justin Bieber was born on March 1, 1994.\n    \n    2. Find the Super Bowl winner of that year: The NFL season of 1993 with the Super Bowl being played in January or of 1994.\n    \n    3. Determine which team won the game: The Dallas Cowboys faced the Buffalo Bills in Super Bowl XXVII on January 31, 1993 (as the year is mis-labelled due to a error). The Dallas Cowboys won this matchup.\n    \n    So, Justin Bieber was born when the Dallas Cowboys were the reigning NFL Super Bowl.\n\n    \n    llama_print_timings:        load time =   427.63 ms\n    llama_print_timings:      sample time =   115.85 ms /   164 runs   (    0.71 ms per token,  1415.67 tokens per second)\n    llama_print_timings: prompt eval time =   427.53 ms /    45 tokens (    9.50 ms per token,   105.26 tokens per second)\n    llama_print_timings:        eval time =  4526.53 ms /   163 runs   (   27.77 ms per token,    36.01 tokens per second)\n    llama_print_timings:       total time =  5293.77 ms\n\n\n\n\n\n    \"\\n\\n1. Identify Justin Bieber's birth date: Justin Bieber was born on March 1, 1994.\\n\\n2. Find the Super Bowl winner of that year: The NFL season of 1993 with the Super Bowl being played in January or of 1994.\\n\\n3. Determine which team won the game: The Dallas Cowboys faced the Buffalo Bills in Super Bowl XXVII on January 31, 1993 (as the year is mis-labelled due to a error). The Dallas Cowboys won this matchup.\\n\\nSo, Justin Bieber was born when the Dallas Cowboys were the reigning NFL Super Bowl.\"\n"))),(0,l.kt)("h3",{id:"metal"},"Metal"),(0,l.kt)("p",null,"If the installation with Metal was correct, you will see a ",(0,l.kt)("inlineCode",{parentName:"p"},"NEON = 1")," indicator in model properties."),(0,l.kt)("p",null,"Two of the most important GPU parameters are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"n_gpu_layers")," - determines how many layers of the model are offloaded to your Metal GPU, in the most case, set it to ",(0,l.kt)("inlineCode",{parentName:"li"},"1")," is enough for Metal"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"n_batch")," - how many tokens are processed in parallel, default is 8, set to bigger number."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"f16_kv")," - for some reason, Metal only support ",(0,l.kt)("inlineCode",{parentName:"li"},"True"),", otherwise you will get error such as ",(0,l.kt)("inlineCode",{parentName:"li"},'Asserting on type 0\nGGML_ASSERT: .../ggml-metal.m:706: false && "not implemented"'))),(0,l.kt)("p",null,"Setting these parameters correctly will dramatically improve the evaluation speed (see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mmagnesium/langchain/blob/master/langchain/llms/llamacpp.py"},"wrapper code")," for more details)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'n_gpu_layers = 1  # Metal set to 1 is enough.\nn_batch = 512  # Should be between 1 and n_ctx, consider the amount of RAM of your Apple Silicon Chip.\n# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path="/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin",\n    n_gpu_layers=n_gpu_layers,\n    n_batch=n_batch,\n    f16_kv=True,  # MUST set to True, otherwise you will run into problem after a couple of calls\n    callback_manager=callback_manager,\n    verbose=True, # Verbose is required to pass to the callback manager\n)\n')),(0,l.kt)("p",null,"The console log will show the following log to indicate Metal was enable properly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ggml_metal_init: allocating\nggml_metal_init: using MPS\n...\n")),(0,l.kt)("p",null,"You also could check ",(0,l.kt)("inlineCode",{parentName:"p"},"Activity Monitor")," by watching the GPU usage of the process, the CPU usage will drop dramatically after turn on ",(0,l.kt)("inlineCode",{parentName:"p"},"n_gpu_layers=1"),". "),(0,l.kt)("p",null,"For the first call to the LLM, the performance may be slow due to the model compilation in Metal GPU."),(0,l.kt)("h3",{id:"grammars"},"Grammars"),(0,l.kt)("p",null,"We can specify ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ggerganov/llama.cpp/blob/master/grammars/README.md"},"grammars")," to constrain model outputs."),(0,l.kt)("p",null,"This will sample tokens according to the grammar."),(0,l.kt)("p",null,"For example, supply the path to the specifed ",(0,l.kt)("inlineCode",{parentName:"p"},"json.gbnf")," file in order to produce JSON."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'n_gpu_layers = 1  # Metal set to 1 is enough.\nn_batch = 512  # Should be between 1 and n_ctx, consider the amount of RAM of your Apple Silicon Chip.\n# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path="/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin",\n    n_gpu_layers=n_gpu_layers,\n    n_batch=n_batch,\n    f16_kv=True,  # MUST set to True, otherwise you will run into problem after a couple of calls\n    callback_manager=callback_manager,\n    verbose=True, # Verbose is required to pass to the callback manager\n    grammar_path="/Users/rlm/Desktop/Code/langchain-main/langchain/libs/langchain/langchain/llms/grammars/json.gbnf",\n)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'result=llm("Describe a person in JSON format:")\n')),(0,l.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'    {\n      "name": "John Doe",\n      "age": 34,\n      "": {\n        "title": "Software Developer",\n        "company": "Google"\n      },\n      "interests": [\n        "Sports",\n        "Music",\n        "Cooking"\n      ],\n      "address": {\n        "street_number": 123,\n        "street_name": "Oak Street",\n        "city": "Mountain View",\n        "state": "California",\n        "postal_code": 94040\n      }}\n\n    \n    llama_print_timings:        load time =   357.51 ms\n    llama_print_timings:      sample time =  1213.30 ms /   144 runs   (    8.43 ms per token,   118.68 tokens per second)\n    llama_print_timings: prompt eval time =   356.78 ms /     9 tokens (   39.64 ms per token,    25.23 tokens per second)\n    llama_print_timings:        eval time =  3947.16 ms /   143 runs   (   27.60 ms per token,    36.23 tokens per second)\n    llama_print_timings:       total time =  5846.21 ms\n'))),(0,l.kt)("p",null,"We can also supply ",(0,l.kt)("inlineCode",{parentName:"p"},"list.gbnf")," to return a list."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'n_gpu_layers = 1 \nn_batch = 512\nllm = LlamaCpp(\n    model_path="/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin",\n    n_gpu_layers=n_gpu_layers,\n    n_batch=n_batch,\n    f16_kv=True,  # MUST set to True, otherwise you will run into problem after a couple of calls\n    callback_manager=callback_manager,\n    verbose=True,\n    grammar_path="/Users/rlm/Desktop/Code/langchain-main/langchain/libs/langchain/langchain/llms/grammars/list.gbnf",\n)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'result=llm("List of top-3 my favourite books:")\n')),(0,l.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'    ["The Catcher in the Rye", "Wuthering Heights", "Anna Karenina"]\n\n\n    \n    llama_print_timings:        load time =   322.34 ms\n    llama_print_timings:      sample time =   232.60 ms /    26 runs   (    8.95 ms per token,   111.78 tokens per second)\n    llama_print_timings: prompt eval time =   321.90 ms /    11 tokens (   29.26 ms per token,    34.17 tokens per second)\n    llama_print_timings:        eval time =   680.82 ms /    25 runs   (   27.23 ms per token,    36.72 tokens per second)\n    llama_print_timings:       total time =  1295.27 ms\n'))))}g.isMDXComponent=!0}}]);