"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1628],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>h});var n=a(67294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var s=n.createContext({}),c=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=c(t.components);return n.createElement(s.Provider,{value:e},t.children)},m="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,s=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),m=c(a),u=l,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||r;return a?n.createElement(h,i(i({ref:e},p),{},{components:a})):n.createElement(h,i({ref:e},p))}));function h(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=u;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[m]="string"==typeof t?t:l,i[1]=o;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},89929:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(87462),l=(a(67294),a(3905));const r={},i="Streamlit",o={unversionedId:"integrations/callbacks/streamlit",id:"integrations/callbacks/streamlit",title:"Streamlit",description:"Streamlit is a faster way to build and share data apps.",source:"@site/docs/integrations/callbacks/streamlit.md",sourceDirName:"integrations/callbacks",slug:"/integrations/callbacks/streamlit",permalink:"/langchain/docs/integrations/callbacks/streamlit",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"PromptLayer",permalink:"/langchain/docs/integrations/callbacks/promptlayer"},next:{title:"Chat models",permalink:"/langchain/docs/integrations/chat/"}},s={},c=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Display thoughts and actions",id:"display-thoughts-and-actions",level:2},{value:"Scenario 1: Using an Agent with Tools",id:"scenario-1-using-an-agent-with-tools",level:3},{value:"Additional scenarios",id:"additional-scenarios",level:3}],p={toc:c},m="wrapper";function d(t){let{components:e,...a}=t;return(0,l.kt)(m,(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"streamlit"},"Streamlit"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"https://streamlit.io/"},"Streamlit")," is a faster way to build and share data apps."),"\nStreamlit turns data scripts into shareable web apps in minutes. All in pure Python. No front\u2011end experience required.\nSee more examples at ",(0,l.kt)("a",{parentName:"p",href:"https://streamlit.io/generative-ai"},"streamlit.io/generative-ai"),".")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://codespaces.new/langchain-ai/streamlit-agent?quickstart=1"},(0,l.kt)("img",{parentName:"a",src:"https://github.com/codespaces/badge.svg",alt:"Open in GitHub Codespaces"}))),(0,l.kt)("p",null,"In this guide we will demonstrate how to use ",(0,l.kt)("inlineCode",{parentName:"p"},"StreamlitCallbackHandler")," to display the thoughts and actions of an agent in an\ninteractive Streamlit app. Try it out with the running app below using the ",(0,l.kt)("a",{parentName:"p",href:"/docs/modules/agents/how_to/mrkl/"},"MRKL agent"),":"),(0,l.kt)("iframe",{loading:"lazy",src:"https://langchain-mrkl.streamlit.app/?embed=true&embed_options=light_theme",style:{width:"100%",border:"none",marginBottom:"1rem",height:600},allow:"camera;clipboard-read;clipboard-write;"}),(0,l.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install langchain streamlit\n")),(0,l.kt)("p",null,"You can run ",(0,l.kt)("inlineCode",{parentName:"p"},"streamlit hello")," to load a sample app and validate your install succeeded. See full instructions in Streamlit's\n",(0,l.kt)("a",{parentName:"p",href:"https://docs.streamlit.io/library/get-started"},"Getting started documentation"),"."),(0,l.kt)("h2",{id:"display-thoughts-and-actions"},"Display thoughts and actions"),(0,l.kt)("p",null,"To create a ",(0,l.kt)("inlineCode",{parentName:"p"},"StreamlitCallbackHandler"),", you just need to provide a parent container to render the output."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "StreamlitCallbackHandler", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streamlit.StreamlitCallbackHandler.html", "title": "Streamlit"}]--\x3e\nfrom langchain.callbacks import StreamlitCallbackHandler\nimport streamlit as st\n\nst_callback = StreamlitCallbackHandler(st.container())\n')),(0,l.kt)("p",null,"Additional keyword arguments to customize the display behavior are described in the\n",(0,l.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streamlit.streamlit_callback_handler.StreamlitCallbackHandler.html"},"API reference"),"."),(0,l.kt)("h3",{id:"scenario-1-using-an-agent-with-tools"},"Scenario 1: Using an Agent with Tools"),(0,l.kt)("p",null,"The primary supported use case today is visualizing the actions of an Agent with Tools (or Agent Executor). You can create an\nagent in your Streamlit app and simply pass the ",(0,l.kt)("inlineCode",{parentName:"p"},"StreamlitCallbackHandler")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"agent.run()")," in order to visualize the\nthoughts and actions live in your app."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Streamlit"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Streamlit"}, {"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Streamlit"}, {"imported": "load_tools", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.load_tools.load_tools.html", "title": "Streamlit"}, {"imported": "StreamlitCallbackHandler", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streamlit.StreamlitCallbackHandler.html", "title": "Streamlit"}]--\x3e\nfrom langchain.llms import OpenAI\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.callbacks import StreamlitCallbackHandler\nimport streamlit as st\n\nllm = OpenAI(temperature=0, streaming=True)\ntools = load_tools(["ddg-search"])\nagent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n\nif prompt := st.chat_input():\n    st.chat_message("user").write(prompt)\n    with st.chat_message("assistant"):\n        st_callback = StreamlitCallbackHandler(st.container())\n        response = agent.run(prompt, callbacks=[st_callback])\n        st.write(response)\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")," You will need to set ",(0,l.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," for the above app code to run successfully.\nThe easiest way to do this is via ",(0,l.kt)("a",{parentName:"p",href:"https://docs.streamlit.io/library/advanced-features/secrets-management"},"Streamlit secrets.toml"),",\nor any other local ENV management tool."),(0,l.kt)("h3",{id:"additional-scenarios"},"Additional scenarios"),(0,l.kt)("p",null,"Currently ",(0,l.kt)("inlineCode",{parentName:"p"},"StreamlitCallbackHandler")," is geared towards use with a LangChain Agent Executor. Support for additional agent types,\nuse directly with Chains, etc will be added in the future."),(0,l.kt)("p",null,"You may also be interested in using\n",(0,l.kt)("a",{parentName:"p",href:"/docs/integrations/memory/streamlit_chat_message_history"},"StreamlitChatMessageHistory")," for LangChain."))}d.isMDXComponent=!0}}]);