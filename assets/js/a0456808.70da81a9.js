"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53385],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(c,".").concat(h)]||u[h]||g[h]||r;return n?o.createElement(m,s(s({ref:t},p),{},{components:n})):o.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},28980:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(87462),a=(n(67294),n(3905));const r={},s="Custom agent",i={unversionedId:"modules/agents/how_to/custom_agent",id:"modules/agents/how_to/custom_agent",title:"Custom agent",description:"This notebook goes through how to create your own custom agent.",source:"@site/docs/modules/agents/how_to/custom_agent.md",sourceDirName:"modules/agents/how_to",slug:"/modules/agents/how_to/custom_agent",permalink:"/langchain/docs/modules/agents/how_to/custom_agent",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom functions with OpenAI Functions Agent",permalink:"/langchain/docs/modules/agents/how_to/custom-functions-with-openai-functions-agent"},next:{title:"Custom agent with tool retrieval",permalink:"/langchain/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}},c={},l=[],p=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const g={toc:l},h="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-agent"},"Custom agent"),(0,a.kt)("p",null,"This notebook goes through how to create your own custom agent."),(0,a.kt)("p",null,"An agent consists of two parts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- Tools: The tools the agent has available to use.\n- The agent class itself: this decides which action to take.\n    \n    \n")),(0,a.kt)("p",null,"In this notebook we walk through how to create a custom agent."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Custom agent"}, {"imported": "AgentExecutor", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.AgentExecutor.html", "title": "Custom agent"}, {"imported": "BaseSingleActionAgent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.BaseSingleActionAgent.html", "title": "Custom agent"}]--\x3e\nfrom langchain.agents import Tool, AgentExecutor, BaseSingleActionAgent\nfrom langchain import OpenAI, SerpAPIWrapper\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'search = SerpAPIWrapper()\ntools = [\n    Tool(\n        name="Search",\n        func=search.run,\n        description="useful for when you need to answer questions about current events",\n        return_direct=True,\n    )\n]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "AgentAction", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.agent.AgentAction.html", "title": "Custom agent"}, {"imported": "AgentFinish", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.agent.AgentFinish.html", "title": "Custom agent"}]--\x3e\nfrom typing import List, Tuple, Any, Union\nfrom langchain.schema import AgentAction, AgentFinish\n\n\nclass FakeAgent(BaseSingleActionAgent):\n    """Fake Custom Agent."""\n\n    @property\n    def input_keys(self):\n        return ["input"]\n\n    def plan(\n        self, intermediate_steps: List[Tuple[AgentAction, str]], **kwargs: Any\n    ) -> Union[AgentAction, AgentFinish]:\n        """Given input, decided what to do.\n\n        Args:\n            intermediate_steps: Steps the LLM has taken to date,\n                along with observations\n            **kwargs: User inputs.\n\n        Returns:\n            Action specifying what tool to use.\n        """\n        return AgentAction(tool="Search", tool_input=kwargs["input"], log="")\n\n    async def aplan(\n        self, intermediate_steps: List[Tuple[AgentAction, str]], **kwargs: Any\n    ) -> Union[AgentAction, AgentFinish]:\n        """Given input, decided what to do.\n\n        Args:\n            intermediate_steps: Steps the LLM has taken to date,\n                along with observations\n            **kwargs: User inputs.\n\n        Returns:\n            Action specifying what tool to use.\n        """\n        return AgentAction(tool="Search", tool_input=kwargs["input"], log="")\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"agent = FakeAgent()\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"agent_executor = AgentExecutor.from_agent_and_tools(\n    agent=agent, tools=tools, verbose=True\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("How many people live in canada as of 2023?")\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    The current population of Canada is 38,669,152 as of Monday, April 24, 2023, based on Worldometer elaboration of the latest United Nations data.\n    \n    > Finished chain.\n\n\n\n\n\n    'The current population of Canada is 38,669,152 as of Monday, April 24, 2023, based on Worldometer elaboration of the latest United Nations data.'\n"))))}m.isMDXComponent=!0}}]);