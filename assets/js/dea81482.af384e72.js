"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7145],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>h});var t=a(67294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(a),m=o,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return a?t.createElement(h,i(i({ref:n},u),{},{components:a})):t.createElement(h,i({ref:n},u))}));function h(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=a[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},83383:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>v,frontMatter:()=>u,metadata:()=>p,toc:()=>h});var t=a(87462),o=(a(67294),a(3905));const r=(i="CodeOutputBlock",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var i;const s={toc:[{value:"Using in a chain",id:"using-in-a-chain",level:2},{value:"Inspecting the memory store",id:"inspecting-the-memory-store",level:2}]},c="wrapper";function l(e){let{components:n,...a}=e;return(0,o.kt)(c,(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.llms import OpenAI\nfrom langchain.memory import ConversationEntityMemory\nllm = OpenAI(temperature=0)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memory = ConversationEntityMemory(llm=llm)\n_input = {"input": "Deven & Sam are working on a hackathon project"}\nmemory.load_memory_variables(_input)\nmemory.save_context(\n    _input,\n    {"output": " That sounds like a great project! What kind of project are they working on?"}\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({\"input\": 'who is Sam'})\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'history': 'Human: Deven & Sam are working on a hackathon project\\nAI:  That sounds like a great project! What kind of project are they working on?',\n     'entities': {'Sam': 'Sam is working on a hackathon project with Deven.'}}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memory = ConversationEntityMemory(llm=llm, return_messages=True)\n_input = {"input": "Deven & Sam are working on a hackathon project"}\nmemory.load_memory_variables(_input)\nmemory.save_context(\n    _input,\n    {"output": " That sounds like a great project! What kind of project are they working on?"}\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({\"input\": 'who is Sam'})\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'history': [HumanMessage(content='Deven & Sam are working on a hackathon project', additional_kwargs={}),\n      AIMessage(content=' That sounds like a great project! What kind of project are they working on?', additional_kwargs={})],\n     'entities': {'Sam': 'Sam is working on a hackathon project with Deven.'}}\n"))),(0,o.kt)("h2",{id:"using-in-a-chain"},"Using in a chain"),(0,o.kt)("p",null,"Let's now use it in a chain!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains import ConversationChain\nfrom langchain.memory import ConversationEntityMemory\nfrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATE\nfrom pydantic import BaseModel\nfrom typing import List, Dict, Any\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"conversation = ConversationChain(\n    llm=llm, \n    verbose=True,\n    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,\n    memory=ConversationEntityMemory(llm=llm)\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="Deven & Sam are working on a hackathon project")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    You are an assistant to a human, powered by a large language model trained by OpenAI.\n    \n    You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n    \n    You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n    \n    Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n    \n    Context:\n    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}\n    \n    Current conversation:\n    \n    Last line:\n    Human: Deven & Sam are working on a hackathon project\n    You:\n    \n    > Finished chain.\n\n\n\n\n\n    ' That sounds like a great project! What kind of project are they working on?'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"conversation.memory.entity_store.store\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'Deven': 'Deven is working on a hackathon project with Sam, which they are entering into a hackathon.',\n     'Sam': 'Sam is working on a hackathon project with Deven.'}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="They are trying to add more complex memory structures to Langchain")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    You are an assistant to a human, powered by a large language model trained by OpenAI.\n    \n    You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n    \n    You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n    \n    Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n    \n    Context:\n    {'Deven': 'Deven is working on a hackathon project with Sam, which they are entering into a hackathon.', 'Sam': 'Sam is working on a hackathon project with Deven.', 'Langchain': ''}\n    \n    Current conversation:\n    Human: Deven & Sam are working on a hackathon project\n    AI:  That sounds like a great project! What kind of project are they working on?\n    Last line:\n    Human: They are trying to add more complex memory structures to Langchain\n    You:\n    \n    > Finished chain.\n\n\n\n\n\n    ' That sounds like an interesting project! What kind of memory structures are they trying to add?'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="They are adding in a key-value store for entities mentioned so far in the conversation.")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    You are an assistant to a human, powered by a large language model trained by OpenAI.\n    \n    You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n    \n    You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n    \n    Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n    \n    Context:\n    {'Deven': 'Deven is working on a hackathon project with Sam, which they are entering into a hackathon. They are trying to add more complex memory structures to Langchain.', 'Sam': 'Sam is working on a hackathon project with Deven, trying to add more complex memory structures to Langchain.', 'Langchain': 'Langchain is a project that is trying to add more complex memory structures.', 'Key-Value Store': ''}\n    \n    Current conversation:\n    Human: Deven & Sam are working on a hackathon project\n    AI:  That sounds like a great project! What kind of project are they working on?\n    Human: They are trying to add more complex memory structures to Langchain\n    AI:  That sounds like an interesting project! What kind of memory structures are they trying to add?\n    Last line:\n    Human: They are adding in a key-value store for entities mentioned so far in the conversation.\n    You:\n    \n    > Finished chain.\n\n\n\n\n\n    ' That sounds like a great idea! How will the key-value store help with the project?'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="What do you know about Deven & Sam?")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    You are an assistant to a human, powered by a large language model trained by OpenAI.\n    \n    You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n    \n    You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n    \n    Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n    \n    Context:\n    {'Deven': 'Deven is working on a hackathon project with Sam, which they are entering into a hackathon. They are trying to add more complex memory structures to Langchain, including a key-value store for entities mentioned so far in the conversation.', 'Sam': 'Sam is working on a hackathon project with Deven, trying to add more complex memory structures to Langchain, including a key-value store for entities mentioned so far in the conversation.'}\n    \n    Current conversation:\n    Human: Deven & Sam are working on a hackathon project\n    AI:  That sounds like a great project! What kind of project are they working on?\n    Human: They are trying to add more complex memory structures to Langchain\n    AI:  That sounds like an interesting project! What kind of memory structures are they trying to add?\n    Human: They are adding in a key-value store for entities mentioned so far in the conversation.\n    AI:  That sounds like a great idea! How will the key-value store help with the project?\n    Last line:\n    Human: What do you know about Deven & Sam?\n    You:\n    \n    > Finished chain.\n\n\n\n\n\n    ' Deven and Sam are working on a hackathon project together, trying to add more complex memory structures to Langchain, including a key-value store for entities mentioned so far in the conversation. They seem to be working hard on this project and have a great idea for how the key-value store can help.'\n"))),(0,o.kt)("h2",{id:"inspecting-the-memory-store"},"Inspecting the memory store"),(0,o.kt)("p",null,"We can also inspect the memory store directly. In the following examples, we look at it directly, and then go through some examples of adding information and watch how it changes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\npprint(conversation.memory.entity_store.store)\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'Daimon': 'Daimon is a company founded by Sam, a successful entrepreneur.',\n     'Deven': 'Deven is working on a hackathon project with Sam, which they are '\n              'entering into a hackathon. They are trying to add more complex '\n              'memory structures to Langchain, including a key-value store for '\n              'entities mentioned so far in the conversation, and seem to be '\n              'working hard on this project with a great idea for how the '\n              'key-value store can help.',\n     'Key-Value Store': 'A key-value store is being added to the project to store '\n                        'entities mentioned in the conversation.',\n     'Langchain': 'Langchain is a project that is trying to add more complex '\n                  'memory structures, including a key-value store for entities '\n                  'mentioned so far in the conversation.',\n     'Sam': 'Sam is working on a hackathon project with Deven, trying to add more '\n            'complex memory structures to Langchain, including a key-value store '\n            'for entities mentioned so far in the conversation. They seem to have '\n            'a great idea for how the key-value store can help, and Sam is also '\n            'the founder of a company called Daimon.'}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="Sam is the founder of a company called Daimon.")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    You are an assistant to a human, powered by a large language model trained by OpenAI.\n    \n    You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n    \n    You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n    \n    Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n    \n    Context:\n    {'Daimon': 'Daimon is a company founded by Sam, a successful entrepreneur.', 'Sam': 'Sam is working on a hackathon project with Deven, trying to add more complex memory structures to Langchain, including a key-value store for entities mentioned so far in the conversation. They seem to have a great idea for how the key-value store can help, and Sam is also the founder of a company called Daimon.'}\n    \n    Current conversation:\n    Human: They are adding in a key-value store for entities mentioned so far in the conversation.\n    AI:  That sounds like a great idea! How will the key-value store help with the project?\n    Human: What do you know about Deven & Sam?\n    AI:  Deven and Sam are working on a hackathon project together, trying to add more complex memory structures to Langchain, including a key-value store for entities mentioned so far in the conversation. They seem to be working hard on this project and have a great idea for how the key-value store can help.\n    Human: Sam is the founder of a company called Daimon.\n    AI: \n    That's impressive! It sounds like Sam is a very successful entrepreneur. What kind of company is Daimon?\n    Last line:\n    Human: Sam is the founder of a company called Daimon.\n    You:\n    \n    > Finished chain.\n\n\n\n\n\n    \" That's impressive! It sounds like Sam is a very successful entrepreneur. What kind of company is Daimon?\"\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\npprint(conversation.memory.entity_store.store)\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'Daimon': 'Daimon is a company founded by Sam, a successful entrepreneur, who '\n               'is working on a hackathon project with Deven to add more complex '\n               'memory structures to Langchain.',\n     'Deven': 'Deven is working on a hackathon project with Sam, which they are '\n              'entering into a hackathon. They are trying to add more complex '\n              'memory structures to Langchain, including a key-value store for '\n              'entities mentioned so far in the conversation, and seem to be '\n              'working hard on this project with a great idea for how the '\n              'key-value store can help.',\n     'Key-Value Store': 'A key-value store is being added to the project to store '\n                        'entities mentioned in the conversation.',\n     'Langchain': 'Langchain is a project that is trying to add more complex '\n                  'memory structures, including a key-value store for entities '\n                  'mentioned so far in the conversation.',\n     'Sam': 'Sam is working on a hackathon project with Deven, trying to add more '\n            'complex memory structures to Langchain, including a key-value store '\n            'for entities mentioned so far in the conversation. They seem to have '\n            'a great idea for how the key-value store can help, and Sam is also '\n            'the founder of a successful company called Daimon.'}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="What do you know about Sam?")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    You are an assistant to a human, powered by a large language model trained by OpenAI.\n    \n    You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n    \n    You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n    \n    Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n    \n    Context:\n    {'Deven': 'Deven is working on a hackathon project with Sam, which they are entering into a hackathon. They are trying to add more complex memory structures to Langchain, including a key-value store for entities mentioned so far in the conversation, and seem to be working hard on this project with a great idea for how the key-value store can help.', 'Sam': 'Sam is working on a hackathon project with Deven, trying to add more complex memory structures to Langchain, including a key-value store for entities mentioned so far in the conversation. They seem to have a great idea for how the key-value store can help, and Sam is also the founder of a successful company called Daimon.', 'Langchain': 'Langchain is a project that is trying to add more complex memory structures, including a key-value store for entities mentioned so far in the conversation.', 'Daimon': 'Daimon is a company founded by Sam, a successful entrepreneur, who is working on a hackathon project with Deven to add more complex memory structures to Langchain.'}\n    \n    Current conversation:\n    Human: What do you know about Deven & Sam?\n    AI:  Deven and Sam are working on a hackathon project together, trying to add more complex memory structures to Langchain, including a key-value store for entities mentioned so far in the conversation. They seem to be working hard on this project and have a great idea for how the key-value store can help.\n    Human: Sam is the founder of a company called Daimon.\n    AI: \n    That's impressive! It sounds like Sam is a very successful entrepreneur. What kind of company is Daimon?\n    Human: Sam is the founder of a company called Daimon.\n    AI:  That's impressive! It sounds like Sam is a very successful entrepreneur. What kind of company is Daimon?\n    Last line:\n    Human: What do you know about Sam?\n    You:\n    \n    > Finished chain.\n\n\n\n\n\n    ' Sam is the founder of a successful company called Daimon. He is also working on a hackathon project with Deven to add more complex memory structures to Langchain. They seem to have a great idea for how the key-value store can help.'\n"))))}l.isMDXComponent=!0;const u={},d="Entity",p={unversionedId:"modules/memory/types/entity_summary_memory",id:"modules/memory/types/entity_summary_memory",title:"Entity",description:"Entity memory remembers given facts about specific entities in a conversation. It extracts information on entities (using an LLM) and builds up its knowledge about that entity over time (also using an LLM).",source:"@site/docs/modules/memory/types/entity_summary_memory.mdx",sourceDirName:"modules/memory/types",slug:"/modules/memory/types/entity_summary_memory",permalink:"/langchain/docs/modules/memory/types/entity_summary_memory",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Conversation Buffer Window",permalink:"/langchain/docs/modules/memory/types/buffer_window"},next:{title:"Conversation Knowledge Graph",permalink:"/langchain/docs/modules/memory/types/kg"}},m={},h=[],g={toc:h},y="wrapper";function v(e){let{components:n,...a}=e;return(0,o.kt)(y,(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"entity"},"Entity"),(0,o.kt)("p",null,"Entity memory remembers given facts about specific entities in a conversation. It extracts information on entities (using an LLM) and builds up its knowledge about that entity over time (also using an LLM)."),(0,o.kt)("p",null,"Let's first walk through using this functionality."),(0,o.kt)(l,{mdxType:"Example"}))}v.isMDXComponent=!0}}]);