"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[58402],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=l.createContext({}),s=function(e){var t=l.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return l.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?l.createElement(g,r(r({ref:t},c),{},{components:n})):l.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,r[1]=i;for(var s=2;s<o;s++)r[s]=n[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},21178:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var l=n(87462),a=(n(67294),n(3905));const o={},r="GPT4All",i={unversionedId:"integrations/llms/gpt4all",id:"integrations/llms/gpt4all",title:"GPT4All",description:"GitHub:nomic-ai/gpt4all an ecosystem of open-source chatbots trained on a massive collections of clean assistant data including code, stories and dialogue.",source:"@site/docs/integrations/llms/gpt4all.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/gpt4all",permalink:"/langchain/docs/integrations/llms/gpt4all",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"GooseAI",permalink:"/langchain/docs/integrations/llms/gooseai"},next:{title:"Hugging Face Hub",permalink:"/langchain/docs/integrations/llms/huggingface_hub"}},p={},s=[{value:"Import GPT4All",id:"import-gpt4all",level:3},{value:"Set Up Question to pass to LLM",id:"set-up-question-to-pass-to-llm",level:3},{value:"Specify Model",id:"specify-model",level:3}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const u={toc:s},d="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,l.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gpt4all"},"GPT4All"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nomic-ai/gpt4all"},"GitHub:nomic-ai/gpt4all")," an ecosystem of open-source chatbots trained on a massive collections of clean assistant data including code, stories and dialogue."),(0,a.kt)("p",null,"This example goes over how to use LangChain to interact with ",(0,a.kt)("inlineCode",{parentName:"p"},"GPT4All")," models."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"%pip install gpt4all > /dev/null\n")),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Note: you may need to restart the kernel to use updated packages.\n"))),(0,a.kt)("h3",{id:"import-gpt4all"},"Import GPT4All"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GPT4All", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.gpt4all.GPT4All.html", "title": "GPT4All"}, {"imported": "StreamingStdOutCallbackHandler", "source": "langchain.callbacks.streaming_stdout", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streaming_stdout.StreamingStdOutCallbackHandler.html", "title": "GPT4All"}]--\x3e\nfrom langchain import PromptTemplate, LLMChain\nfrom langchain.llms import GPT4All\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n')),(0,a.kt)("h3",{id:"set-up-question-to-pass-to-llm"},"Set Up Question to pass to LLM"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'template = """Question: {question}\n\nAnswer: Let\'s think step by step."""\n\nprompt = PromptTemplate(template=template, input_variables=["question"])\n')),(0,a.kt)("h3",{id:"specify-model"},"Specify Model"),(0,a.kt)("p",null,"To run locally, download a compatible ggml-formatted model. "),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://gpt4all.io/index.html"},"gpt4all page")," has a useful ",(0,a.kt)("inlineCode",{parentName:"p"},"Model Explorer")," section:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Select a model of interest"),(0,a.kt)("li",{parentName:"ul"},"Download using the UI and move the ",(0,a.kt)("inlineCode",{parentName:"li"},".bin")," to the ",(0,a.kt)("inlineCode",{parentName:"li"},"local_path")," (noted below)")),(0,a.kt)("p",null,"For more info, visit ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nomic-ai/gpt4all"},"https://github.com/nomic-ai/gpt4all"),"."),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'local_path = (\n    "./models/ggml-gpt4all-l13b-snoozy.bin"  # replace with your desired local file path\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Callbacks support token-wise streaming\ncallbacks = [StreamingStdOutCallbackHandler()]\n\n# Verbose is required to pass to the callback manager\nllm = GPT4All(model=local_path, callbacks=callbacks, verbose=True)\n\n# If you want to use a custom model add the backend parameter\n# Check https://docs.gpt4all.io/gpt4all_python.html for supported backends\nllm = GPT4All(model=local_path, backend="gptj", callbacks=callbacks, verbose=True)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"llm_chain = LLMChain(prompt=prompt, llm=llm)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'question = "What NFL team won the Super Bowl in the year Justin Bieber was born?"\n\nllm_chain.run(question)\n')),(0,a.kt)("p",null,"Justin Bieber was born on March 1, 1994. In 1994, The Cowboys won Super Bowl XXVIII."))}g.isMDXComponent=!0}}]);