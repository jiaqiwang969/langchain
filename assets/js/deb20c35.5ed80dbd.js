"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[91963],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),m=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=m(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=m(t),u=l,g=c["".concat(p,".").concat(u)]||c[u]||d[u]||r;return t?a.createElement(g,o(o({ref:n},s),{},{components:t})):a.createElement(g,o({ref:n},s))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:l,o[1]=i;for(var m=2;m<r;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},28927:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var a=t(87462),l=(t(67294),t(3905));const r={},o="MLflow AI Gateway",i={unversionedId:"integrations/providers/mlflow_ai_gateway",id:"integrations/providers/mlflow_ai_gateway",title:"MLflow AI Gateway",description:"The MLflow AI Gateway service is a powerful tool designed to streamline the usage and management of various large",source:"@site/docs/integrations/providers/mlflow_ai_gateway.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/mlflow_ai_gateway",permalink:"/langchain/docs/integrations/providers/mlflow_ai_gateway",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Minimax",permalink:"/langchain/docs/integrations/providers/minimax"},next:{title:"MLflow",permalink:"/langchain/docs/integrations/providers/mlflow_tracking"}},p={},m=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Example provided by <code>MLflow</code>",id:"example-provided-by-mlflow",level:2},{value:"Completions Example",id:"completions-example",level:2},{value:"Embeddings Example",id:"embeddings-example",level:2},{value:"Chat Example",id:"chat-example",level:2},{value:"Databricks MLflow AI Gateway",id:"databricks-mlflow-ai-gateway",level:2}],s={toc:m},c="wrapper";function d(e){let{components:n,...t}=e;return(0,l.kt)(c,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"mlflow-ai-gateway"},"MLflow AI Gateway"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://www.mlflow.org/docs/latest/gateway/index.html"},"The MLflow AI Gateway")," service is a powerful tool designed to streamline the usage and management of various large\nlanguage model (LLM) providers, such as OpenAI and Anthropic, within an organization. It offers a high-level interface\nthat simplifies the interaction with these services by providing a unified endpoint to handle specific LLM related requests.\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://mlflow.org/docs/latest/gateway/index.html"},"the MLflow AI Gateway documentation")," for more details.")),(0,l.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,l.kt)("p",null,"Install ",(0,l.kt)("inlineCode",{parentName:"p"},"mlflow")," with MLflow AI Gateway dependencies:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"pip install 'mlflow[gateway]'\n")),(0,l.kt)("p",null,"Set the OpenAI API key as an environment variable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"export OPENAI_API_KEY=...\n")),(0,l.kt)("p",null,"Create a configuration file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"routes:\n  - name: completions\n    route_type: llm/v1/completions\n    model:\n      provider: openai\n      name: text-davinci-003\n      config:\n        openai_api_key: $OPENAI_API_KEY\n\n  - name: embeddings\n    route_type: llm/v1/embeddings\n    model:\n      provider: openai\n      name: text-embedding-ada-002\n      config:\n        openai_api_key: $OPENAI_API_KEY\n")),(0,l.kt)("p",null,"Start the Gateway server:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"mlflow gateway start --config-path /path/to/config.yaml\n")),(0,l.kt)("h2",{id:"example-provided-by-mlflow"},"Example provided by ",(0,l.kt)("inlineCode",{parentName:"h2"},"MLflow")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"mlflow.langchain")," module provides an API for logging and loading ",(0,l.kt)("inlineCode",{parentName:"p"},"LangChain")," models.\nThis module exports multivariate LangChain models in the langchain flavor and univariate LangChain\nmodels in the pyfunc flavor.")),(0,l.kt)("p",null,"See the ",(0,l.kt)("a",{parentName:"p",href:"https://www.mlflow.org/docs/latest/python_api/mlflow.langchain.html"},"API documentation and examples"),"."),(0,l.kt)("h2",{id:"completions-example"},"Completions Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import mlflow\nfrom langchain import LLMChain, PromptTemplate\nfrom langchain.llms import MlflowAIGateway\n\ngateway = MlflowAIGateway(\n    gateway_uri="http://127.0.0.1:5000",\n    route="completions",\n    params={\n        "temperature": 0.0,\n        "top_p": 0.1,\n    },\n)\n\nllm_chain = LLMChain(\n    llm=gateway,\n    prompt=PromptTemplate(\n        input_variables=["adjective"],\n        template="Tell me a {adjective} joke",\n    ),\n)\nresult = llm_chain.run(adjective="funny")\nprint(result)\n\nwith mlflow.start_run():\n    model_info = mlflow.langchain.log_model(chain, "model")\n\nmodel = mlflow.pyfunc.load_model(model_info.model_uri)\nprint(model.predict([{"adjective": "funny"}]))\n')),(0,l.kt)("h2",{id:"embeddings-example"},"Embeddings Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.embeddings import MlflowAIGatewayEmbeddings\n\nembeddings = MlflowAIGatewayEmbeddings(\n    gateway_uri="http://127.0.0.1:5000",\n    route="embeddings",\n)\n\nprint(embeddings.embed_query("hello"))\nprint(embeddings.embed_documents(["hello"]))\n')),(0,l.kt)("h2",{id:"chat-example"},"Chat Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.chat_models import ChatMLflowAIGateway\nfrom langchain.schema import HumanMessage, SystemMessage\n\nchat = ChatMLflowAIGateway(\n    gateway_uri="http://127.0.0.1:5000",\n    route="chat",\n    params={\n        "temperature": 0.1\n    }\n)\n\nmessages = [\n    SystemMessage(\n        content="You are a helpful assistant that translates English to French."\n    ),\n    HumanMessage(\n        content="Translate this sentence from English to French: I love programming."\n    ),\n]\nprint(chat(messages))\n')),(0,l.kt)("h2",{id:"databricks-mlflow-ai-gateway"},"Databricks MLflow AI Gateway"),(0,l.kt)("p",null,"Databricks MLflow AI Gateway is in private preview.\nPlease contact a Databricks representative to enroll in the preview."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import LLMChain, PromptTemplate\nfrom langchain.llms import MlflowAIGateway\n\ngateway = MlflowAIGateway(\n    gateway_uri="databricks",\n    route="completions",\n)\n\nllm_chain = LLMChain(\n    llm=gateway,\n    prompt=PromptTemplate(\n        input_variables=["adjective"],\n        template="Tell me a {adjective} joke",\n    ),\n)\nresult = llm_chain.run(adjective="funny")\nprint(result)\n')))}d.isMDXComponent=!0}}]);