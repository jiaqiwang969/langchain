"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[10846],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(t),h=o,d=u["".concat(p,".").concat(h)]||u[h]||m[h]||r;return t?a.createElement(d,i(i({ref:n},s),{},{components:t})):a.createElement(d,i({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=h;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},58257:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={},i="Azure",l={unversionedId:"integrations/chat/azure_chat_openai",id:"integrations/chat/azure_chat_openai",title:"Azure",description:"This notebook goes over how to connect to an Azure hosted OpenAI endpoint",source:"@site/docs/integrations/chat/azure_chat_openai.md",sourceDirName:"integrations/chat",slug:"/integrations/chat/azure_chat_openai",permalink:"/langchain/docs/integrations/chat/azure_chat_openai",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Anyscale",permalink:"/langchain/docs/integrations/chat/anyscale"},next:{title:"AzureML Chat Online Endpoint",permalink:"/langchain/docs/integrations/chat/azureml_chat_endpoint"}},p={},c=[{value:"Model Version",id:"model-version",level:2}],s=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const m={toc:c},h="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(h,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"azure"},"Azure"),(0,o.kt)("p",null,"This notebook goes over how to connect to an Azure hosted OpenAI endpoint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "AzureChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.azure_openai.AzureChatOpenAI.html", "title": "Azure"}, {"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "Azure"}]--\x3e\nfrom langchain.chat_models import AzureChatOpenAI\nfrom langchain.schema import HumanMessage\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'BASE_URL = "https://${TODO}.openai.azure.com"\nAPI_KEY = "..."\nDEPLOYMENT_NAME = "chat"\nmodel = AzureChatOpenAI(\n    openai_api_base=BASE_URL,\n    openai_api_version="2023-05-15",\n    deployment_name=DEPLOYMENT_NAME,\n    openai_api_key=API_KEY,\n    openai_api_type="azure",\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'model(\n    [\n        HumanMessage(\n            content="Translate this sentence from English to French. I love programming."\n        )\n    ]\n)\n')),(0,o.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="\\n\\nJ\'aime programmer.", additional_kwargs={})\n'))),(0,o.kt)("h2",{id:"model-version"},"Model Version"),(0,o.kt)("p",null,"Azure OpenAI responses contain ",(0,o.kt)("inlineCode",{parentName:"p"},"model")," property, which is name of the model used to generate the response. However unlike native OpenAI responses, it does not contain the version of the model, which is set on the deplyoment in Azure. This makes it tricky to know which version of the model was used to generate the response, which as result can lead to e.g. wrong total cost calculation with ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAICallbackHandler"),"."),(0,o.kt)("p",null,"To solve this problem, you can pass ",(0,o.kt)("inlineCode",{parentName:"p"},"model_version")," parameter to ",(0,o.kt)("inlineCode",{parentName:"p"},"AzureChatOpenAI")," class, which will be added to the model name in the llm output. This way you can easily distinguish between different versions of the model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "get_openai_callback", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.get_openai_callback.html", "title": "Azure"}]--\x3e\nfrom langchain.callbacks import get_openai_callback\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'BASE_URL = "https://{endpoint}.openai.azure.com"\nAPI_KEY = "..."\nDEPLOYMENT_NAME = "gpt-35-turbo" # in Azure, this deployment has version 0613 - input and output tokens are counted separately\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'model = AzureChatOpenAI(\n    openai_api_base=BASE_URL,\n    openai_api_version="2023-05-15",\n    deployment_name=DEPLOYMENT_NAME,\n    openai_api_key=API_KEY,\n    openai_api_type="azure",\n)\nwith get_openai_callback() as cb:\n    model(\n        [\n            HumanMessage(\n                content="Translate this sentence from English to French. I love programming."\n            )\n        ]\n    )\n    print(f"Total Cost (USD): ${format(cb.total_cost, \'.6f\')}") # without specifying the model version, flat-rate 0.002 USD per 1k input and output tokens is used\n')),(0,o.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Total Cost (USD): $0.000054\n"))),(0,o.kt)("p",null,"We can provide the model version to ",(0,o.kt)("inlineCode",{parentName:"p"},"AzureChatOpenAI")," constructor. It will get appended to the model name returned by Azure OpenAI and cost will be counted correctly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'model0613 = AzureChatOpenAI(\n    openai_api_base=BASE_URL,\n    openai_api_version="2023-05-15",\n    deployment_name=DEPLOYMENT_NAME,\n    openai_api_key=API_KEY,\n    openai_api_type="azure",\n    model_version="0613"\n)\nwith get_openai_callback() as cb:\n    model0613(\n        [\n            HumanMessage(\n                content="Translate this sentence from English to French. I love programming."\n            )\n        ]\n    )\n    print(f"Total Cost (USD): ${format(cb.total_cost, \'.6f\')}")\n')),(0,o.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Total Cost (USD): $0.000044\n"))))}d.isMDXComponent=!0}}]);