"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[77816],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),u=r,m=h["".concat(l,".").concat(u)]||h[u]||g[u]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},18148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},i="CSV",s={unversionedId:"integrations/toolkits/csv",id:"integrations/toolkits/csv",title:"CSV",description:"This notebook shows how to use agents to interact with data in CSV format. It is mostly optimized for question answering.",source:"@site/docs/integrations/toolkits/csv.md",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/csv",permalink:"/langchain/docs/integrations/toolkits/csv",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Azure Cognitive Services",permalink:"/langchain/docs/integrations/toolkits/azure_cognitive_services"},next:{title:"Document Comparison",permalink:"/langchain/docs/integrations/toolkits/document_comparison_toolkit"}},l={},p=[{value:"Using <code>ZERO_SHOT_REACT_DESCRIPTION</code>",id:"using-zero_shot_react_description",level:2},{value:"Using OpenAI Functions",id:"using-openai-functions",level:2},{value:"Multi CSV Example",id:"multi-csv-example",level:3}],c=(h="CodeOutputBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var h;const g={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"csv"},"CSV"),(0,r.kt)("p",null,"This notebook shows how to use agents to interact with data in ",(0,r.kt)("inlineCode",{parentName:"p"},"CSV")," format. It is mostly optimized for question answering."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE: this agent calls the Pandas DataFrame agent under the hood, which in turn calls the Python agent, which executes LLM generated Python code - this can be bad if the LLM generated Python code is harmful. Use cautiously.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "CSV"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "CSV"}, {"imported": "AgentType", "source": "langchain.agents.agent_types", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "CSV"}, {"imported": "create_csv_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.csv.base.create_csv_agent.html", "title": "CSV"}]--\x3e\nfrom langchain.llms import OpenAI\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents.agent_types import AgentType\n\nfrom langchain.agents import create_csv_agent\n')),(0,r.kt)("h2",{id:"using-zero_shot_react_description"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"ZERO_SHOT_REACT_DESCRIPTION")),(0,r.kt)("p",null,"This shows how to initialize the agent using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ZERO_SHOT_REACT_DESCRIPTION")," agent type. Note that this is an alternative to the above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent = create_csv_agent(\n    OpenAI(temperature=0),\n    "titanic.csv",\n    verbose=True,\n    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n)\n')),(0,r.kt)("h2",{id:"using-openai-functions"},"Using OpenAI Functions"),(0,r.kt)("p",null,"This shows how to initialize the agent using the OPENAI_FUNCTIONS agent type. Note that this is an alternative to the above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent = create_csv_agent(\n    ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613"),\n    "titanic.csv",\n    verbose=True,\n    agent_type=AgentType.OPENAI_FUNCTIONS,\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("how many rows are there?")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Error in on_chain_start callback: 'name'\n\n\n    \n    Invoking: `python_repl_ast` with `df.shape[0]`\n    \n    \n    891There are 891 rows in the dataframe.\n    \n    > Finished chain.\n\n\n\n\n\n    'There are 891 rows in the dataframe.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("how many people have more than 3 siblings")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Error in on_chain_start callback: 'name'\n\n\n    \n    Invoking: `python_repl_ast` with `df[df['SibSp'] > 3]['PassengerId'].count()`\n    \n    \n    30There are 30 people in the dataframe who have more than 3 siblings.\n    \n    > Finished chain.\n\n\n\n\n\n    'There are 30 people in the dataframe who have more than 3 siblings.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("whats the square root of the average age?")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Error in on_chain_start callback: 'name'\n\n\n    \n    Invoking: `python_repl_ast` with `import pandas as pd\n    import math\n    \n    # Create a dataframe\n    data = {'Age': [22, 38, 26, 35, 35]}\n    df = pd.DataFrame(data)\n    \n    # Calculate the average age\n    average_age = df['Age'].mean()\n    \n    # Calculate the square root of the average age\n    square_root = math.sqrt(average_age)\n    \n    square_root`\n    \n    \n    5.585696017507576The square root of the average age is approximately 5.59.\n    \n    > Finished chain.\n\n\n\n\n\n    'The square root of the average age is approximately 5.59.'\n"))),(0,r.kt)("h3",{id:"multi-csv-example"},"Multi CSV Example"),(0,r.kt)("p",null,"This next part shows how the agent can interact with multiple csv files passed in as a list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent = create_csv_agent(\n    ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613"),\n    ["titanic.csv", "titanic_age_fillna.csv"],\n    verbose=True,\n    agent_type=AgentType.OPENAI_FUNCTIONS,\n)\nagent.run("how many rows in the age column are different between the two dfs?")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Error in on_chain_start callback: 'name'\n\n\n    \n    Invoking: `python_repl_ast` with `df1['Age'].nunique() - df2['Age'].nunique()`\n    \n    \n    -1There is 1 row in the age column that is different between the two dataframes.\n    \n    > Finished chain.\n\n\n\n\n\n    'There is 1 row in the age column that is different between the two dataframes.'\n"))))}m.isMDXComponent=!0}}]);