"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[55058],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>d});var r=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var m=r.createContext({}),l=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},i=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,m=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),c=l(a),g=o,d=c["".concat(m,".").concat(g)]||c[g]||u[g]||n;return a?r.createElement(d,s(s({ref:t},i),{},{components:a})):r.createElement(d,s({ref:t},i))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,s=new Array(n);s[0]=g;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[c]="string"==typeof e?e:o,s[1]=p;for(var l=2;l<n;l++)s[l]=a[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},96949:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>n,metadata:()=>p,toc:()=>l});var r=a(87462),o=(a(67294),a(3905));const n={},s="Types of MessagePromptTemplate",p={unversionedId:"modules/model_io/prompts/prompt_templates/msg_prompt_templates",id:"modules/model_io/prompts/prompt_templates/msg_prompt_templates",title:"Types of MessagePromptTemplate",description:"LangChain provides different types of MessagePromptTemplate. The most commonly used are AIMessagePromptTemplate, SystemMessagePromptTemplate and HumanMessagePromptTemplate, which create an AI message, system message and human message respectively.",source:"@site/docs/modules/model_io/prompts/prompt_templates/msg_prompt_templates.mdx",sourceDirName:"modules/model_io/prompts/prompt_templates",slug:"/modules/model_io/prompts/prompt_templates/msg_prompt_templates",permalink:"/langchain/docs/modules/model_io/prompts/prompt_templates/msg_prompt_templates",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Template formats",permalink:"/langchain/docs/modules/model_io/prompts/prompt_templates/formats"},next:{title:"Partial prompt templates",permalink:"/langchain/docs/modules/model_io/prompts/prompt_templates/partial"}},m={},l=[],i=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const u={toc:l},g="wrapper";function d(e){let{components:t,...a}=e;return(0,o.kt)(g,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"types-of-messageprompttemplate"},"Types of ",(0,o.kt)("inlineCode",{parentName:"h1"},"MessagePromptTemplate")),(0,o.kt)("p",null,"LangChain provides different types of ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),". The most commonly used are ",(0,o.kt)("inlineCode",{parentName:"p"},"AIMessagePromptTemplate"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"SystemMessagePromptTemplate")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"HumanMessagePromptTemplate"),", which create an AI message, system message and human message respectively."),(0,o.kt)("p",null,"However, in cases where the chat model supports taking chat message with arbitrary role, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatMessagePromptTemplate"),", which allows user to specify the role name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatMessagePromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatMessagePromptTemplate.html", "title": "Types of `MessagePromptTemplate`"}]--\x3e\nfrom langchain.prompts import ChatMessagePromptTemplate\n\nprompt = "May the {subject} be with you"\n\nchat_message_prompt = ChatMessagePromptTemplate.from_template(role="Jedi", template=prompt)\nchat_message_prompt.format(subject="force")\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ChatMessage(content='May the force be with you', additional_kwargs={}, role='Jedi')\n"))),(0,o.kt)("p",null,"LangChain also provides ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagesPlaceholder"),", which gives you full control of what messages to be rendered during formatting. This can be useful when you are uncertain of what role you should be using for your message prompt templates or when you wish to insert a list of messages during formatting."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MessagesPlaceholder", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.MessagesPlaceholder.html", "title": "Types of `MessagePromptTemplate`"}]--\x3e\nfrom langchain.prompts import MessagesPlaceholder\n\nhuman_prompt = "Summarize our conversation so far in {word_count} words."\nhuman_message_template = HumanMessagePromptTemplate.from_template(human_prompt)\n\nchat_prompt = ChatPromptTemplate.from_messages([MessagesPlaceholder(variable_name="conversation"), human_message_template])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'human_message = HumanMessage(content="What is the best way to learn programming?")\nai_message = AIMessage(content="""\\\n1. Choose a programming language: Decide on a programming language that you want to learn.\n\n2. Start with the basics: Familiarize yourself with the basic programming concepts such as variables, data types and control structures.\n\n3. Practice, practice, practice: The best way to learn programming is through hands-on experience\\\n""")\n\nchat_prompt.format_prompt(conversation=[human_message, ai_message], word_count="10").to_messages()\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [HumanMessage(content='What is the best way to learn programming?', additional_kwargs={}),\n     AIMessage(content='1. Choose a programming language: Decide on a programming language that you want to learn. \\n\\n2. Start with the basics: Familiarize yourself with the basic programming concepts such as variables, data types and control structures.\\n\\n3. Practice, practice, practice: The best way to learn programming is through hands-on experience', additional_kwargs={}),\n     HumanMessage(content='Summarize our conversation so far in 10 words.', additional_kwargs={})]\n"))))}d.isMDXComponent=!0}}]);