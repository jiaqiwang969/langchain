"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[47162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,s(s({ref:t},i),{},{components:n})):r.createElement(g,s({ref:t},i))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:o,s[1]=p;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},17094:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={},s=void 0,p={unversionedId:"integrations/document_transformers/docai",id:"integrations/document_transformers/docai",title:"docai",description:"DocAI is a Google Cloud platform to transform unstructured data from documents into structured data, making it easier to understand, analyze, and consume. You can read more about it//cloud.google.com/document-ai/docs/overview",source:"@site/docs/integrations/document_transformers/docai.md",sourceDirName:"integrations/document_transformers",slug:"/integrations/document_transformers/docai",permalink:"/langchain/docs/integrations/document_transformers/docai",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Beautiful Soup",permalink:"/langchain/docs/integrations/document_transformers/beautiful_soup"},next:{title:"Doctran Extract Properties",permalink:"/langchain/docs/integrations/document_transformers/doctran_extract_properties"}},l={},c=[],i=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const d={toc:c},m="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Blob", "source": "langchain.document_loaders.blob_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.blob_loaders.schema.Blob.html", "title": "docai.md"}, {"imported": "DocAIParser", "source": "langchain.document_loaders.parsers", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.parsers.docai.DocAIParser.html", "title": "docai.md"}]--\x3e\nfrom langchain.document_loaders.blob_loaders import Blob\nfrom langchain.document_loaders.parsers import DocAIParser\n')),(0,o.kt)("p",null,"DocAI is a Google Cloud platform to transform unstructured data from documents into structured data, making it easier to understand, analyze, and consume. You can read more about it: ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/document-ai/docs/overview"},"https://cloud.google.com/document-ai/docs/overview")," "),(0,o.kt)("p",null,"First, you need to set up a GCS bucket and create your own OCR processor as described here: ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/document-ai/docs/create-processor"},"https://cloud.google.com/document-ai/docs/create-processor"),"\nThe GCS_OUTPUT_PATH should be a path to a folder on GCS (starting with ",(0,o.kt)("inlineCode",{parentName:"p"},"gs://"),") and a processor name should look like ",(0,o.kt)("inlineCode",{parentName:"p"},"projects/PROJECT_NUMBER/locations/LOCATION/processors/PROCESSOR_ID"),". You can get it either programmatically or copy from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Prediction endpoint")," section of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Processor details")," tab in the Google Cloud Console."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'PROJECT = "PUT_SOMETHING_HERE"\nGCS_OUTPUT_PATH = "PUT_SOMETHING_HERE"\nPROCESSOR_NAME = "PUT_SOMETHING_HERE"\n')),(0,o.kt)("p",null,"Now, let's create a parser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'parser = DocAIParser(location="us", processor_name=PROCESSOR_NAME, gcs_output_path=GCS_OUTPUT_PATH)\n')),(0,o.kt)("p",null,"Let's go and parse an Alphabet's take from here: ",(0,o.kt)("a",{parentName:"p",href:"https://abc.xyz/assets/a7/5b/9e5ae0364b12b4c883f3cf748226/goog-exhibit-99-1-q1-2023-19.pdf"},"https://abc.xyz/assets/a7/5b/9e5ae0364b12b4c883f3cf748226/goog-exhibit-99-1-q1-2023-19.pdf"),". Copy it to your GCS bucket first, and adjust the path below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'blob = Blob(path="gs://vertex-pgt/examples/goog-exhibit-99-1-q1-2023-19.pdf")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"docs = list(parser.lazy_parse(blob))\n")),(0,o.kt)("p",null,"We'll get one document per page, 11 in total:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(len(docs))\n")),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    11\n"))),(0,o.kt)("p",null,"You can run end-to-end parsing of a blob one-by-one. If you have many documents, it might be a better approach to batch them together and maybe even detach parsing from handling the results of parsing."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"operations = parser.docai_parse([blob])\nprint([op.operation.name for op in operations])\n")),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ['projects/543079149601/locations/us/operations/16447136779727347991']\n"))),(0,o.kt)("p",null,"You can check whether operations are finished:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"parser.is_running(operations)\n")),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    True\n"))),(0,o.kt)("p",null,"And when they're finished, you can parse the results:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"parser.is_running(operations)\n")),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    False\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"results = parser.get_results(operations)\nprint(results[0])\n")),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    DocAIParsingResults(source_path='gs://vertex-pgt/examples/goog-exhibit-99-1-q1-2023-19.pdf', parsed_path='gs://vertex-pgt/test/run1/16447136779727347991/0')\n"))),(0,o.kt)("p",null,"And now we can finally generate Documents from parsed results:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"docs = list(parser.parse_from_results(results))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(len(docs))\n")),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    11\n"))))}g.isMDXComponent=!0}}]);