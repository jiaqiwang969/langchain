"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[72e3],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,d=p["".concat(l,".").concat(h)]||p[h]||m[h]||o;return n?r.createElement(d,s(s({ref:t},u),{},{components:n})):r.createElement(d,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},59984:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},s="Multiple Retrieval Sources",i={unversionedId:"use_cases/question_answering/how_to/multiple_retrieval",id:"use_cases/question_answering/how_to/multiple_retrieval",title:"Multiple Retrieval Sources",description:"Often times you may want to do retrieval over multiple sources. These can be different vectorstores (where one contains information about topic X and the other contains info about topic Y). They could also be completely different databases altogether!",source:"@site/docs/use_cases/question_answering/how_to/multiple_retrieval.md",sourceDirName:"use_cases/question_answering/how_to",slug:"/use_cases/question_answering/how_to/multiple_retrieval",permalink:"/langchain/docs/use_cases/question_answering/how_to/multiple_retrieval",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Dynamically select from multiple retrievers",permalink:"/langchain/docs/use_cases/question_answering/how_to/multi_retrieval_qa_router"},next:{title:"Cite sources",permalink:"/langchain/docs/use_cases/question_answering/how_to/qa_citations"}},l={},c=[{value:"Set up SQL query",id:"set-up-sql-query",level:2},{value:"Set up vectorstore",id:"set-up-vectorstore",level:2},{value:"Combine",id:"combine",level:2}],u=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const m={toc:c},h="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"multiple-retrieval-sources"},"Multiple Retrieval Sources"),(0,a.kt)("p",null,"Often times you may want to do retrieval over multiple sources. These can be different vectorstores (where one contains information about topic X and the other contains info about topic Y). They could also be completely different databases altogether!"),(0,a.kt)("p",null,"A key part is is doing as much of the retrieval in parrelel as possible. This will keep the latency as low as possible. Luckily, ",(0,a.kt)("a",{parentName:"p",href:"../../"},"LangChain Expression Language")," supports parrellism out of the box."),(0,a.kt)("p",null,"Let's take a look where we do retrieval over a SQL database and a vectorstore."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Multiple Retrieval Sources"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\n')),(0,a.kt)("h2",{id:"set-up-sql-query"},"Set up SQL query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SQLDatabase", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.sql_database.SQLDatabase.html", "title": "Multiple Retrieval Sources"}, {"imported": "create_sql_query_chain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.sql_database.query.create_sql_query_chain.html", "title": "Multiple Retrieval Sources"}]--\x3e\nfrom langchain.utilities import SQLDatabase\nfrom langchain.chains import create_sql_query_chain\n\ndb = SQLDatabase.from_uri("sqlite:///../../../../../notebooks/Chinook.db")\nquery_chain = create_sql_query_chain(ChatOpenAI(temperature=0), db)\n')),(0,a.kt)("h2",{id:"set-up-vectorstore"},"Set up vectorstore"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "VectorstoreIndexCreator", "source": "langchain.indexes", "docs": "https://api.python.langchain.com/en/latest/indexes/langchain.indexes.vectorstore.VectorstoreIndexCreator.html", "title": "Multiple Retrieval Sources"}, {"imported": "Document", "source": "langchain.schema.document", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Multiple Retrieval Sources"}]--\x3e\nfrom langchain.indexes import VectorstoreIndexCreator\nfrom langchain.schema.document import Document\nindex_creator = VectorstoreIndexCreator()\nindex = index_creator.from_documents([Document(page_content="Foo")])\nretriever = index.vectorstore.as_retriever()\n')),(0,a.kt)("h2",{id:"combine"},"Combine"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "Multiple Retrieval Sources"}]--\x3e\nfrom langchain.prompts import ChatPromptTemplate\n\nsystem_message = """Use the information from the below two sources to answer any questions.\n\nSource 1: a SQL database about employee data\n<source1>\n{source1}\n</source1>\n\nSource 2: a text database of random information\n<source2>\n{source2}\n</source2>\n"""\n\nprompt = ChatPromptTemplate.from_messages([("system", system_message), ("human", "{question}")])\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'full_chain = {\n    "source1": {"question": lambda x: x["question"]} | query_chain | db.run,\n    "source2": (lambda x: x[\'question\']) | retriever,\n    "question": lambda x: x[\'question\'],\n} | prompt | ChatOpenAI()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'response = full_chain.invoke({"question":"How many Employees are there"})\nprint(response)\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Number of requested results 4 is greater than number of elements in index 1, updating n_results = 1\n\n\n    content='There are 8 employees.' additional_kwargs={} example=False\n"))))}d.isMDXComponent=!0}}]);