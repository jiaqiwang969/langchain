"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3408],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,g=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return n?l.createElement(g,o(o({ref:t},d),{},{components:n})):l.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},45013:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var l=n(87462),a=(n(67294),n(3905));const r={},o="GPT4All",i={unversionedId:"integrations/text_embedding/gpt4all",id:"integrations/text_embedding/gpt4all",title:"GPT4All",description:"GPT4All is a free-to-use, locally running, privacy-aware chatbot. There is no GPU or internet required. It features popular models and its own models such as GPT4All Falcon, Wizard, etc.",source:"@site/docs/integrations/text_embedding/gpt4all.md",sourceDirName:"integrations/text_embedding",slug:"/integrations/text_embedding/gpt4all",permalink:"/langchain/docs/integrations/text_embedding/gpt4all",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Google Cloud Platform Vertex AI PaLM",permalink:"/langchain/docs/integrations/text_embedding/google_vertex_ai_palm"},next:{title:"Hugging Face",permalink:"/langchain/docs/integrations/text_embedding/huggingfacehub"}},s={},p=[{value:"Install GPT4All&#39;s Python Bindings",id:"install-gpt4alls-python-bindings",level:2},{value:"Embed the Textual Data",id:"embed-the-textual-data",level:2}],d=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const m={toc:p},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,l.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gpt4all"},"GPT4All"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://gpt4all.io/index.html"},"GPT4All")," is a free-to-use, locally running, privacy-aware chatbot. There is no GPU or internet required. It features popular models and its own models such as GPT4All Falcon, Wizard, etc."),(0,a.kt)("p",null,"This notebook explains how to use ",(0,a.kt)("a",{parentName:"p",href:"https://docs.gpt4all.io/gpt4all_python_embedding.html#gpt4all.gpt4all.Embed4All"},"GPT4All embeddings")," with LangChain."),(0,a.kt)("h2",{id:"install-gpt4alls-python-bindings"},"Install GPT4All's Python Bindings"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"%pip install gpt4all > /dev/null\n")),(0,a.kt)("p",null,"Note: you may need to restart the kernel to use updated packages."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GPT4AllEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.gpt4all.GPT4AllEmbeddings.html", "title": "GPT4All"}]--\x3e\nfrom langchain.embeddings import GPT4AllEmbeddings\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"gpt4all_embd = GPT4AllEmbeddings()\n")),(0,a.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 45.5M/45.5M [00:02<00:00, 18.5MiB/s]\n\n\n    Model downloaded at:  /Users/rlm/.cache/gpt4all/ggml-all-MiniLM-L6-v2-f16.bin\n\n\n    objc[45711]: Class GGMLMetalClass is implemented in both /Users/rlm/anaconda3/envs/lcn2/lib/python3.9/site-packages/gpt4all/llmodel_DO_NOT_MODIFY/build/libreplit-mainline-metal.dylib (0x29fe18208) and /Users/rlm/anaconda3/envs/lcn2/lib/python3.9/site-packages/gpt4all/llmodel_DO_NOT_MODIFY/build/libllamamodel-mainline-metal.dylib (0x2a0244208). One of the two will be used. Which one is undefined.\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'text = "This is a test document."\n')),(0,a.kt)("h2",{id:"embed-the-textual-data"},"Embed the Textual Data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"query_result = gpt4all_embd.embed_query(text)\n")),(0,a.kt)("p",null,"With embed_documents you can embed multiple pieces of text. You can also map these embeddings with ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nomic.ai/index.html"},"Nomic's Atlas")," to see a visual representation of your data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"doc_result = gpt4all_embd.embed_documents([text])\n")))}g.isMDXComponent=!0}}]);