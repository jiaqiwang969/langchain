"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[90856],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?i.createElement(h,r(r({ref:t},u),{},{components:n})):i.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},12978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const o={},r="Deployment",s={unversionedId:"guides/deployments/index",id:"guides/deployments/index",title:"Deployment",description:"In today's fast-paced technological landscape, the use of Large Language Models (LLMs) is rapidly expanding. As a result, it's crucial for developers to understand how to effectively deploy these models in production environments. LLM interfaces typically fall into two categories:",source:"@site/docs/guides/deployments/index.mdx",sourceDirName:"guides/deployments",slug:"/guides/deployments/",permalink:"/langchain/docs/guides/deployments/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Debugging",permalink:"/langchain/docs/guides/debugging"},next:{title:"Template repos",permalink:"/langchain/docs/guides/deployments/template_repos"}},l={},c=[{value:"Outline",id:"outline",level:2},{value:"Designing a Robust LLM Application Service",id:"designing-a-robust-llm-application-service",level:2},{value:"Monitoring",id:"monitoring",level:3},{value:"Fault tolerance",id:"fault-tolerance",level:3},{value:"Zero down time upgrade",id:"zero-down-time-upgrade",level:3},{value:"Load balancing",id:"load-balancing",level:3},{value:"Maintaining Cost-Efficiency and Scalability",id:"maintaining-cost-efficiency-and-scalability",level:2},{value:"Self-hosting models",id:"self-hosting-models",level:3},{value:"Resource Management and Auto-Scaling",id:"resource-management-and-auto-scaling",level:3},{value:"Utilizing Spot Instances",id:"utilizing-spot-instances",level:3},{value:"Independent Scaling",id:"independent-scaling",level:3},{value:"Batching requests",id:"batching-requests",level:3},{value:"Ensuring Rapid Iteration",id:"ensuring-rapid-iteration",level:2},{value:"Model composition",id:"model-composition",level:3},{value:"Cloud providers",id:"cloud-providers",level:2},{value:"Infrastructure as Code (IaC)",id:"infrastructure-as-code-iac",level:2},{value:"CI/CD",id:"cicd",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deployment"},"Deployment"),(0,a.kt)("p",null,"In today's fast-paced technological landscape, the use of Large Language Models (LLMs) is rapidly expanding. As a result, it's crucial for developers to understand how to effectively deploy these models in production environments. LLM interfaces typically fall into two categories:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Case 1: Utilizing External LLM Providers (OpenAI, Anthropic, etc.)"),"\nIn this scenario, most of the computational burden is handled by the LLM providers, while LangChain simplifies the implementation of business logic around these services. This approach includes features such as prompt templating, chat message generation, caching, vector embedding database creation, preprocessing, etc.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Case 2: Self-hosted Open-Source Models"),"\nAlternatively, developers can opt to use smaller, yet comparably capable, self-hosted open-source LLM models. This approach can significantly decrease costs, latency, and privacy concerns associated with transferring data to external LLM providers."))),(0,a.kt)("p",null,"Regardless of the framework that forms the backbone of your product, deploying LLM applications comes with its own set of challenges. It's vital to understand the trade-offs and key considerations when evaluating serving frameworks."),(0,a.kt)("h2",{id:"outline"},"Outline"),(0,a.kt)("p",null,"This guide aims to provide a comprehensive overview of the requirements for deploying LLMs in a production setting, focusing on:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Designing a Robust LLM Application Service")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Maintaining Cost-Efficiency")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Ensuring Rapid Iteration"))),(0,a.kt)("p",null,"Understanding these components is crucial when assessing serving systems. LangChain integrates with several open-source projects designed to tackle these issues, providing a robust framework for productionizing your LLM applications. Some notable frameworks include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/ecosystem/integrations/ray_serve.html"},"Ray Serve")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/bentoml/BentoML"},"BentoML")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/ecosystem/integrations/openllm.html"},"OpenLLM")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/ecosystem/integrations/modal.html"},"Modal")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/ecosystem/integrations/jina.html#deployment"},"Jina"))),(0,a.kt)("p",null,"These links will provide further information on each ecosystem, assisting you in finding the best fit for your LLM deployment needs."),(0,a.kt)("h2",{id:"designing-a-robust-llm-application-service"},"Designing a Robust LLM Application Service"),(0,a.kt)("p",null,"When deploying an LLM service in production, it's imperative to provide a seamless user experience free from outages. Achieving 24/7 service availability involves creating and maintaining several sub-systems surrounding your application."),(0,a.kt)("h3",{id:"monitoring"},"Monitoring"),(0,a.kt)("p",null,"Monitoring forms an integral part of any system running in a production environment. In the context of LLMs, it is essential to monitor both performance and quality metrics."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Performance Metrics:")," These metrics provide insights into the efficiency and capacity of your model. Here are some key examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Query per second (QPS): This measures the number of queries your model processes in a second, offering insights into its utilization."),(0,a.kt)("li",{parentName:"ul"},"Latency: This metric quantifies the delay from when your client sends a request to when they receive a response."),(0,a.kt)("li",{parentName:"ul"},"Tokens Per Second (TPS): This represents the number of tokens your model can generate in a second.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Quality Metrics:")," These metrics are typically customized according to the business use-case. For instance, how does the output of your system compare to a baseline, such as a previous version? Although these metrics can be calculated offline, you need to log the necessary data to use them later."),(0,a.kt)("h3",{id:"fault-tolerance"},"Fault tolerance"),(0,a.kt)("p",null,"Your application may encounter errors such as exceptions in your model inference or business logic code, causing failures and disrupting traffic. Other potential issues could arise from the machine running your application, such as unexpected hardware breakdowns or loss of spot-instances during high-demand periods. One way to mitigate these risks is by increasing redundancy through replica scaling and implementing recovery mechanisms for failed replicas. However, model replicas aren't the only potential points of failure. It's essential to build resilience against various failures that could occur at any point in your stack."),(0,a.kt)("h3",{id:"zero-down-time-upgrade"},"Zero down time upgrade"),(0,a.kt)("p",null,"System upgrades are often necessary but can result in service disruptions if not handled correctly. One way to prevent downtime during upgrades is by implementing a smooth transition process from the old version to the new one. Ideally, the new version of your LLM service is deployed, and traffic gradually shifts from the old to the new version, maintaining a constant QPS throughout the process."),(0,a.kt)("h3",{id:"load-balancing"},"Load balancing"),(0,a.kt)("p",null,"Load balancing, in simple terms, is a technique to distribute work evenly across multiple computers, servers, or other resources to optimize the utilization of the system, maximize throughput, minimize response time, and avoid overload of any single resource. Think of it as a traffic officer directing cars (requests) to different roads (servers) so that no single road becomes too congested."),(0,a.kt)("p",null,"There are several strategies for load balancing. For example, one common method is the ",(0,a.kt)("em",{parentName:"p"},"Round Robin")," strategy, where each request is sent to the next server in line, cycling back to the first when all servers have received a request. This works well when all servers are equally capable. However, if some servers are more powerful than others, you might use a ",(0,a.kt)("em",{parentName:"p"},"Weighted Round Robin")," or ",(0,a.kt)("em",{parentName:"p"},"Least Connections")," strategy, where more requests are sent to the more powerful servers, or to those currently handling the fewest active requests. Let's imagine you're running a LLM chain. If your application becomes popular, you could have hundreds or even thousands of users asking questions at the same time. If one server gets too busy (high load), the load balancer would direct new requests to another server that is less busy. This way, all your users get a timely response and the system remains stable."),(0,a.kt)("h2",{id:"maintaining-cost-efficiency-and-scalability"},"Maintaining Cost-Efficiency and Scalability"),(0,a.kt)("p",null,"Deploying LLM services can be costly, especially when you're handling a large volume of user interactions. Charges by LLM providers are usually based on tokens used, making a chat system inference on these models potentially expensive. However, several strategies can help manage these costs without compromising the quality of the service."),(0,a.kt)("h3",{id:"self-hosting-models"},"Self-hosting models"),(0,a.kt)("p",null,"Several smaller and open-source LLMs are emerging to tackle the issue of reliance on LLM providers. Self-hosting allows you to maintain similar quality to LLM provider models while managing costs. The challenge lies in building a reliable, high-performing LLM serving system on your own machines. "),(0,a.kt)("h3",{id:"resource-management-and-auto-scaling"},"Resource Management and Auto-Scaling"),(0,a.kt)("p",null,"Computational logic within your application requires precise resource allocation. For instance, if part of your traffic is served by an OpenAI endpoint and another part by a self-hosted model, it's crucial to allocate suitable resources for each. Auto-scaling\u2014adjusting resource allocation based on traffic\u2014can significantly impact the cost of running your application. This strategy requires a balance between cost and responsiveness, ensuring neither resource over-provisioning nor compromised application responsiveness."),(0,a.kt)("h3",{id:"utilizing-spot-instances"},"Utilizing Spot Instances"),(0,a.kt)("p",null,"On platforms like AWS, spot instances offer substantial cost savings, typically priced at about a third of on-demand instances. The trade-off is a higher crash rate, necessitating a robust fault-tolerance mechanism for effective use."),(0,a.kt)("h3",{id:"independent-scaling"},"Independent Scaling"),(0,a.kt)("p",null,"When self-hosting your models, you should consider independent scaling. For example, if you have two translation models, one fine-tuned for French and another for Spanish, incoming requests might necessitate different scaling requirements for each."),(0,a.kt)("h3",{id:"batching-requests"},"Batching requests"),(0,a.kt)("p",null,"In the context of Large Language Models, batching requests can enhance efficiency by better utilizing your GPU resources. GPUs are inherently parallel processors, designed to handle multiple tasks simultaneously. If you send individual requests to the model, the GPU might not be fully utilized as it's only working on a single task at a time. On the other hand, by batching requests together, you're allowing the GPU to work on multiple tasks at once, maximizing its utilization and improving inference speed. This not only leads to cost savings but can also improve the overall latency of your LLM service."),(0,a.kt)("p",null,"In summary, managing costs while scaling your LLM services requires a strategic approach. Utilizing self-hosting models, managing resources effectively, employing auto-scaling, using spot instances, independently scaling models, and batching requests are key strategies to consider. Open-source libraries such as Ray Serve and BentoML are designed to deal with these complexities. "),(0,a.kt)("h2",{id:"ensuring-rapid-iteration"},"Ensuring Rapid Iteration"),(0,a.kt)("p",null,"The LLM landscape is evolving at an unprecedented pace, with new libraries and model architectures being introduced constantly. Consequently, it's crucial to avoid tying yourself to a solution specific to one particular framework. This is especially relevant in serving, where changes to your infrastructure can be time-consuming, expensive, and risky. Strive for infrastructure that is not locked into any specific machine learning library or framework, but instead offers a general-purpose, scalable serving layer. Here are some aspects where flexibility plays a key role:"),(0,a.kt)("h3",{id:"model-composition"},"Model composition"),(0,a.kt)("p",null,"Deploying systems like LangChain demands the ability to piece together different models and connect them via logic. Take the example of building a natural language input SQL query engine. Querying an LLM and obtaining the SQL command is only part of the system. You need to extract metadata from the connected database, construct a prompt for the LLM, run the SQL query on an engine, collect and feed back the response to the LLM as the query runs, and present the results to the user. This demonstrates the need to seamlessly integrate various complex components built in Python into a dynamic chain of logical blocks that can be served together."),(0,a.kt)("h2",{id:"cloud-providers"},"Cloud providers"),(0,a.kt)("p",null,"Many hosted solutions are restricted to a single cloud provider, which can limit your options in today's multi-cloud world. Depending on where your other infrastructure components are built, you might prefer to stick with your chosen cloud provider."),(0,a.kt)("h2",{id:"infrastructure-as-code-iac"},"Infrastructure as Code (IaC)"),(0,a.kt)("p",null,"Rapid iteration also involves the ability to recreate your infrastructure quickly and reliably. This is where Infrastructure as Code (IaC) tools like Terraform, CloudFormation, or Kubernetes YAML files come into play. They allow you to define your infrastructure in code files, which can be version controlled and quickly deployed, enabling faster and more reliable iterations."),(0,a.kt)("h2",{id:"cicd"},"CI/CD"),(0,a.kt)("p",null,"In a fast-paced environment, implementing CI/CD pipelines can significantly speed up the iteration process. They help automate the testing and deployment of your LLM applications, reducing the risk of errors and enabling faster feedback and iteration."))}p.isMDXComponent=!0}}]);