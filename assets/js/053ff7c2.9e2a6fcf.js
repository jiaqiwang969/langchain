"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53536],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},17641:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},i="Clarifai",l={unversionedId:"integrations/llms/clarifai",id:"integrations/llms/clarifai",title:"Clarifai",description:"Clarifai is an AI Platform that provides the full AI lifecycle ranging from data exploration, data labeling, model training, evaluation, and inference.",source:"@site/docs/integrations/llms/clarifai.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/clarifai",permalink:"/langchain/docs/integrations/llms/clarifai",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"ChatGLM",permalink:"/langchain/docs/integrations/llms/chatglm"},next:{title:"Cohere",permalink:"/langchain/docs/integrations/llms/cohere"}},p={},s=[],c=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const m={toc:s},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"clarifai"},"Clarifai"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://www.clarifai.com/"},"Clarifai")," is an AI Platform that provides the full AI lifecycle ranging from data exploration, data labeling, model training, evaluation, and inference.")),(0,r.kt)("p",null,"This example goes over how to use LangChain to interact with ",(0,r.kt)("inlineCode",{parentName:"p"},"Clarifai")," ",(0,r.kt)("a",{parentName:"p",href:"https://clarifai.com/explore/models"},"models"),". "),(0,r.kt)("p",null,"To use Clarifai, you must have an account and a Personal Access Token (PAT) key.\n",(0,r.kt)("a",{parentName:"p",href:"https://clarifai.com/settings/security"},"Check here")," to get or create a PAT."),(0,r.kt)("h1",{id:"dependencies"},"Dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Install required dependencies\npip install clarifai\n")),(0,r.kt)("h1",{id:"imports"},"Imports"),(0,r.kt)("p",null,"Here we will be setting the personal access token. You can find your PAT under ",(0,r.kt)("a",{parentName:"p",href:"https://clarifai.com/settings/security"},"settings/security")," in your Clarifai account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Please login and get your API key from  https://clarifai.com/settings/security\nfrom getpass import getpass\n\nCLARIFAI_PAT = getpass()\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"     \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Clarifai", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.clarifai.Clarifai.html", "title": "Clarifai"}]--\x3e\n# Import the required modules\nfrom langchain.llms import Clarifai\nfrom langchain import PromptTemplate, LLMChain\n')),(0,r.kt)("h1",{id:"input"},"Input"),(0,r.kt)("p",null,"Create a prompt template to be used with the LLM Chain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """Question: {question}\n\nAnswer: Let\'s think step by step."""\n\nprompt = PromptTemplate(template=template, input_variables=["question"])\n')),(0,r.kt)("h1",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Setup the user id and app id where the model resides. You can find a list of public models on ",(0,r.kt)("a",{parentName:"p",href:"https://clarifai.com/explore/models"},"https://clarifai.com/explore/models")),(0,r.kt)("p",null,"You will have to also initialize the model id and if needed, the model version id. Some models have many versions, you can choose the one appropriate for your task."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'USER_ID = "openai"\nAPP_ID = "chat-completion"\nMODEL_ID = "GPT-3_5-turbo"\n\n# You can provide a specific model version as the model_version_id arg.\n# MODEL_VERSION_ID = "MODEL_VERSION_ID"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Initialize a Clarifai LLM\nclarifai_llm = Clarifai(\n    pat=CLARIFAI_PAT, user_id=USER_ID, app_id=APP_ID, model_id=MODEL_ID\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Create LLM chain\nllm_chain = LLMChain(prompt=prompt, llm=clarifai_llm)\n")),(0,r.kt)("h1",{id:"run-chain"},"Run Chain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'question = "What NFL team won the Super Bowl in the year Justin Beiber was born?"\n\nllm_chain.run(question)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    'Justin Bieber was born on March 1, 1994. So, we need to figure out the Super Bowl winner for the 1994 season. The NFL season spans two calendar years, so the Super Bowl for the 1994 season would have taken place in early 1995. \\n\\nThe Super Bowl in question is Super Bowl XXIX, which was played on January 29, 1995. The game was won by the San Francisco 49ers, who defeated the San Diego Chargers by a score of 49-26. Therefore, the San Francisco 49ers won the Super Bowl in the year Justin Bieber was born.'\n"))))}h.isMDXComponent=!0}}]);