"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62171],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=i(n),g=o,u=m["".concat(l,".").concat(g)]||m[g]||p[g]||r;return n?a.createElement(u,d(d({ref:t},c),{},{components:n})):a.createElement(u,d({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,d=new Array(r);d[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,d[1]=s;for(var i=2;i<r;i++)d[i]=n[i];return a.createElement.apply(null,d)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},64586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var a=n(87462),o=(n(67294),n(3905));const r={},d="Caching",s={unversionedId:"modules/data_connection/text_embedding/caching_embeddings",id:"modules/data_connection/text_embedding/caching_embeddings",title:"Caching",description:"Embeddings can be stored or temporarily cached to avoid needing to recompute them.",source:"@site/docs/modules/data_connection/text_embedding/caching_embeddings.md",sourceDirName:"modules/data_connection/text_embedding",slug:"/modules/data_connection/text_embedding/caching_embeddings",permalink:"/langchain/docs/modules/data_connection/text_embedding/caching_embeddings",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Text embedding models",permalink:"/langchain/docs/modules/data_connection/text_embedding/"},next:{title:"Vector stores",permalink:"/langchain/docs/modules/data_connection/vectorstores/"}},l={},i=[{value:"Using with a vector store",id:"using-with-a-vector-store",level:2},{value:"In Memory",id:"in-memory",level:2},{value:"File system",id:"file-system",level:2},{value:"Redis Store",id:"redis-store",level:2}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const p={toc:i},g="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"caching"},"Caching"),(0,o.kt)("p",null,"Embeddings can be stored or temporarily cached to avoid needing to recompute them."),(0,o.kt)("p",null,"Caching embeddings can be done using a ",(0,o.kt)("inlineCode",{parentName:"p"},"CacheBackedEmbeddings"),". The cache backed embedder is a wrapper around an embedder that caches\nembeddings in a key-value store. The text is hashed and the hash is used as the key in the cache."),(0,o.kt)("p",null,"The main supported way to initialized a ",(0,o.kt)("inlineCode",{parentName:"p"},"CacheBackedEmbeddings")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"from_bytes_store"),". This takes in the following parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"underlying_embedder: The embedder to use for embedding."),(0,o.kt)("li",{parentName:"ul"},"document_embedding_cache: The cache to use for storing document embeddings."),(0,o.kt)("li",{parentName:"ul"},"namespace: (optional, defaults to ",(0,o.kt)("inlineCode",{parentName:"li"},'""'),") The namespace to use for document cache. This namespace is used to avoid collisions with other caches. For example, set it to the name of the embedding model used.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Attention"),": Be sure to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"namespace")," parameter to avoid collisions of the same text embedded using different embeddings models."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "InMemoryStore", "source": "langchain.storage", "docs": "https://api.python.langchain.com/en/latest/storage/langchain.storage.in_memory.InMemoryStore.html", "title": "Caching"}, {"imported": "LocalFileStore", "source": "langchain.storage", "docs": "https://api.python.langchain.com/en/latest/storage/langchain.storage.file_system.LocalFileStore.html", "title": "Caching"}, {"imported": "RedisStore", "source": "langchain.storage", "docs": "https://api.python.langchain.com/en/latest/storage/langchain.storage.redis.RedisStore.html", "title": "Caching"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Caching"}, {"imported": "CacheBackedEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.cache.CacheBackedEmbeddings.html", "title": "Caching"}]--\x3e\nfrom langchain.storage import InMemoryStore, LocalFileStore, RedisStore\nfrom langchain.embeddings import OpenAIEmbeddings, CacheBackedEmbeddings\n')),(0,o.kt)("h2",{id:"using-with-a-vector-store"},"Using with a vector store"),(0,o.kt)("p",null,"First, let's see an example that uses the local file system for storing embeddings and uses FAISS vector store for retrieval."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Caching"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Caching"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Caching"}, {"imported": "FAISS", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.faiss.FAISS.html", "title": "Caching"}]--\x3e\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import FAISS\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"underlying_embeddings = OpenAIEmbeddings()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'fs = LocalFileStore("./cache/")\n\ncached_embedder = CacheBackedEmbeddings.from_bytes_store(\n    underlying_embeddings, fs, namespace=underlying_embeddings.model\n)\n')),(0,o.kt)("p",null,"The cache is empty prior to embedding:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list(fs.yield_keys())\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    []\n"))),(0,o.kt)("p",null,"Load the document, split it into chunks, embed each chunk and load it into the vector store."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'raw_documents = TextLoader("../state_of_the_union.txt").load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocuments = text_splitter.split_documents(raw_documents)\n')),(0,o.kt)("p",null,"Create the vector store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db = FAISS.from_documents(documents, cached_embedder)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    CPU times: user 608 ms, sys: 58.9 ms, total: 667 ms\n    Wall time: 1.3 s\n"))),(0,o.kt)("p",null,"If we try to create the vector store again, it'll be much faster since it does not need to re-compute any embeddings."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db2 = FAISS.from_documents(documents, cached_embedder)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    CPU times: user 33.6 ms, sys: 3.96 ms, total: 37.6 ms\n    Wall time: 36.8 ms\n"))),(0,o.kt)("p",null,"And here are some of the embeddings that got created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list(fs.yield_keys())[:5]\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ['text-embedding-ada-002614d7cf6-46f1-52fa-9d3a-740c39e7a20e',\n     'text-embedding-ada-0020fc1ede2-407a-5e14-8f8f-5642214263f5',\n     'text-embedding-ada-002e4ad20ef-dfaa-5916-9459-f90c6d8e8159',\n     'text-embedding-ada-002a5ef11e4-0474-5725-8d80-81c91943b37f',\n     'text-embedding-ada-00281426526-23fe-58be-9e84-6c7c72c8ca9a']\n"))),(0,o.kt)("h2",{id:"in-memory"},"In Memory"),(0,o.kt)("p",null,"This section shows how to set up an in memory cache for embeddings. This type of cache is primarily\nuseful for unit tests or prototyping. Do ",(0,o.kt)("strong",{parentName:"p"},"not")," use this cache if you need to actually store the embeddings."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"store = InMemoryStore()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"underlying_embeddings = OpenAIEmbeddings()\nembedder = CacheBackedEmbeddings.from_bytes_store(\n    underlying_embeddings, store, namespace=underlying_embeddings.model\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = embedder.embed_documents(["hello", "goodbye"])\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    CPU times: user 10.9 ms, sys: 916 \xb5s, total: 11.8 ms\n    Wall time: 159 ms\n"))),(0,o.kt)("p",null,"The second time we try to embed the embedding time is only 2 ms because the embeddings are looked up in the cache."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings_from_cache = embedder.embed_documents(["hello", "goodbye"])\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    CPU times: user 1.67 ms, sys: 342 \xb5s, total: 2.01 ms\n    Wall time: 2.01 ms\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"embeddings == embeddings_from_cache\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    True\n"))),(0,o.kt)("h2",{id:"file-system"},"File system"),(0,o.kt)("p",null,"This section covers how to use a file system store."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'fs = LocalFileStore("./test_cache/")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"embedder2 = CacheBackedEmbeddings.from_bytes_store(\n    underlying_embeddings, fs, namespace=underlying_embeddings.model\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = embedder2.embed_documents(["hello", "goodbye"])\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    CPU times: user 6.89 ms, sys: 4.89 ms, total: 11.8 ms\n    Wall time: 184 ms\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = embedder2.embed_documents(["hello", "goodbye"])\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    CPU times: user 0 ns, sys: 3.24 ms, total: 3.24 ms\n    Wall time: 2.84 ms\n"))),(0,o.kt)("p",null,"Here are the embeddings that have been persisted to the directory ",(0,o.kt)("inlineCode",{parentName:"p"},"./test_cache"),". "),(0,o.kt)("p",null,"Notice that the embedder takes a namespace parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list(fs.yield_keys())\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ['text-embedding-ada-002e885db5b-c0bd-5fbc-88b1-4d1da6020aa5',\n     'text-embedding-ada-0026ba52e44-59c9-5cc9-a084-284061b13c80']\n"))),(0,o.kt)("h2",{id:"redis-store"},"Redis Store"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RedisStore", "source": "langchain.storage", "docs": "https://api.python.langchain.com/en/latest/storage/langchain.storage.redis.RedisStore.html", "title": "Caching"}]--\x3e\nfrom langchain.storage import RedisStore\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# For cache isolation can use a separate DB\n# Or additional namepace\nstore = RedisStore(redis_url=\"redis://localhost:6379\", client_kwargs={'db': 2}, namespace='embedding_caches')\n\nunderlying_embeddings = OpenAIEmbeddings()\nembedder = CacheBackedEmbeddings.from_bytes_store(\n    underlying_embeddings, store, namespace=underlying_embeddings.model\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = embedder.embed_documents(["hello", "goodbye"])\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    CPU times: user 3.99 ms, sys: 0 ns, total: 3.99 ms\n    Wall time: 3.5 ms\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = embedder.embed_documents(["hello", "goodbye"])\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    CPU times: user 2.47 ms, sys: 767 \xb5s, total: 3.24 ms\n    Wall time: 2.75 ms\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list(store.yield_keys())\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ['text-embedding-ada-002e885db5b-c0bd-5fbc-88b1-4d1da6020aa5',\n     'text-embedding-ada-0026ba52e44-59c9-5cc9-a084-284061b13c80']\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"list(store.client.scan_iter())\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [b'embedding_caches/text-embedding-ada-002e885db5b-c0bd-5fbc-88b1-4d1da6020aa5',\n     b'embedding_caches/text-embedding-ada-0026ba52e44-59c9-5cc9-a084-284061b13c80']\n"))))}u.isMDXComponent=!0}}]);