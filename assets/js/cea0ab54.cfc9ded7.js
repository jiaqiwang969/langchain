"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98930],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>h});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),c=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),g=r,h=u["".concat(l,".").concat(g)]||u[g]||m[g]||i;return a?t.createElement(h,s(s({ref:n},p),{},{components:a})):t.createElement(h,s({ref:n},p))}));function h(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=g;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},87581:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=a(87462),r=(a(67294),a(3905));const i={},s="Spark SQL",o={unversionedId:"integrations/toolkits/spark_sql",id:"integrations/toolkits/spark_sql",title:"Spark SQL",description:"This notebook shows how to use agents to interact with Spark SQL. Similar to SQL Database Agent, it is designed to address general inquiries about Spark SQL and facilitate error recovery.",source:"@site/docs/integrations/toolkits/spark_sql.md",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/spark_sql",permalink:"/langchain/docs/integrations/toolkits/spark_sql",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Spark Dataframe",permalink:"/langchain/docs/integrations/toolkits/spark"},next:{title:"SQL Database",permalink:"/langchain/docs/integrations/toolkits/sql_database"}},l={},c=[{value:"Initialization",id:"initialization",level:2},{value:"Example: describing a table",id:"example-describing-a-table",level:2},{value:"Example: running queries",id:"example-running-queries",level:2}],p=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const m={toc:c},g="wrapper";function h(e){let{components:n,...a}=e;return(0,r.kt)(g,(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"spark-sql"},"Spark SQL"),(0,r.kt)("p",null,"This notebook shows how to use agents to interact with ",(0,r.kt)("inlineCode",{parentName:"p"},"Spark SQL"),". Similar to ",(0,r.kt)("a",{parentName:"p",href:"https://python.langchain.com/docs/integrations/toolkits/sql_database"},"SQL Database Agent"),", it is designed to address general inquiries about ",(0,r.kt)("inlineCode",{parentName:"p"},"Spark SQL")," and facilitate error recovery."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE: Note that, as this agent is in active development, all answers might not be correct. Additionally, it is not guaranteed that the agent won't perform DML statements on your Spark cluster given certain questions. Be careful running it on sensitive data!")),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_spark_sql_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.spark_sql.base.create_spark_sql_agent.html", "title": "Spark SQL"}, {"imported": "SparkSQLToolkit", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.spark_sql.toolkit.SparkSQLToolkit.html", "title": "Spark SQL"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Spark SQL"}, {"imported": "SparkSQL", "source": "langchain.utilities.spark_sql", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.spark_sql.SparkSQL.html", "title": "Spark SQL"}]--\x3e\nfrom langchain.agents import create_spark_sql_agent\nfrom langchain.agents.agent_toolkits import SparkSQLToolkit\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.utilities.spark_sql import SparkSQL\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pyspark.sql import SparkSession\n\nspark = SparkSession.builder.getOrCreate()\nschema = "langchain_example"\nspark.sql(f"CREATE DATABASE IF NOT EXISTS {schema}")\nspark.sql(f"USE {schema}")\ncsv_file_path = "titanic.csv"\ntable = "titanic"\nspark.read.csv(csv_file_path, header=True, inferSchema=True).write.saveAsTable(table)\nspark.table(table).show()\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    Setting default log level to "WARN".\n    To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n    23/05/18 16:03:10 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n\n\n    +-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+\n    |PassengerId|Survived|Pclass|                Name|   Sex| Age|SibSp|Parch|          Ticket|   Fare|Cabin|Embarked|\n    +-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+\n    |          1|       0|     3|Braund, Mr. Owen ...|  male|22.0|    1|    0|       A/5 21171|   7.25| null|       S|\n    |          2|       1|     1|Cumings, Mrs. Joh...|female|38.0|    1|    0|        PC 17599|71.2833|  C85|       C|\n    |          3|       1|     3|Heikkinen, Miss. ...|female|26.0|    0|    0|STON/O2. 3101282|  7.925| null|       S|\n    |          4|       1|     1|Futrelle, Mrs. Ja...|female|35.0|    1|    0|          113803|   53.1| C123|       S|\n    |          5|       0|     3|Allen, Mr. Willia...|  male|35.0|    0|    0|          373450|   8.05| null|       S|\n    |          6|       0|     3|    Moran, Mr. James|  male|null|    0|    0|          330877| 8.4583| null|       Q|\n    |          7|       0|     1|McCarthy, Mr. Tim...|  male|54.0|    0|    0|           17463|51.8625|  E46|       S|\n    |          8|       0|     3|Palsson, Master. ...|  male| 2.0|    3|    1|          349909| 21.075| null|       S|\n    |          9|       1|     3|Johnson, Mrs. Osc...|female|27.0|    0|    2|          347742|11.1333| null|       S|\n    |         10|       1|     2|Nasser, Mrs. Nich...|female|14.0|    1|    0|          237736|30.0708| null|       C|\n    |         11|       1|     3|Sandstrom, Miss. ...|female| 4.0|    1|    1|         PP 9549|   16.7|   G6|       S|\n    |         12|       1|     1|Bonnell, Miss. El...|female|58.0|    0|    0|          113783|  26.55| C103|       S|\n    |         13|       0|     3|Saundercock, Mr. ...|  male|20.0|    0|    0|       A/5. 2151|   8.05| null|       S|\n    |         14|       0|     3|Andersson, Mr. An...|  male|39.0|    1|    5|          347082| 31.275| null|       S|\n    |         15|       0|     3|Vestrom, Miss. Hu...|female|14.0|    0|    0|          350406| 7.8542| null|       S|\n    |         16|       1|     2|Hewlett, Mrs. (Ma...|female|55.0|    0|    0|          248706|   16.0| null|       S|\n    |         17|       0|     3|Rice, Master. Eugene|  male| 2.0|    4|    1|          382652| 29.125| null|       Q|\n    |         18|       1|     2|Williams, Mr. Cha...|  male|null|    0|    0|          244373|   13.0| null|       S|\n    |         19|       0|     3|Vander Planke, Mr...|female|31.0|    1|    0|          345763|   18.0| null|       S|\n    |         20|       1|     3|Masselmani, Mrs. ...|female|null|    0|    0|            2649|  7.225| null|       C|\n    +-----------+--------+------+--------------------+------+----+-----+-----+----------------+-------+-----+--------+\n    only showing top 20 rows\n    \n'))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Note, you can also connect to Spark via Spark connect. For example:\n# db = SparkSQL.from_uri("sc://localhost:15002", schema=schema)\nspark_sql = SparkSQL(schema=schema)\nllm = ChatOpenAI(temperature=0)\ntoolkit = SparkSQLToolkit(db=spark_sql, llm=llm)\nagent_executor = create_spark_sql_agent(llm=llm, toolkit=toolkit, verbose=True)\n')),(0,r.kt)("h2",{id:"example-describing-a-table"},"Example: describing a table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("Describe the titanic table")\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    Action: list_tables_sql_db\n    Action Input: \n    Observation: titanic\n    Thought:I found the titanic table. Now I need to get the schema and sample rows for the titanic table.\n    Action: schema_sql_db\n    Action Input: titanic\n    Observation: CREATE TABLE langchain_example.titanic (\n      PassengerId INT,\n      Survived INT,\n      Pclass INT,\n      Name STRING,\n      Sex STRING,\n      Age DOUBLE,\n      SibSp INT,\n      Parch INT,\n      Ticket STRING,\n      Fare DOUBLE,\n      Cabin STRING,\n      Embarked STRING)\n    ;\n    \n    /*\n    3 rows from titanic table:\n    PassengerId Survived    Pclass  Name    Sex Age SibSp   Parch   Ticket  Fare    Cabin   Embarked\n    1   0   3   Braund, Mr. Owen Harris male    22.0    1   0   A/5 21171   7.25    None    S\n    2   1   1   Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38.0    1   0   PC 17599    71.2833 C85 C\n    3   1   3   Heikkinen, Miss. Laina  female  26.0    0   0   STON/O2. 3101282    7.925   None    S\n    */\n    Thought:I now know the schema and sample rows for the titanic table.\n    Final Answer: The titanic table has the following columns: PassengerId (INT), Survived (INT), Pclass (INT), Name (STRING), Sex (STRING), Age (DOUBLE), SibSp (INT), Parch (INT), Ticket (STRING), Fare (DOUBLE), Cabin (STRING), and Embarked (STRING). Here are some sample rows from the table: \n    \n    1. PassengerId: 1, Survived: 0, Pclass: 3, Name: Braund, Mr. Owen Harris, Sex: male, Age: 22.0, SibSp: 1, Parch: 0, Ticket: A/5 21171, Fare: 7.25, Cabin: None, Embarked: S\n    2. PassengerId: 2, Survived: 1, Pclass: 1, Name: Cumings, Mrs. John Bradley (Florence Briggs Thayer), Sex: female, Age: 38.0, SibSp: 1, Parch: 0, Ticket: PC 17599, Fare: 71.2833, Cabin: C85, Embarked: C\n    3. PassengerId: 3, Survived: 1, Pclass: 3, Name: Heikkinen, Miss. Laina, Sex: female, Age: 26.0, SibSp: 0, Parch: 0, Ticket: STON/O2. 3101282, Fare: 7.925, Cabin: None, Embarked: S\n    \n    > Finished chain.\n\n\n\n\n\n    'The titanic table has the following columns: PassengerId (INT), Survived (INT), Pclass (INT), Name (STRING), Sex (STRING), Age (DOUBLE), SibSp (INT), Parch (INT), Ticket (STRING), Fare (DOUBLE), Cabin (STRING), and Embarked (STRING). Here are some sample rows from the table: \\n\\n1. PassengerId: 1, Survived: 0, Pclass: 3, Name: Braund, Mr. Owen Harris, Sex: male, Age: 22.0, SibSp: 1, Parch: 0, Ticket: A/5 21171, Fare: 7.25, Cabin: None, Embarked: S\\n2. PassengerId: 2, Survived: 1, Pclass: 1, Name: Cumings, Mrs. John Bradley (Florence Briggs Thayer), Sex: female, Age: 38.0, SibSp: 1, Parch: 0, Ticket: PC 17599, Fare: 71.2833, Cabin: C85, Embarked: C\\n3. PassengerId: 3, Survived: 1, Pclass: 3, Name: Heikkinen, Miss. Laina, Sex: female, Age: 26.0, SibSp: 0, Parch: 0, Ticket: STON/O2. 3101282, Fare: 7.925, Cabin: None, Embarked: S'\n"))),(0,r.kt)("h2",{id:"example-running-queries"},"Example: running queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("whats the square root of the average age?")\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    Action: list_tables_sql_db\n    Action Input: \n    Observation: titanic\n    Thought:I should check the schema of the titanic table to see if there is an age column.\n    Action: schema_sql_db\n    Action Input: titanic\n    Observation: CREATE TABLE langchain_example.titanic (\n      PassengerId INT,\n      Survived INT,\n      Pclass INT,\n      Name STRING,\n      Sex STRING,\n      Age DOUBLE,\n      SibSp INT,\n      Parch INT,\n      Ticket STRING,\n      Fare DOUBLE,\n      Cabin STRING,\n      Embarked STRING)\n    ;\n    \n    /*\n    3 rows from titanic table:\n    PassengerId Survived    Pclass  Name    Sex Age SibSp   Parch   Ticket  Fare    Cabin   Embarked\n    1   0   3   Braund, Mr. Owen Harris male    22.0    1   0   A/5 21171   7.25    None    S\n    2   1   1   Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38.0    1   0   PC 17599    71.2833 C85 C\n    3   1   3   Heikkinen, Miss. Laina  female  26.0    0   0   STON/O2. 3101282    7.925   None    S\n    */\n    Thought:There is an Age column in the titanic table. I should write a query to calculate the average age and then find the square root of the result.\n    Action: query_checker_sql_db\n    Action Input: SELECT SQRT(AVG(Age)) as square_root_of_avg_age FROM titanic\n    Observation: The original query seems to be correct. Here it is again:\n    \n    SELECT SQRT(AVG(Age)) as square_root_of_avg_age FROM titanic\n    Thought:The query is correct, so I can execute it to find the square root of the average age.\n    Action: query_sql_db\n    Action Input: SELECT SQRT(AVG(Age)) as square_root_of_avg_age FROM titanic\n    Observation: [('5.449689683556195',)]\n    Thought:I now know the final answer\n    Final Answer: The square root of the average age is approximately 5.45.\n    \n    > Finished chain.\n\n\n\n\n\n    'The square root of the average age is approximately 5.45.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("What\'s the name of the oldest survived passenger?")\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n    Action: list_tables_sql_db\n    Action Input: \n    Observation: titanic\n    Thought:I should check the schema of the titanic table to see what columns are available.\n    Action: schema_sql_db\n    Action Input: titanic\n    Observation: CREATE TABLE langchain_example.titanic (\n      PassengerId INT,\n      Survived INT,\n      Pclass INT,\n      Name STRING,\n      Sex STRING,\n      Age DOUBLE,\n      SibSp INT,\n      Parch INT,\n      Ticket STRING,\n      Fare DOUBLE,\n      Cabin STRING,\n      Embarked STRING)\n    ;\n    \n    /*\n    3 rows from titanic table:\n    PassengerId Survived    Pclass  Name    Sex Age SibSp   Parch   Ticket  Fare    Cabin   Embarked\n    1   0   3   Braund, Mr. Owen Harris male    22.0    1   0   A/5 21171   7.25    None    S\n    2   1   1   Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38.0    1   0   PC 17599    71.2833 C85 C\n    3   1   3   Heikkinen, Miss. Laina  female  26.0    0   0   STON/O2. 3101282    7.925   None    S\n    */\n    Thought:I can use the titanic table to find the oldest survived passenger. I will query the Name and Age columns, filtering by Survived and ordering by Age in descending order.\n    Action: query_checker_sql_db\n    Action Input: SELECT Name, Age FROM titanic WHERE Survived = 1 ORDER BY Age DESC LIMIT 1\n    Observation: SELECT Name, Age FROM titanic WHERE Survived = 1 ORDER BY Age DESC LIMIT 1\n    Thought:The query is correct. Now I will execute it to find the oldest survived passenger.\n    Action: query_sql_db\n    Action Input: SELECT Name, Age FROM titanic WHERE Survived = 1 ORDER BY Age DESC LIMIT 1\n    Observation: [('Barkworth, Mr. Algernon Henry Wilson', '80.0')]\n    Thought:I now know the final answer.\n    Final Answer: The oldest survived passenger is Barkworth, Mr. Algernon Henry Wilson, who was 80 years old.\n    \n    > Finished chain.\n\n\n\n\n\n    'The oldest survived passenger is Barkworth, Mr. Algernon Henry Wilson, who was 80 years old.'\n"))))}h.isMDXComponent=!0}}]);