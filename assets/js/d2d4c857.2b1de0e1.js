"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[46924],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},27924:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},i="Self-querying with MyScale",s={unversionedId:"modules/data_connection/retrievers/self_query/myscale_self_query",id:"modules/data_connection/retrievers/self_query/myscale_self_query",title:"Self-querying with MyScale",description:"MyScale is an integrated vector database. You can access your database in SQL and also from here, LangChain. MyScale can make a use of various data types and functions for filters. It will boost up your LLM app no matter if you are scaling up your data or expand your system to broader application.",source:"@site/docs/modules/data_connection/retrievers/self_query/myscale_self_query.md",sourceDirName:"modules/data_connection/retrievers/self_query",slug:"/modules/data_connection/retrievers/self_query/myscale_self_query",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/myscale_self_query",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Self-querying with Milvus",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/milvus_self_query"},next:{title:"Self-querying with Pinecone",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/pinecone"}},l={},c=[{value:"Creating a MyScale vector store",id:"creating-a-myscale-vector-store",level:2},{value:"Create some sample data",id:"create-some-sample-data",level:2},{value:"Creating our self-querying retriever",id:"creating-our-self-querying-retriever",level:2},{value:"Testing it out with self-query retriever&#39;s existing functionalities",id:"testing-it-out-with-self-query-retrievers-existing-functionalities",level:2},{value:"Filter k",id:"filter-k",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"self-querying-with-myscale"},"Self-querying with MyScale"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://docs.myscale.com/en/"},"MyScale")," is an integrated vector database. You can access your database in SQL and also from here, LangChain. MyScale can make a use of ",(0,r.kt)("a",{parentName:"p",href:"https://blog.myscale.com/2023/06/06/why-integrated-database-solution-can-boost-your-llm-apps/#filter-on-anything-without-constraints"},"various data types and functions for filters"),". It will boost up your LLM app no matter if you are scaling up your data or expand your system to broader application.")),(0,r.kt)("p",null,"In the notebook we'll demo the ",(0,r.kt)("inlineCode",{parentName:"p"},"SelfQueryRetriever")," wrapped around a MyScale vector store with some extra pieces we contributed to LangChain. In short, it can be condensed into 4 points:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"contain")," comparator to match list of any if there is more than one element matched"),(0,r.kt)("li",{parentName:"ol"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"timestamp")," data type for datetime match (ISO-format, or YYYY-MM-DD)"),(0,r.kt)("li",{parentName:"ol"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"like")," comparator for string pattern search"),(0,r.kt)("li",{parentName:"ol"},"Add arbitrary function capability")),(0,r.kt)("h2",{id:"creating-a-myscale-vector-store"},"Creating a MyScale vector store"),(0,r.kt)("p",null,"MyScale has already been integrated to LangChain for a while. So you can follow ",(0,r.kt)("a",{parentName:"p",href:"/docs/integrations/vectorstores/myscale"},"this notebook")," to create your own vectorstore for a self-query retriever."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," All self-query retrievers requires you to have ",(0,r.kt)("inlineCode",{parentName:"p"},"lark")," installed (",(0,r.kt)("inlineCode",{parentName:"p"},"pip install lark"),"). We use ",(0,r.kt)("inlineCode",{parentName:"p"},"lark")," for grammar definition. Before you proceed to the next step, we also want to remind you that ",(0,r.kt)("inlineCode",{parentName:"p"},"clickhouse-connect")," is also needed to interact with your MyScale backend."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install lark clickhouse-connect\n")),(0,r.kt)("p",null,"In this tutorial we follow other example's setting and use ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAIEmbeddings"),". Remember to get an OpenAI API Key for valid accesss to LLMs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\nos.environ["MYSCALE_HOST"] = getpass.getpass("MyScale URL:")\nos.environ["MYSCALE_PORT"] = getpass.getpass("MyScale Port:")\nos.environ["MYSCALE_USERNAME"] = getpass.getpass("MyScale Username:")\nos.environ["MYSCALE_PASSWORD"] = getpass.getpass("MyScale Password:")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Document", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Self-querying with MyScale"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Self-querying with MyScale"}, {"imported": "MyScale", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.myscale.MyScale.html", "title": "Self-querying with MyScale"}]--\x3e\nfrom langchain.schema import Document\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores import MyScale\n\nembeddings = OpenAIEmbeddings()\n')),(0,r.kt)("h2",{id:"create-some-sample-data"},"Create some sample data"),(0,r.kt)("p",null,"As you can see, the data we created has some differences compared to other self-query retrievers. We replaced the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"year")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," which gives you finer control on timestamps. We also changed the type of the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"gerne")," to a list of strings, where an LLM can use a new ",(0,r.kt)("inlineCode",{parentName:"p"},"contain")," comparator to construct filters. We also provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"like")," comparator and arbitrary function support to filters, which will be introduced in next few cells."),(0,r.kt)("p",null,"Now let's look at the data first."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'docs = [\n    Document(\n        page_content="A bunch of scientists bring back dinosaurs and mayhem breaks loose",\n        metadata={"date": "1993-07-02", "rating": 7.7, "genre": ["science fiction"]},\n    ),\n    Document(\n        page_content="Leo DiCaprio gets lost in a dream within a dream within a dream within a ...",\n        metadata={"date": "2010-12-30", "director": "Christopher Nolan", "rating": 8.2},\n    ),\n    Document(\n        page_content="A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea",\n        metadata={"date": "2006-04-23", "director": "Satoshi Kon", "rating": 8.6},\n    ),\n    Document(\n        page_content="A bunch of normal-sized women are supremely wholesome and some men pine after them",\n        metadata={"date": "2019-08-22", "director": "Greta Gerwig", "rating": 8.3},\n    ),\n    Document(\n        page_content="Toys come alive and have a blast doing so",\n        metadata={"date": "1995-02-11", "genre": ["animated"]},\n    ),\n    Document(\n        page_content="Three men walk into the Zone, three men walk out of the Zone",\n        metadata={\n            "date": "1979-09-10",\n            "rating": 9.9,\n            "director": "Andrei Tarkovsky",\n            "genre": ["science fiction", "adventure"],\n            "rating": 9.9,\n        },\n    ),\n]\nvectorstore = MyScale.from_documents(\n    docs,\n    embeddings,\n)\n')),(0,r.kt)("h2",{id:"creating-our-self-querying-retriever"},"Creating our self-querying retriever"),(0,r.kt)("p",null,"Just like other retrievers... simple and nice."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Self-querying with MyScale"}, {"imported": "SelfQueryRetriever", "source": "langchain.retrievers.self_query.base", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.self_query.base.SelfQueryRetriever.html", "title": "Self-querying with MyScale"}, {"imported": "AttributeInfo", "source": "langchain.chains.query_constructor.base", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.query_constructor.schema.AttributeInfo.html", "title": "Self-querying with MyScale"}]--\x3e\nfrom langchain.llms import OpenAI\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\nfrom langchain.chains.query_constructor.base import AttributeInfo\n\nmetadata_field_info = [\n    AttributeInfo(\n        name="genre",\n        description="The genres of the movie",\n        type="list[string]",\n    ),\n    # If you want to include length of a list, just define it as a new column\n    # This will teach the LLM to use it as a column when constructing filter.\n    AttributeInfo(\n        name="length(genre)",\n        description="The length of genres of the movie",\n        type="integer",\n    ),\n    # Now you can define a column as timestamp. By simply set the type to timestamp.\n    AttributeInfo(\n        name="date",\n        description="The date the movie was released",\n        type="timestamp",\n    ),\n    AttributeInfo(\n        name="director",\n        description="The name of the movie director",\n        type="string",\n    ),\n    AttributeInfo(\n        name="rating", description="A 1-10 rating for the movie", type="float"\n    ),\n]\ndocument_content_description = "Brief summary of a movie"\nllm = OpenAI(temperature=0)\nretriever = SelfQueryRetriever.from_llm(\n    llm, vectorstore, document_content_description, metadata_field_info, verbose=True\n)\n')),(0,r.kt)("h2",{id:"testing-it-out-with-self-query-retrievers-existing-functionalities"},"Testing it out with self-query retriever's existing functionalities"),(0,r.kt)("p",null,"And now we can try actually using our retriever!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a relevant query\nretriever.get_relevant_documents("What are some movies about dinosaurs")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a filter\nretriever.get_relevant_documents("I want to watch a movie rated higher than 8.5")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# This example specifies a query and a filter\nretriever.get_relevant_documents("Has Greta Gerwig directed any movies about women")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# This example specifies a composite filter\nretriever.get_relevant_documents(\n    "What\'s a highly rated (above 8.5) science fiction film?"\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# This example specifies a query and composite filter\nretriever.get_relevant_documents(\n    \"What's a movie after 1990 but before 2005 that's all about toys, and preferably is animated\"\n)\n")),(0,r.kt)("h1",{id:"wait-a-second-what-else"},"Wait a second... what else?"),(0,r.kt)("p",null,"Self-query retriever with MyScale can do more! Let's find out."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# You can use length(genres) to do anything you want\nretriever.get_relevant_documents("What\'s a movie that have more than 1 genres?")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Fine-grained datetime? You got it already.\nretriever.get_relevant_documents("What\'s a movie that release after feb 1995?")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Don't know what your exact filter should be? Use string pattern match!\nretriever.get_relevant_documents(\"What's a movie whose name is like Andrei?\")\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Contain works for lists: so you can match a list with contain comparator!\nretriever.get_relevant_documents(\n    "What\'s a movie who has genres science fiction and adventure?"\n)\n')),(0,r.kt)("h2",{id:"filter-k"},"Filter k"),(0,r.kt)("p",null,"We can also use the self query retriever to specify ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),": the number of documents to fetch."),(0,r.kt)("p",null,"We can do this by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"enable_limit=True")," to the constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"retriever = SelfQueryRetriever.from_llm(\n    llm,\n    vectorstore,\n    document_content_description,\n    metadata_field_info,\n    enable_limit=True,\n    verbose=True,\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a relevant query\nretriever.get_relevant_documents("what are two movies about dinosaurs")\n')))}u.isMDXComponent=!0}}]);