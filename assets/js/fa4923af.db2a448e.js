"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[89967],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>g});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},i=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,g=u["".concat(s,".").concat(d)]||u[d]||c[d]||r;return n?o.createElement(g,p(p({ref:t},i),{},{components:n})):o.createElement(g,p({ref:t},i))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=d;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m[u]="string"==typeof e?e:a,p[1]=m;for(var l=2;l<r;l++)p[l]=n[l];return o.createElement.apply(null,p)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5871:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>y,frontMatter:()=>i,metadata:()=>c,toc:()=>g});var o=n(87462),a=(n(67294),n(3905));const r=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const m={toc:[]},s="wrapper";function l(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can make use of templating by using a ",(0,a.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),". You can build a ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate")," from one or more ",(0,a.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplates"),". You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"format_prompt")," -- this returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"PromptValue"),", which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model."),(0,a.kt)("p",null,"For convenience, there is a ",(0,a.kt)("inlineCode",{parentName:"p"},"from_template")," method defined on the template. If you were to use this template, this is what it would look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import PromptTemplate\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    AIMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\n\ntemplate="You are a helpful assistant that translates {input_language} to {output_language}."\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template="{text}"\nhuman_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])\n\n# get a chat completion from the formatted messages\nchat(chat_prompt.format_prompt(input_language="English", output_language="French", text="I love programming.").to_messages())\n')),(0,a.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'adore la programmation.", additional_kwargs={})\n'))),(0,a.kt)("p",null,"If you wanted to construct the MessagePromptTemplate more directly, you could create a PromptTemplate outside and then pass it in, e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'prompt=PromptTemplate(\n    template="You are a helpful assistant that translates {input_language} to {output_language}.",\n    input_variables=["input_language", "output_language"],\n)\nsystem_message_prompt = SystemMessagePromptTemplate(prompt=prompt)\n')))}l.isMDXComponent=!0;const i={},u="Prompts",c={unversionedId:"modules/model_io/models/chat/prompts",id:"modules/model_io/models/chat/prompts",title:"Prompts",description:"Prompts for chat models are built around messages, instead of just plain text.",source:"@site/docs/modules/model_io/models/chat/prompts.mdx",sourceDirName:"modules/model_io/models/chat",slug:"/modules/model_io/models/chat/prompts",permalink:"/langchain/docs/modules/model_io/models/chat/prompts",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"LLMChain",permalink:"/langchain/docs/modules/model_io/models/chat/llm_chain"},next:{title:"Streaming",permalink:"/langchain/docs/modules/model_io/models/chat/streaming"}},d={},g=[],f={toc:g},h="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,o.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prompts"},"Prompts"),(0,a.kt)("p",null,"Prompts for chat models are built around messages, instead of just plain text."),(0,a.kt)(l,{mdxType:"Prompts"}))}y.isMDXComponent=!0}}]);