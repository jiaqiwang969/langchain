"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[43153],{3905:(e,t,l)=>{l.d(t,{Zo:()=>c,kt:()=>h});var a=l(67294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function o(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function i(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):o(o({},t),e)),l},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var l=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(l),u=n,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return l?a.createElement(h,o(o({ref:t},c),{},{components:l})):a.createElement(h,o({ref:t},c))}));function h(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=l.length,o=new Array(r);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:n,o[1]=i;for(var p=2;p<r;p++)o[p]=l[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,l)}u.displayName="MDXCreateElement"},57442:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=l(87462),n=(l(67294),l(3905));const r={},o="GPT4All",i={unversionedId:"integrations/providers/gpt4all",id:"integrations/providers/gpt4all",title:"GPT4All",description:"This page covers how to use the GPT4All wrapper within LangChain. The tutorial is divided into two parts: installation and setup, followed by usage with an example.",source:"@site/docs/integrations/providers/gpt4all.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/gpt4all",permalink:"/langchain/docs/integrations/providers/gpt4all",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"GooseAI",permalink:"/langchain/docs/integrations/providers/gooseai"},next:{title:"Graphsignal",permalink:"/langchain/docs/integrations/providers/graphsignal"}},s={},p=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Usage",id:"usage",level:2},{value:"GPT4All",id:"gpt4all-1",level:3},{value:"Model File",id:"model-file",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...l}=e;return(0,n.kt)(d,(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"gpt4all"},"GPT4All"),(0,n.kt)("p",null,"This page covers how to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"GPT4All")," wrapper within LangChain. The tutorial is divided into two parts: installation and setup, followed by usage with an example."),(0,n.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Install the Python package with ",(0,n.kt)("inlineCode",{parentName:"li"},"pip install pyllamacpp")),(0,n.kt)("li",{parentName:"ul"},"Download a ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/nomic-ai/pyllamacpp#supported-model"},"GPT4All model")," and place it in your desired directory")),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("h3",{id:"gpt4all-1"},"GPT4All"),(0,n.kt)("p",null,"To use the GPT4All wrapper, you need to provide the path to the pre-trained model file and the model's configuration."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GPT4All", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.gpt4all.GPT4All.html", "title": "GPT4All"}]--\x3e\nfrom langchain.llms import GPT4All\n\n# Instantiate the model. Callbacks support token-wise streaming\nmodel = GPT4All(model="./models/gpt4all-model.bin", n_ctx=512, n_threads=8)\n\n# Generate text\nresponse = model("Once upon a time, ")\n')),(0,n.kt)("p",null,"You can also customize the generation parameters, such as n_predict, temp, top_p, top_k, and others."),(0,n.kt)("p",null,"To stream the model's predictions, add in a CallbackManager."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GPT4All", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.gpt4all.GPT4All.html", "title": "GPT4All"}, {"imported": "StreamingStdOutCallbackHandler", "source": "langchain.callbacks.streaming_stdout", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streaming_stdout.StreamingStdOutCallbackHandler.html", "title": "GPT4All"}, {"imported": "StreamlitCallbackHandler", "source": "langchain.callbacks.streamlit", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streamlit.StreamlitCallbackHandler.html", "title": "GPT4All"}]--\x3e\nfrom langchain.llms import GPT4All\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n\n# There are many CallbackHandlers supported, such as\n# from langchain.callbacks.streamlit import StreamlitCallbackHandler\n\ncallbacks = [StreamingStdOutCallbackHandler()]\nmodel = GPT4All(model="./models/gpt4all-model.bin", n_ctx=512, n_threads=8)\n\n# Generate text. Tokens are streamed through the callback manager.\nmodel("Once upon a time, ", callbacks=callbacks)\n')),(0,n.kt)("h2",{id:"model-file"},"Model File"),(0,n.kt)("p",null,"You can find links to model file downloads in the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/nomic-ai/pyllamacpp"},"pyllamacpp")," repository."),(0,n.kt)("p",null,"For a more detailed walkthrough of this, see ",(0,n.kt)("a",{parentName:"p",href:"/docs/integrations/llms/gpt4all.html"},"this notebook")))}m.isMDXComponent=!0}}]);