"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79073],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=o.createContext({}),l=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(u.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(t),h=r,d=m["".concat(u,".").concat(h)]||m[h]||p[h]||a;return t?o.createElement(d,i(i({ref:n},c),{},{components:t})):o.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=h;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},3469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>m,default:()=>g,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var o=t(87462),r=(t(67294),t(3905));const a=(i="CodeOutputBlock",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var i;const s={toc:[{value:"Using in a chain",id:"using-in-a-chain",level:2}]},u="wrapper";function l(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.memory import ConversationBufferWindowMemory\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'memory = ConversationBufferWindowMemory( k=1)\nmemory.save_context({"input": "hi"}, {"output": "whats up"})\nmemory.save_context({"input": "not much you"}, {"output": "not much"})\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'history': 'Human: not much you\\nAI: not much'}\n"))),(0,r.kt)("p",null,"We can also get the history as a list of messages (this is useful if you are using this with a chat model)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'memory = ConversationBufferWindowMemory( k=1, return_messages=True)\nmemory.save_context({"input": "hi"}, {"output": "whats up"})\nmemory.save_context({"input": "not much you"}, {"output": "not much"})\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'history': [HumanMessage(content='not much you', additional_kwargs={}),\n      AIMessage(content='not much', additional_kwargs={})]}\n"))),(0,r.kt)("h2",{id:"using-in-a-chain"},"Using in a chain"),(0,r.kt)("p",null,"Let's walk through an example, again setting ",(0,r.kt)("inlineCode",{parentName:"p"},"verbose=True")," so we can see the prompt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.llms import OpenAI\nfrom langchain.chains import ConversationChain\nconversation_with_summary = ConversationChain(\n    llm=OpenAI(temperature=0), \n    # We set a low k=2, to only keep the last 2 interactions in memory\n    memory=ConversationBufferWindowMemory(k=2), \n    verbose=True\n)\nconversation_with_summary.predict(input="Hi, what\'s up?")\n')),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n    \n    Current conversation:\n    \n    Human: Hi, what's up?\n    AI:\n    \n    > Finished chain.\n\n\n\n\n\n    \" Hi there! I'm doing great. I'm currently helping a customer with a technical issue. How about you?\"\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'conversation_with_summary.predict(input="What\'s their issues?")\n')),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n    \n    Current conversation:\n    Human: Hi, what's up?\n    AI:  Hi there! I'm doing great. I'm currently helping a customer with a technical issue. How about you?\n    Human: What's their issues?\n    AI:\n    \n    > Finished chain.\n\n\n\n\n\n    \" The customer is having trouble connecting to their Wi-Fi network. I'm helping them troubleshoot the issue and get them connected.\"\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'conversation_with_summary.predict(input="Is it going well?")\n')),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n    \n    Current conversation:\n    Human: Hi, what's up?\n    AI:  Hi there! I'm doing great. I'm currently helping a customer with a technical issue. How about you?\n    Human: What's their issues?\n    AI:  The customer is having trouble connecting to their Wi-Fi network. I'm helping them troubleshoot the issue and get them connected.\n    Human: Is it going well?\n    AI:\n    \n    > Finished chain.\n\n\n\n\n\n    \" Yes, it's going well so far. We've already identified the problem and are now working on a solution.\"\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Notice here that the first interaction does not appear.\nconversation_with_summary.predict(input="What\'s the solution?")\n')),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n    \n    Current conversation:\n    Human: What's their issues?\n    AI:  The customer is having trouble connecting to their Wi-Fi network. I'm helping them troubleshoot the issue and get them connected.\n    Human: Is it going well?\n    AI:  Yes, it's going well so far. We've already identified the problem and are now working on a solution.\n    Human: What's the solution?\n    AI:\n    \n    > Finished chain.\n\n\n\n\n\n    \" The solution is to reset the router and reconfigure the settings. We're currently in the process of doing that.\"\n"))))}l.isMDXComponent=!0;const c={},m="Conversation Buffer Window",p={unversionedId:"modules/memory/types/buffer_window",id:"modules/memory/types/buffer_window",title:"Conversation Buffer Window",description:"ConversationBufferWindowMemory keeps a list of the interactions of the conversation over time. It only uses the last K interactions. This can be useful for keeping a sliding window of the most recent interactions, so the buffer does not get too large.",source:"@site/docs/modules/memory/types/buffer_window.mdx",sourceDirName:"modules/memory/types",slug:"/modules/memory/types/buffer_window",permalink:"/langchain/docs/modules/memory/types/buffer_window",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Conversation Buffer",permalink:"/langchain/docs/modules/memory/types/buffer"},next:{title:"Entity",permalink:"/langchain/docs/modules/memory/types/entity_summary_memory"}},h={},d=[],f={toc:d},y="wrapper";function g(e){let{components:n,...t}=e;return(0,r.kt)(y,(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"conversation-buffer-window"},"Conversation Buffer Window"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ConversationBufferWindowMemory")," keeps a list of the interactions of the conversation over time. It only uses the last K interactions. This can be useful for keeping a sliding window of the most recent interactions, so the buffer does not get too large."),(0,r.kt)("p",null,"Let's first explore the basic functionality of this type of memory."),(0,r.kt)(l,{mdxType:"Example"}))}g.isMDXComponent=!0}}]);