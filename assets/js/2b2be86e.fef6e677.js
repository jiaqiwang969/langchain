"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[55307],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(g,i(i({ref:t},s),{},{components:r})):n.createElement(g,i({ref:t},s))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},74209:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={},i="Metal",l={unversionedId:"integrations/retrievers/metal",id:"integrations/retrievers/metal",title:"Metal",description:"Metal is a managed service for ML Embeddings.",source:"@site/docs/integrations/retrievers/metal.md",sourceDirName:"integrations/retrievers",slug:"/integrations/retrievers/metal",permalink:"/langchain/docs/integrations/retrievers/metal",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"LOTR (Merger Retriever)",permalink:"/langchain/docs/integrations/retrievers/merger_retriever"},next:{title:"Pinecone Hybrid Search",permalink:"/langchain/docs/integrations/retrievers/pinecone_hybrid_search"}},c={},p=[{value:"Ingest Documents",id:"ingest-documents",level:2},{value:"Query",id:"query",level:2}],s=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const m={toc:p},d="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"metal"},"Metal"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/getmetal/metal-python"},"Metal")," is a managed service for ML Embeddings.")),(0,a.kt)("p",null,"This notebook shows how to use ",(0,a.kt)("a",{parentName:"p",href:"https://docs.getmetal.io/introduction"},"Metal's")," retriever."),(0,a.kt)("p",null,"First, you will need to sign up for Metal and get an API key. You can do so ",(0,a.kt)("a",{parentName:"p",href:"https://docs.getmetal.io/misc-create-app"},"here")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# !pip install metal_sdk\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from metal_sdk.metal import Metal\n\nAPI_KEY = ""\nCLIENT_ID = ""\nINDEX_ID = ""\n\nmetal = Metal(API_KEY, CLIENT_ID, INDEX_ID);\n')),(0,a.kt)("h2",{id:"ingest-documents"},"Ingest Documents"),(0,a.kt)("p",null,"You only need to do this if you haven't already set up an index"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'metal.index({"text": "foo1"})\nmetal.index({"text": "foo"})\n')),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    {'data': {'id': '642739aa7559b026b4430e42',\n      'text': 'foo',\n      'createdAt': '2023-03-31T19:51:06.748Z'}}\n"))),(0,a.kt)("h2",{id:"query"},"Query"),(0,a.kt)("p",null,"Now that our index is set up, we can set up a retriever and start querying it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MetalRetriever", "source": "langchain.retrievers", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.metal.MetalRetriever.html", "title": "Metal"}]--\x3e\nfrom langchain.retrievers import MetalRetriever\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'retriever = MetalRetriever(metal, params={"limit": 2})\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'retriever.get_relevant_documents("foo1")\n')),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),\n     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]\n"))))}g.isMDXComponent=!0}}]);