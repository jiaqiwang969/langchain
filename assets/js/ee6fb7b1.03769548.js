"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64773],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=i(n),g=o,f=p["".concat(s,".").concat(g)]||p[g]||m[g]||r;return n?a.createElement(f,c(c({ref:t},u),{},{components:n})):a.createElement(f,c({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,c=new Array(r);c[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,c[1]=l;for(var i=2;i<r;i++)c[i]=n[i];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},77471:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var a=n(87462),o=(n(67294),n(3905));const r={},c="Token counting",l={unversionedId:"modules/callbacks/token_counting",id:"modules/callbacks/token_counting",title:"Token counting",description:"LangChain offers a context manager that allows you to count tokens.",source:"@site/docs/modules/callbacks/token_counting.md",sourceDirName:"modules/callbacks",slug:"/modules/callbacks/token_counting",permalink:"/langchain/docs/modules/callbacks/token_counting",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Tags",permalink:"/langchain/docs/modules/callbacks/tags"},next:{title:"Modules",permalink:"/langchain/docs/modules/"}},s={},i=[],u={toc:i},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"token-counting"},"Token counting"),(0,o.kt)("p",null,"LangChain offers a context manager that allows you to count tokens."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "get_openai_callback", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.get_openai_callback.html", "title": "Token counting"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Token counting"}]--\x3e\nimport asyncio\n\nfrom langchain.callbacks import get_openai_callback\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0)\nwith get_openai_callback() as cb:\n    llm("What is the square root of 4?")\n\ntotal_tokens = cb.total_tokens\nassert total_tokens > 0\n\nwith get_openai_callback() as cb:\n    llm("What is the square root of 4?")\n    llm("What is the square root of 4?")\n\nassert cb.total_tokens == total_tokens * 2\n\n# You can kick off concurrent runs from within the context manager\nwith get_openai_callback() as cb:\n    await asyncio.gather(\n        *[llm.agenerate(["What is the square root of 4?"]) for _ in range(3)]\n    )\n\nassert cb.total_tokens == total_tokens * 3\n\n# The context manager is concurrency safe\ntask = asyncio.create_task(llm.agenerate(["What is the square root of 4?"]))\nwith get_openai_callback() as cb:\n    await llm.agenerate(["What is the square root of 4?"])\n\nawait task\nassert cb.total_tokens == total_tokens\n')))}m.isMDXComponent=!0}}]);