"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[76364],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},33688:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const i={},o="Custom String Evaluator",l={unversionedId:"guides/evaluation/string/custom",id:"guides/evaluation/string/custom",title:"Custom String Evaluator",description:"You can make your own custom string evaluators by inheriting from the StringEvaluator class and implementing the evaluatestrings (and aevaluatestrings for async support) methods.",source:"@site/docs/guides/evaluation/string/custom.md",sourceDirName:"guides/evaluation/string",slug:"/guides/evaluation/string/custom",permalink:"/langchain/docs/guides/evaluation/string/custom",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Criteria Evaluation",permalink:"/langchain/docs/guides/evaluation/string/criteria_eval_chain"},next:{title:"Embedding Distance",permalink:"/langchain/docs/guides/evaluation/string/embedding_distance"}},s={},u=[],p=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const d={toc:u},m="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-string-evaluator"},"Custom String Evaluator"),(0,a.kt)("p",null,"You can make your own custom string evaluators by inheriting from the ",(0,a.kt)("inlineCode",{parentName:"p"},"StringEvaluator")," class and implementing the ",(0,a.kt)("inlineCode",{parentName:"p"},"_evaluate_strings")," (and ",(0,a.kt)("inlineCode",{parentName:"p"},"_aevaluate_strings")," for async support) methods."),(0,a.kt)("p",null,"In this example, you will create a perplexity evaluator using the HuggingFace ",(0,a.kt)("a",{parentName:"p",href:"https://huggingface.co/docs/evaluate/index"},"evaluate")," library.\n",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Perplexity"},"Perplexity")," is a measure of how well the generated text would be predicted by the model used to compute the metric."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# %pip install evaluate > /dev/null\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "StringEvaluator", "source": "langchain.evaluation", "docs": "https://api.python.langchain.com/en/latest/evaluation/langchain.evaluation.schema.StringEvaluator.html", "title": "Custom String Evaluator"}]--\x3e\nfrom typing import Any, Optional\n\nfrom langchain.evaluation import StringEvaluator\nfrom evaluate import load\n\n\nclass PerplexityEvaluator(StringEvaluator):\n    """Evaluate the perplexity of a predicted string."""\n\n    def __init__(self, model_id: str = "gpt2"):\n        self.model_id = model_id\n        self.metric_fn = load(\n            "perplexity", module_type="metric", model_id=self.model_id, pad_token=0\n        )\n\n    def _evaluate_strings(\n        self,\n        *,\n        prediction: str,\n        reference: Optional[str] = None,\n        input: Optional[str] = None,\n        **kwargs: Any,\n    ) -> dict:\n        results = self.metric_fn.compute(\n            predictions=[prediction], model_id=self.model_id\n        )\n        ppl = results["perplexities"][0]\n        return {"score": ppl}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"evaluator = PerplexityEvaluator()\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'evaluator.evaluate_strings(prediction="The rains in Spain fall mainly on the plain.")\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Using pad_token, but it is not set yet.\n\n\n    huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\n    To disable this warning, you can either:\n        - Avoid using `tokenizers` before the fork if possible\n        - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n\n\n\n      0%|          | 0/1 [00:00<?, ?it/s]\n\n\n\n\n\n    {'score': 190.3675537109375}\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# The perplexity is much higher since LangChain was introduced after 'gpt-2' was released and because it is never used in the following context.\nevaluator.evaluate_strings(prediction=\"The rains in Spain fall mainly on LangChain.\")\n")),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Using pad_token, but it is not set yet.\n\n\n\n      0%|          | 0/1 [00:00<?, ?it/s]\n\n\n\n\n\n    {'score': 1982.0709228515625}\n"))))}g.isMDXComponent=!0}}]);