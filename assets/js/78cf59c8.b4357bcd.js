"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[41033],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>u});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,d=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),c=l(t),p=s,u=c["".concat(d,".").concat(p)]||c[p]||m[p]||a;return t?r.createElement(u,o(o({ref:n},g),{},{components:t})):r.createElement(u,o({ref:n},g))}));function u(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=p;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[c]="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8456:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(87462),s=(t(67294),t(3905));const a={},o="Self Hosted Embeddings",i={unversionedId:"integrations/text_embedding/self-hosted",id:"integrations/text_embedding/self-hosted",title:"Self Hosted Embeddings",description:"Let's load the SelfHostedEmbeddings, SelfHostedHuggingFaceEmbeddings, and SelfHostedHuggingFaceInstructEmbeddings classes.",source:"@site/docs/integrations/text_embedding/self-hosted.md",sourceDirName:"integrations/text_embedding",slug:"/integrations/text_embedding/self-hosted",permalink:"/langchain/docs/integrations/text_embedding/self-hosted",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"SageMaker Endpoint Embeddings",permalink:"/langchain/docs/integrations/text_embedding/sagemaker-endpoint"},next:{title:"Sentence Transformers Embeddings",permalink:"/langchain/docs/integrations/text_embedding/sentence_transformers"}},d={},l=[],g={toc:l},c="wrapper";function m(e){let{components:n,...t}=e;return(0,s.kt)(c,(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"self-hosted-embeddings"},"Self Hosted Embeddings"),(0,s.kt)("p",null,"Let's load the SelfHostedEmbeddings, SelfHostedHuggingFaceEmbeddings, and SelfHostedHuggingFaceInstructEmbeddings classes."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SelfHostedEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.self_hosted.SelfHostedEmbeddings.html", "title": "Self Hosted Embeddings"}, {"imported": "SelfHostedHuggingFaceEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.self_hosted_hugging_face.SelfHostedHuggingFaceEmbeddings.html", "title": "Self Hosted Embeddings"}, {"imported": "SelfHostedHuggingFaceInstructEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.self_hosted_hugging_face.SelfHostedHuggingFaceInstructEmbeddings.html", "title": "Self Hosted Embeddings"}]--\x3e\nfrom langchain.embeddings import (\n    SelfHostedEmbeddings,\n    SelfHostedHuggingFaceEmbeddings,\n    SelfHostedHuggingFaceInstructEmbeddings,\n)\nimport runhouse as rh\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# For an on-demand A100 with GCP, Azure, or Lambda\ngpu = rh.cluster(name=\"rh-a10x\", instance_type=\"A100:1\", use_spot=False)\n\n# For an on-demand A10G with AWS (no single A100s on AWS)\n# gpu = rh.cluster(name='rh-a10x', instance_type='g5.2xlarge', provider='aws')\n\n# For an existing cluster\n# gpu = rh.cluster(ips=['<ip of the cluster>'],\n#                  ssh_creds={'ssh_user': '...', 'ssh_private_key':'<path_to_key>'},\n#                  name='my-cluster')\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"embeddings = SelfHostedHuggingFaceEmbeddings(hardware=gpu)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'text = "This is a test document."\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"query_result = embeddings.embed_query(text)\n")),(0,s.kt)("p",null,"And similarly for SelfHostedHuggingFaceInstructEmbeddings:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"embeddings = SelfHostedHuggingFaceInstructEmbeddings(hardware=gpu)\n")),(0,s.kt)("p",null,"Now let's load an embedding model with a custom load function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'def get_pipeline():\n    from transformers import (\n        AutoModelForCausalLM,\n        AutoTokenizer,\n        pipeline,\n    )  # Must be inside the function in notebooks\n\n    model_id = "facebook/bart-base"\n    tokenizer = AutoTokenizer.from_pretrained(model_id)\n    model = AutoModelForCausalLM.from_pretrained(model_id)\n    return pipeline("feature-extraction", model=model, tokenizer=tokenizer)\n\n\ndef inference_fn(pipeline, prompt):\n    # Return last hidden state of the model\n    if isinstance(prompt, list):\n        return [emb[0][-1] for emb in pipeline(prompt)]\n    return pipeline(prompt)[0][-1]\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'embeddings = SelfHostedEmbeddings(\n    model_load_fn=get_pipeline,\n    hardware=gpu,\n    model_reqs=["./", "torch", "transformers"],\n    inference_fn=inference_fn,\n)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"query_result = embeddings.embed_query(text)\n")))}m.isMDXComponent=!0}}]);