"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[26482],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(n),u=o,m=g["".concat(s,".").concat(u)]||g[u]||h[u]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},34806:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},i="Google Serper",l={unversionedId:"integrations/providers/google_serper",id:"integrations/providers/google_serper",title:"Google Serper",description:"This page covers how to use the Serper Google Search API within LangChain. Serper is a low-cost Google Search API that can be used to add answer box, knowledge graph, and organic results data from Google Search.",source:"@site/docs/integrations/providers/google_serper.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/google_serper",permalink:"/langchain/docs/integrations/providers/google_serper",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Google Search",permalink:"/langchain/docs/integrations/providers/google_search"},next:{title:"Google Vertex AI MatchingEngine",permalink:"/langchain/docs/integrations/providers/google_vertex_ai_matchingengine"}},s={},p=[{value:"Setup",id:"setup",level:2},{value:"Wrappers",id:"wrappers",level:2},{value:"Utility",id:"utility",level:3},{value:"Output",id:"output",level:4},{value:"Tool",id:"tool",level:3}],c={toc:p},g="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"google-serper"},"Google Serper"),(0,o.kt)("p",null,"This page covers how to use the ",(0,o.kt)("a",{parentName:"p",href:"https://serper.dev"},"Serper")," Google Search API within LangChain. Serper is a low-cost Google Search API that can be used to add answer box, knowledge graph, and organic results data from Google Search.\nIt is broken into two parts: setup, and then references to the specific Google Serper wrapper."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Go to ",(0,o.kt)("a",{parentName:"li",href:"https://serper.dev"},"serper.dev")," to sign up for a free account"),(0,o.kt)("li",{parentName:"ul"},"Get the api key and set it as an environment variable (",(0,o.kt)("inlineCode",{parentName:"li"},"SERPER_API_KEY"),")")),(0,o.kt)("h2",{id:"wrappers"},"Wrappers"),(0,o.kt)("h3",{id:"utility"},"Utility"),(0,o.kt)("p",null,"There exists a GoogleSerperAPIWrapper utility which wraps this API. To import this utility:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GoogleSerperAPIWrapper", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.google_serper.GoogleSerperAPIWrapper.html", "title": "Google Serper"}]--\x3e\nfrom langchain.utilities import GoogleSerperAPIWrapper\n')),(0,o.kt)("p",null,"You can use it as part of a Self Ask chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GoogleSerperAPIWrapper", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.google_serper.GoogleSerperAPIWrapper.html", "title": "Google Serper"}, {"imported": "OpenAI", "source": "langchain.llms.openai", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Google Serper"}, {"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Google Serper"}, {"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Google Serper"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Google Serper"}]--\x3e\nfrom langchain.utilities import GoogleSerperAPIWrapper\nfrom langchain.llms.openai import OpenAI\nfrom langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\n\nimport os\n\nos.environ["SERPER_API_KEY"] = ""\nos.environ[\'OPENAI_API_KEY\'] = ""\n\nllm = OpenAI(temperature=0)\nsearch = GoogleSerperAPIWrapper()\ntools = [\n    Tool(\n        name="Intermediate Answer",\n        func=search.run,\n        description="useful for when you need to ask with search"\n    )\n]\n\nself_ask_with_search = initialize_agent(tools, llm, agent=AgentType.SELF_ASK_WITH_SEARCH, verbose=True)\nself_ask_with_search.run("What is the hometown of the reigning men\'s U.S. Open champion?")\n')),(0,o.kt)("h4",{id:"output"},"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Entering new AgentExecutor chain...\n Yes.\nFollow up: Who is the reigning men's U.S. Open champion?\nIntermediate answer: Current champions Carlos Alcaraz, 2022 men's singles champion.\nFollow up: Where is Carlos Alcaraz from?\nIntermediate answer: El Palmar, Spain\nSo the final answer is: El Palmar, Spain\n\n> Finished chain.\n\n'El Palmar, Spain'\n")),(0,o.kt)("p",null,"For a more detailed walkthrough of this wrapper, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/integrations/tools/google_serper.html"},"this notebook"),"."),(0,o.kt)("h3",{id:"tool"},"Tool"),(0,o.kt)("p",null,"You can also easily load this wrapper as a Tool (to use with an Agent).\nYou can do this with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "load_tools", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.load_tools.load_tools.html", "title": "Google Serper"}]--\x3e\nfrom langchain.agents import load_tools\ntools = load_tools(["google-serper"])\n')),(0,o.kt)("p",null,"For more information on tools, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/modules/agents/tools/"},"this page"),"."))}h.isMDXComponent=!0}}]);