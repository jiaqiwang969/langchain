"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[23401],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),o=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=o(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=o(a),h=n,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||s;return a?r.createElement(m,i(i({ref:t},p),{},{components:a})):r.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:n,i[1]=c;for(var o=2;o<s;o++)i[o]=a[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},56054:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var r=a(87462),n=(a(67294),a(3905));const s={},i="Elasticsearch",c={unversionedId:"integrations/providers/elasticsearch",id:"integrations/providers/elasticsearch",title:"Elasticsearch",description:"Elasticsearch is a distributed, RESTful search and analytics engine.",source:"@site/docs/integrations/providers/elasticsearch.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/elasticsearch",permalink:"/langchain/docs/integrations/providers/elasticsearch",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"DuckDB",permalink:"/langchain/docs/integrations/providers/duckdb"},next:{title:"Epsilla",permalink:"/langchain/docs/integrations/providers/epsilla"}},l={},o=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Install Elasticsearch on your local machine via docker",id:"install-elasticsearch-on-your-local-machine-via-docker",level:4},{value:"Deploy Elasticsearch on Elastic Cloud",id:"deploy-elasticsearch-on-elastic-cloud",level:4},{value:"Install Client",id:"install-client",level:3},{value:"Vector Store",id:"vector-store",level:2}],p={toc:o},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"elasticsearch"},"Elasticsearch"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("a",{parentName:"p",href:"https://www.elastic.co/elasticsearch/"},"Elasticsearch")," is a distributed, RESTful search and analytics engine.\nIt provides a distributed, multi-tenant-capable full-text search engine with an HTTP web interface and schema-free\nJSON documents.")),(0,n.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,n.kt)("p",null,"There are two ways to get started with Elasticsearch:"),(0,n.kt)("h4",{id:"install-elasticsearch-on-your-local-machine-via-docker"},"Install Elasticsearch on your local machine via docker"),(0,n.kt)("p",null,"Example: Run a single-node Elasticsearch instance with security disabled. This is not recommended for production use."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'    docker run -p 9200:9200 -e "discovery.type=single-node" -e "xpack.security.enabled=false" -e "xpack.security.http.ssl.enabled=false" docker.elastic.co/elasticsearch/elasticsearch:8.9.0\n')),(0,n.kt)("h4",{id:"deploy-elasticsearch-on-elastic-cloud"},"Deploy Elasticsearch on Elastic Cloud"),(0,n.kt)("p",null,"Elastic Cloud is a managed Elasticsearch service. Signup for a ",(0,n.kt)("a",{parentName:"p",href:"https://cloud.elastic.co/registration?storm=langchain-notebook"},"free trial"),"."),(0,n.kt)("h3",{id:"install-client"},"Install Client"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"pip install elasticsearch\n")),(0,n.kt)("h2",{id:"vector-store"},"Vector Store"),(0,n.kt)("p",null,"The vector store is a simple wrapper around Elasticsearch. It provides a simple interface to store and retrieve vectors."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ElasticsearchStore", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.elasticsearch.ElasticsearchStore.html", "title": "Elasticsearch"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Elasticsearch"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Elasticsearch"}]--\x3e\nfrom langchain.vectorstores import ElasticsearchStore\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.text_splitter import CharacterTextSplitter\n\nloader = TextLoader("./state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\ndb = ElasticsearchStore.from_documents(\n    docs, embeddings, es_url="http://localhost:9200", index_name="test-basic",\n)\n\ndb.client.indices.refresh(index="test-basic")\n\nquery = "What did the president say about Ketanji Brown Jackson"\nresults = db.similarity_search(query)\n')))}u.isMDXComponent=!0}}]);