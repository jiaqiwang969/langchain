"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[58956],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,h=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},18282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={},i="DashVector self-querying",s={unversionedId:"modules/data_connection/retrievers/self_query/dashvector",id:"modules/data_connection/retrievers/self_query/dashvector",title:"DashVector self-querying",description:"DashVector is a fully-managed vectorDB service that supports high-dimension dense and sparse vectors, real-time insertion and filtered search. It is built to scale automatically and can adapt to different application requirements.",source:"@site/docs/modules/data_connection/retrievers/self_query/dashvector.md",sourceDirName:"modules/data_connection/retrievers/self_query",slug:"/modules/data_connection/retrievers/self_query/dashvector",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/dashvector",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Chroma self-querying",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/chroma_self_query"},next:{title:"Elasticsearch self-querying",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/elasticsearch_self_query"}},c={},l=[{value:"Create DashVector vectorstore",id:"create-dashvector-vectorstore",level:2},{value:"Create your self-querying retriever",id:"create-your-self-querying-retriever",level:2},{value:"Testing it out",id:"testing-it-out",level:2},{value:"Filter k",id:"filter-k",level:2}],m=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const p={toc:l},u="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dashvector-self-querying"},"DashVector self-querying"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://help.aliyun.com/document_detail/2510225.html"},"DashVector")," is a fully-managed vectorDB service that supports high-dimension dense and sparse vectors, real-time insertion and filtered search. It is built to scale automatically and can adapt to different application requirements.")),(0,a.kt)("p",null,"In this notebook we'll demo the ",(0,a.kt)("inlineCode",{parentName:"p"},"SelfQueryRetriever")," with a ",(0,a.kt)("inlineCode",{parentName:"p"},"DashVector")," vector store."),(0,a.kt)("h2",{id:"create-dashvector-vectorstore"},"Create DashVector vectorstore"),(0,a.kt)("p",null,"First we'll want to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"DashVector")," VectorStore and seed it with some data. We've created a small demo set of documents that contain summaries of movies."),(0,a.kt)("p",null,"To use DashVector, you have to have ",(0,a.kt)("inlineCode",{parentName:"p"},"dashvector")," package installed, and you must have an API key and an Environment. Here are the ",(0,a.kt)("a",{parentName:"p",href:"https://help.aliyun.com/document_detail/2510223.html"},"installation instructions"),"."),(0,a.kt)("p",null,"NOTE: The self-query retriever requires you to have ",(0,a.kt)("inlineCode",{parentName:"p"},"lark")," package installed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# !pip install lark dashvector\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport dashvector\n\nclient = dashvector.Client(api_key=os.environ["DASHVECTOR_API_KEY"])\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Document", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "DashVector self-querying"}, {"imported": "DashScopeEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.dashscope.DashScopeEmbeddings.html", "title": "DashVector self-querying"}, {"imported": "DashVector", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.dashvector.DashVector.html", "title": "DashVector self-querying"}]--\x3e\nfrom langchain.schema import Document\nfrom langchain.embeddings import DashScopeEmbeddings\nfrom langchain.vectorstores import DashVector\n\nembeddings = DashScopeEmbeddings()\n\n# create DashVector collection\nclient.create("langchain-self-retriever-demo", dimension=1536)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'docs = [\n    Document(\n        page_content="A bunch of scientists bring back dinosaurs and mayhem breaks loose",\n        metadata={"year": 1993, "rating": 7.7, "genre": "action"},\n    ),\n    Document(\n        page_content="Leo DiCaprio gets lost in a dream within a dream within a dream within a ...",\n        metadata={"year": 2010, "director": "Christopher Nolan", "rating": 8.2},\n    ),\n    Document(\n        page_content="A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea",\n        metadata={"year": 2006, "director": "Satoshi Kon", "rating": 8.6},\n    ),\n    Document(\n        page_content="A bunch of normal-sized women are supremely wholesome and some men pine after them",\n        metadata={"year": 2019, "director": "Greta Gerwig", "rating": 8.3},\n    ),\n    Document(\n        page_content="Toys come alive and have a blast doing so",\n        metadata={"year": 1995, "genre": "animated"},\n    ),\n    Document(\n        page_content="Three men walk into the Zone, three men walk out of the Zone",\n        metadata={\n            "year": 1979,\n            "director": "Andrei Tarkovsky",\n            "genre": "science fiction",\n            "rating": 9.9,\n        },\n    ),\n]\nvectorstore = DashVector.from_documents(\n    docs, embeddings, collection_name="langchain-self-retriever-demo"\n)\n')),(0,a.kt)("h2",{id:"create-your-self-querying-retriever"},"Create your self-querying retriever"),(0,a.kt)("p",null,"Now we can instantiate our retriever. To do this we'll need to provide some information upfront about the metadata fields that our documents support and a short description of the document contents."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Tongyi", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.tongyi.Tongyi.html", "title": "DashVector self-querying"}, {"imported": "SelfQueryRetriever", "source": "langchain.retrievers.self_query.base", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.self_query.base.SelfQueryRetriever.html", "title": "DashVector self-querying"}, {"imported": "AttributeInfo", "source": "langchain.chains.query_constructor.base", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.query_constructor.schema.AttributeInfo.html", "title": "DashVector self-querying"}]--\x3e\nfrom langchain.llms import Tongyi\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\nfrom langchain.chains.query_constructor.base import AttributeInfo\n\nmetadata_field_info = [\n    AttributeInfo(\n        name="genre",\n        description="The genre of the movie",\n        type="string or list[string]",\n    ),\n    AttributeInfo(\n        name="year",\n        description="The year the movie was released",\n        type="integer",\n    ),\n    AttributeInfo(\n        name="director",\n        description="The name of the movie director",\n        type="string",\n    ),\n    AttributeInfo(\n        name="rating", description="A 1-10 rating for the movie", type="float"\n    ),\n]\ndocument_content_description = "Brief summary of a movie"\nllm = Tongyi(temperature=0)\nretriever = SelfQueryRetriever.from_llm(\n    llm, vectorstore, document_content_description, metadata_field_info, verbose=True\n)\n')),(0,a.kt)("h2",{id:"testing-it-out"},"Testing it out"),(0,a.kt)("p",null,"And now we can try actually using our retriever!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a relevant query\nretriever.get_relevant_documents("What are some movies about dinosaurs")\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query='dinosaurs' filter=None limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'rating': 7.699999809265137, 'genre': 'action'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'genre': 'animated'}),\n     Document(page_content='Leo DiCaprio gets lost in a dream within a dream within a dream within a ...', metadata={'year': 2010, 'director': 'Christopher Nolan', 'rating': 8.199999809265137}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'year': 2006, 'director': 'Satoshi Kon', 'rating': 8.600000381469727})]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a filter\nretriever.get_relevant_documents("I want to watch a movie rated higher than 8.5")\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query=' ' filter=Comparison(comparator=<Comparator.GTE: 'gte'>, attribute='rating', value=8.5) limit=None\n\n\n\n\n\n    [Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'director': 'Andrei Tarkovsky', 'rating': 9.899999618530273, 'genre': 'science fiction'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'year': 2006, 'director': 'Satoshi Kon', 'rating': 8.600000381469727})]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example specifies a query and a filter\nretriever.get_relevant_documents("Has Greta Gerwig directed any movies about women")\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query='Greta Gerwig' filter=Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='director', value='Greta Gerwig') limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of normal-sized women are supremely wholesome and some men pine after them', metadata={'year': 2019, 'director': 'Greta Gerwig', 'rating': 8.300000190734863})]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example specifies a composite filter\nretriever.get_relevant_documents("What\'s a highly rated (above 8.5) science fiction film?")\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query='science fiction' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='genre', value='science fiction'), Comparison(comparator=<Comparator.GT: 'gt'>, attribute='rating', value=8.5)]) limit=None\n\n\n\n\n\n    [Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'director': 'Andrei Tarkovsky', 'rating': 9.899999618530273, 'genre': 'science fiction'})]\n"))),(0,a.kt)("h2",{id:"filter-k"},"Filter k"),(0,a.kt)("p",null,"We can also use the self query retriever to specify ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),": the number of documents to fetch."),(0,a.kt)("p",null,"We can do this by passing ",(0,a.kt)("inlineCode",{parentName:"p"},"enable_limit=True")," to the constructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"retriever = SelfQueryRetriever.from_llm(\n    llm,\n    vectorstore,\n    document_content_description,\n    metadata_field_info,\n    enable_limit=True,\n    verbose=True,\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a relevant query\nretriever.get_relevant_documents("what are two movies about dinosaurs")\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query='dinosaurs' filter=None limit=2\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'rating': 7.699999809265137, 'genre': 'action'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'genre': 'animated'})]\n"))))}h.isMDXComponent=!0}}]);