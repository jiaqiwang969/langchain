"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60462],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=l,u=m["".concat(s,".").concat(d)]||m[d]||h[d]||r;return t?a.createElement(u,o(o({ref:n},c),{},{components:t})):a.createElement(u,o({ref:n},c))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},990:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(87462),l=(t(67294),t(3905));const r={},o="Baseten",i={unversionedId:"integrations/llms/baseten",id:"integrations/llms/baseten",title:"Baseten",description:"Baseten provides all the infrastructure you need to deploy and serve ML models performantly, scalably, and cost-efficiently.",source:"@site/docs/integrations/llms/baseten.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/baseten",permalink:"/langchain/docs/integrations/llms/baseten",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Banana",permalink:"/langchain/docs/integrations/llms/banana"},next:{title:"Beam",permalink:"/langchain/docs/integrations/llms/beam"}},s={},p=[],c={toc:p},m="wrapper";function h(e){let{components:n,...t}=e;return(0,l.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"baseten"},"Baseten"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://baseten.co"},"Baseten")," provides all the infrastructure you need to deploy and serve ML models performantly, scalably, and cost-efficiently."),(0,l.kt)("p",null,"This example demonstrates using Langchain with models deployed on Baseten."),(0,l.kt)("h1",{id:"setup"},"Setup"),(0,l.kt)("p",null,"To run this notebook, you'll need a ",(0,l.kt)("a",{parentName:"p",href:"https://baseten.co"},"Baseten account")," and an ",(0,l.kt)("a",{parentName:"p",href:"https://docs.baseten.co/settings/api-keys"},"API key"),"."),(0,l.kt)("p",null,"You'll also need to install the Baseten Python package:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install baseten\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import baseten\n\nbaseten.login("YOUR_API_KEY")\n')),(0,l.kt)("h1",{id:"single-model-call"},"Single model call"),(0,l.kt)("p",null,"First, you'll need to deploy a model to Baseten."),(0,l.kt)("p",null,"You can deploy foundation models like WizardLM and Alpaca with one click from the ",(0,l.kt)("a",{parentName:"p",href:"https://app.baseten.co/explore/"},"Baseten model library")," or if you have your own model, ",(0,l.kt)("a",{parentName:"p",href:"https://docs.baseten.co/deploying-models/deploy"},"deploy it with this tutorial"),"."),(0,l.kt)("p",null,"In this example, we'll work with WizardLM. ",(0,l.kt)("a",{parentName:"p",href:"https://app.baseten.co/explore/llama"},"Deploy WizardLM here")," and follow along with the deployed ",(0,l.kt)("a",{parentName:"p",href:"https://docs.baseten.co/managing-models/manage"},"model's version ID"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Baseten", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.baseten.Baseten.html", "title": "Baseten"}]--\x3e\nfrom langchain.llms import Baseten\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Load the model\nwizardlm = Baseten(model="MODEL_VERSION_ID", verbose=True)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Prompt the model\n\nwizardlm("What is the difference between a Wizard and a Sorcerer?")\n')),(0,l.kt)("h1",{id:"chained-model-calls"},"Chained model calls"),(0,l.kt)("p",null,"We can chain together multiple calls to one or multiple models, which is the whole point of Langchain!"),(0,l.kt)("p",null,"This example uses WizardLM to plan a meal with an entree, three sides, and an alcoholic and non-alcoholic beverage pairing."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SimpleSequentialChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.sequential.SimpleSequentialChain.html", "title": "Baseten"}]--\x3e\nfrom langchain.chains import SimpleSequentialChain\nfrom langchain import PromptTemplate, LLMChain\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Build the first link in the chain\n\nprompt = PromptTemplate(\n    input_variables=["cuisine"],\n    template="Name a complex entree for a {cuisine} dinner. Respond with just the name of a single dish.",\n)\n\nlink_one = LLMChain(llm=wizardlm, prompt=prompt)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Build the second link in the chain\n\nprompt = PromptTemplate(\n    input_variables=["entree"],\n    template="What are three sides that would go with {entree}. Respond with only a list of the sides.",\n)\n\nlink_two = LLMChain(llm=wizardlm, prompt=prompt)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Build the third link in the chain\n\nprompt = PromptTemplate(\n    input_variables=["sides"],\n    template="What is one alcoholic and one non-alcoholic beverage that would go well with this list of sides: {sides}. Respond with only the names of the beverages.",\n)\n\nlink_three = LLMChain(llm=wizardlm, prompt=prompt)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# Run the full chain!\n\nmenu_maker = SimpleSequentialChain(\n    chains=[link_one, link_two, link_three], verbose=True\n)\nmenu_maker.run("South Indian")\n')))}h.isMDXComponent=!0}}]);