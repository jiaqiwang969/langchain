"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9426],{3905:(e,a,n)=>{n.d(a,{Zo:()=>l,kt:()=>d});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function h(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),c=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):p(p({},a),e)),n},l=function(e){var a=c(e.components);return t.createElement(i.Provider,{value:a},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=h(e,["components","mdxType","originalType","parentName"]),s=c(n),g=r,d=s["".concat(i,".").concat(g)]||s[g]||u[g]||o;return n?t.createElement(d,p(p({ref:a},l),{},{components:n})):t.createElement(d,p({ref:a},l))}));function d(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=g;var h={};for(var i in a)hasOwnProperty.call(a,i)&&(h[i]=a[i]);h.originalType=e,h[s]="string"==typeof e?e:r,p[1]=h;for(var c=2;c<o;c++)p[c]=n[c];return t.createElement.apply(null,p)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},81137:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>h,toc:()=>c});var t=n(87462),r=(n(67294),n(3905));const o={},p="HugeGraph QA Chain",h={unversionedId:"use_cases/more/graph/graph_hugegraph_qa",id:"use_cases/more/graph/graph_hugegraph_qa",title:"HugeGraph QA Chain",description:"This notebook shows how to use LLMs to provide a natural language interface to HugeGraph database.",source:"@site/docs/use_cases/more/graph/graph_hugegraph_qa.md",sourceDirName:"use_cases/more/graph",slug:"/use_cases/more/graph/graph_hugegraph_qa",permalink:"/langchain/docs/use_cases/more/graph/graph_hugegraph_qa",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"FalkorDBQAChain",permalink:"/langchain/docs/use_cases/more/graph/graph_falkordb_qa"},next:{title:"KuzuQAChain",permalink:"/langchain/docs/use_cases/more/graph/graph_kuzu_qa"}},i={},c=[{value:"Creating <code>HugeGraphQAChain</code>",id:"creating-hugegraphqachain",level:2},{value:"Refresh graph schema information",id:"refresh-graph-schema-information",level:2},{value:"Querying the graph",id:"querying-the-graph",level:2}],l=(s="CodeOutputBlock",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var s;const u={toc:c},g="wrapper";function d(e){let{components:a,...n}=e;return(0,r.kt)(g,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hugegraph-qa-chain"},"HugeGraph QA Chain"),(0,r.kt)("p",null,"This notebook shows how to use LLMs to provide a natural language interface to ",(0,r.kt)("a",{parentName:"p",href:"https://hugegraph.apache.org/cn/"},"HugeGraph")," database."),(0,r.kt)("p",null,"You will need to have a running HugeGraph instance.\nYou can run a local docker container by running the executing the following script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker run \\\n    --name=graph \\\n    -itd \\\n    -p 8080:8080 \\\n    hugegraph/hugegraph\n")),(0,r.kt)("p",null,"If we want to connect HugeGraph in the application, we need to install python sdk:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pip3 install hugegraph-python\n")),(0,r.kt)("p",null,"If you are using the docker container, you need to wait a couple of second for the database to start, and then we need create schema and write graph data for the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from hugegraph.connection import PyHugeGraph\n\nclient = PyHugeGraph("localhost", "8080", user="admin", pwd="admin", graph="hugegraph")\n')),(0,r.kt)("p",null,"First, we create the schema for a simple movie database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""schema"""\nschema = client.schema()\nschema.propertyKey("name").asText().ifNotExist().create()\nschema.propertyKey("birthDate").asText().ifNotExist().create()\nschema.vertexLabel("Person").properties(\n    "name", "birthDate"\n).usePrimaryKeyId().primaryKeys("name").ifNotExist().create()\nschema.vertexLabel("Movie").properties("name").usePrimaryKeyId().primaryKeys(\n    "name"\n).ifNotExist().create()\nschema.edgeLabel("ActedIn").sourceLabel("Person").targetLabel(\n    "Movie"\n).ifNotExist().create()\n')),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    \'create EdgeLabel success, Detail: "b\\\'{"id":1,"name":"ActedIn","source_label":"Person","target_label":"Movie","frequency":"SINGLE","sort_keys":[],"nullable_keys":[],"index_labels":[],"properties":[],"status":"CREATED","ttl":0,"enable_label_index":true,"user_data":{"~create_time":"2023-07-04 10:48:47.908"}}\\\'"\'\n'))),(0,r.kt)("p",null,"Then we can insert some data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'"""graph"""\ng = client.graph()\ng.addVertex("Person", {"name": "Al Pacino", "birthDate": "1940-04-25"})\ng.addVertex("Person", {"name": "Robert De Niro", "birthDate": "1943-08-17"})\ng.addVertex("Movie", {"name": "The Godfather"})\ng.addVertex("Movie", {"name": "The Godfather Part II"})\ng.addVertex("Movie", {"name": "The Godfather Coda The Death of Michael Corleone"})\n\ng.addEdge("ActedIn", "1:Al Pacino", "2:The Godfather", {})\ng.addEdge("ActedIn", "1:Al Pacino", "2:The Godfather Part II", {})\ng.addEdge(\n    "ActedIn", "1:Al Pacino", "2:The Godfather Coda The Death of Michael Corleone", {}\n)\ng.addEdge("ActedIn", "1:Robert De Niro", "2:The Godfather Part II", {})\n')),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    1:Robert De Niro--ActedIn--\x3e2:The Godfather Part II\n"))),(0,r.kt)("h2",{id:"creating-hugegraphqachain"},"Creating ",(0,r.kt)("inlineCode",{parentName:"h2"},"HugeGraphQAChain")),(0,r.kt)("p",null,"We can now create the ",(0,r.kt)("inlineCode",{parentName:"p"},"HugeGraph")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"HugeGraphQAChain"),". To create the ",(0,r.kt)("inlineCode",{parentName:"p"},"HugeGraph")," we simply need to pass the database object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"HugeGraph")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "HugeGraph QA Chain"}, {"imported": "HugeGraphQAChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.graph_qa.hugegraph.HugeGraphQAChain.html", "title": "HugeGraph QA Chain"}, {"imported": "HugeGraph", "source": "langchain.graphs", "docs": "https://api.python.langchain.com/en/latest/graphs/langchain.graphs.hugegraph.HugeGraph.html", "title": "HugeGraph QA Chain"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import HugeGraphQAChain\nfrom langchain.graphs import HugeGraph\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'graph = HugeGraph(\n    username="admin",\n    password="admin",\n    address="localhost",\n    port=8080,\n    graph="hugegraph",\n)\n')),(0,r.kt)("h2",{id:"refresh-graph-schema-information"},"Refresh graph schema information"),(0,r.kt)("p",null,"If the schema of database changes, you can refresh the schema information needed to generate Gremlin statements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# graph.refresh_schema()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(graph.get_schema)\n")),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Node properties: [name: Person, primary_keys: ['name'], properties: ['name', 'birthDate'], name: Movie, primary_keys: ['name'], properties: ['name']]\n    Edge properties: [name: ActedIn, properties: []]\n    Relationships: ['Person--ActedIn--\x3eMovie']\n    \n"))),(0,r.kt)("h2",{id:"querying-the-graph"},"Querying the graph"),(0,r.kt)("p",null,"We can now use the graph Gremlin QA chain to ask question of the graph"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = HugeGraphQAChain.from_llm(ChatOpenAI(temperature=0), graph=graph, verbose=True)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Who played in The Godfather?")\n')),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Generated gremlin:\n    g.V().has('Movie', 'name', 'The Godfather').in('ActedIn').valueMap(true)\n    Full Context:\n    [{'id': '1:Al Pacino', 'label': 'Person', 'name': ['Al Pacino'], 'birthDate': ['1940-04-25']}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Al Pacino played in The Godfather.'\n"))))}d.isMDXComponent=!0}}]);