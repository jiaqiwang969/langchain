"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[76571],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=i(a),u=o,g=c["".concat(p,".").concat(u)]||c[u]||h[u]||r;return a?n.createElement(g,l(l({ref:t},m),{},{components:a})):n.createElement(g,l({ref:t},m))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:o,l[1]=s;for(var i=2;i<r;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78537:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var n=a(87462),o=(a(67294),a(3905));const r={},l="Google Cloud Platform Vertex AI PaLM",s={unversionedId:"integrations/chat/google_vertex_ai_palm",id:"integrations/chat/google_vertex_ai_palm",title:"Google Cloud Platform Vertex AI PaLM",description:"Note: This is seperate from the Google PaLM integration. Google has chosen to offer an enterprise version of PaLM through GCP, and this supports the models made available through there.",source:"@site/docs/integrations/chat/google_vertex_ai_palm.md",sourceDirName:"integrations/chat",slug:"/integrations/chat/google_vertex_ai_palm",permalink:"/langchain/docs/integrations/chat/google_vertex_ai_palm",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"ERNIE-Bot Chat",permalink:"/langchain/docs/integrations/chat/ernie"},next:{title:"JinaChat",permalink:"/langchain/docs/integrations/chat/jinachat"}},p={},i=[],m=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const h={toc:i},u="wrapper";function g(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"google-cloud-platform-vertex-ai-palm"},"Google Cloud Platform Vertex AI PaLM"),(0,o.kt)("p",null,"Note: This is seperate from the Google PaLM integration. Google has chosen to offer an enterprise version of PaLM through GCP, and this supports the models made available through there. "),(0,o.kt)("p",null,"By default, Google Cloud ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/vertex-ai/docs/generative-ai/data-governance#foundation_model_development"},"does not use")," Customer Data to train its foundation models as part of Google Cloud`s AI/ML Privacy Commitment. More details about how Google processes data can also be found in ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/terms/data-processing-addendum"},"Google's Customer Data Processing Addendum (CDPA)"),"."),(0,o.kt)("p",null,"To use Vertex AI PaLM you must have the ",(0,o.kt)("inlineCode",{parentName:"p"},"google-cloud-aiplatform")," Python package installed and either:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Have credentials configured for your environment (gcloud, workload identity, etc...)"),(0,o.kt)("li",{parentName:"ul"},"Store the path to a service account JSON file as the GOOGLE_APPLICATION_CREDENTIALS environment variable")),(0,o.kt)("p",null,"This codebase uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"google.auth")," library which first looks for the application credentials variable mentioned above, and then looks for system-level auth."),(0,o.kt)("p",null,"For more information, see: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://cloud.google.com/docs/authentication/application-default-credentials#GAC"},"https://cloud.google.com/docs/authentication/application-default-credentials#GAC")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://googleapis.dev/python/google-auth/latest/reference/google.auth.html#module-google.auth"},"https://googleapis.dev/python/google-auth/latest/reference/google.auth.html#module-google.auth"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#!pip install google-cloud-aiplatform\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatVertexAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.vertexai.ChatVertexAI.html", "title": "Google Cloud Platform Vertex AI PaLM "}, {"imported": "ChatPromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "Google Cloud Platform Vertex AI PaLM "}, {"imported": "SystemMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.SystemMessagePromptTemplate.html", "title": "Google Cloud Platform Vertex AI PaLM "}, {"imported": "HumanMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.HumanMessagePromptTemplate.html", "title": "Google Cloud Platform Vertex AI PaLM "}, {"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "Google Cloud Platform Vertex AI PaLM "}, {"imported": "SystemMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.SystemMessage.html", "title": "Google Cloud Platform Vertex AI PaLM "}]--\x3e\nfrom langchain.chat_models import ChatVertexAI\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\nfrom langchain.schema import HumanMessage, SystemMessage\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chat = ChatVertexAI()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'messages = [\n    SystemMessage(\n        content="You are a helpful assistant that translates English to French."\n    ),\n    HumanMessage(\n        content="Translate this sentence from English to French. I love programming."\n    ),\n]\nchat(messages)\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    AIMessage(content='Sure, here is the translation of the sentence \"I love programming\" from English to French:\\n\\nJ\\'aime programmer.', additional_kwargs={}, example=False)\n"))),(0,o.kt)("p",null,"You can make use of templating by using a ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),". You can build a ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate")," from one or more ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplates"),". You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"format_prompt")," -- this returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptValue"),", which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model."),(0,o.kt)("p",null,"For convenience, there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"from_template")," method exposed on the template. If you were to use this template, this is what it would look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = (\n    "You are a helpful assistant that translates {input_language} to {output_language}."\n)\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template = "{text}"\nhuman_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt = ChatPromptTemplate.from_messages(\n    [system_message_prompt, human_message_prompt]\n)\n\n# get a chat completion from the formatted messages\nchat(\n    chat_prompt.format_prompt(\n        input_language="English", output_language="French", text="I love programming."\n    ).to_messages()\n)\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    AIMessage(content='Sure, here is the translation of \"I love programming\" in French:\\n\\nJ\\'aime programmer.', additional_kwargs={}, example=False)\n"))),(0,o.kt)("p",null,"You can now leverage the Codey API for code chat within Vertex AI. The model name is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"codechat-bison: for code assistance")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat = ChatVertexAI(model_name="codechat-bison")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'messages = [\n    HumanMessage(\n        content="How do I create a python function to identify all prime numbers?"\n    )\n]\nchat(messages)\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content=\'The following Python function can be used to identify all prime numbers up to a given integer:\\n\\n```\\ndef is_prime(n):\\n  """\\n  Determines whether the given integer is prime.\\n\\n  Args:\\n    n: The integer to be tested for primality.\\n\\n  Returns:\\n    True if n is prime, False otherwise.\\n  """\\n\\n  # Check if n is divisible by 2.\\n  if n % 2 == 0:\\n    return False\\n\\n  # Check if n is divisible by any integer from 3 to the square root\', additional_kwargs={}, example=False)\n'))))}g.isMDXComponent=!0}}]);