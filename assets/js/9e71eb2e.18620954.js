"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1019],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),h=r,u=m["".concat(i,".").concat(h)]||m[h]||g[h]||l;return a?n.createElement(u,o(o({ref:t},p),{},{components:a})):n.createElement(u,o({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},86904:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const l={},o="\ud83d\ude85 LiteLLM",s={unversionedId:"integrations/chat/litellm",id:"integrations/chat/litellm",title:"\ud83d\ude85 LiteLLM",description:"LiteLLM is a library that simplifies calling Anthropic, Azure, Huggingface, Replicate, etc.",source:"@site/docs/integrations/chat/litellm.md",sourceDirName:"integrations/chat",slug:"/integrations/chat/litellm",permalink:"/langchain/docs/integrations/chat/litellm",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"JinaChat",permalink:"/langchain/docs/integrations/chat/jinachat"},next:{title:"Llama API",permalink:"/langchain/docs/integrations/chat/llama_api"}},i={},c=[{value:"<code>ChatLiteLLM</code> also supports async and streaming functionality:",id:"chatlitellm-also-supports-async-and-streaming-functionality",level:2}],p=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const g={toc:c},h="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-litellm"},"\ud83d\ude85 LiteLLM"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/BerriAI/litellm"},"LiteLLM")," is a library that simplifies calling Anthropic, Azure, Huggingface, Replicate, etc. "),(0,r.kt)("p",null,"This notebook covers how to get started with using Langchain + the LiteLLM I/O library. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatLiteLLM", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.litellm.ChatLiteLLM.html", "title": "\\ud83d\\ude85 LiteLLM"}, {"imported": "ChatPromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "\\ud83d\\ude85 LiteLLM"}, {"imported": "SystemMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.SystemMessagePromptTemplate.html", "title": "\\ud83d\\ude85 LiteLLM"}, {"imported": "AIMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.AIMessagePromptTemplate.html", "title": "\\ud83d\\ude85 LiteLLM"}, {"imported": "HumanMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.HumanMessagePromptTemplate.html", "title": "\\ud83d\\ude85 LiteLLM"}, {"imported": "AIMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.AIMessage.html", "title": "\\ud83d\\ude85 LiteLLM"}, {"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "\\ud83d\\ude85 LiteLLM"}, {"imported": "SystemMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.SystemMessage.html", "title": "\\ud83d\\ude85 LiteLLM"}]--\x3e\nfrom langchain.chat_models import ChatLiteLLM\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    AIMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\nfrom langchain.schema import AIMessage, HumanMessage, SystemMessage\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chat = ChatLiteLLM(model="gpt-3.5-turbo")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'messages = [\n    HumanMessage(\n        content="Translate this sentence from English to French. I love programming."\n    )\n]\nchat(messages)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    AIMessage(content=" J\'aime la programmation.", additional_kwargs={}, example=False)\n'))),(0,r.kt)("h2",{id:"chatlitellm-also-supports-async-and-streaming-functionality"},(0,r.kt)("inlineCode",{parentName:"h2"},"ChatLiteLLM")," also supports async and streaming functionality:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "CallbackManager", "source": "langchain.callbacks.manager", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.CallbackManager.html", "title": "\\ud83d\\ude85 LiteLLM"}, {"imported": "StreamingStdOutCallbackHandler", "source": "langchain.callbacks.streaming_stdout", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streaming_stdout.StreamingStdOutCallbackHandler.html", "title": "\\ud83d\\ude85 LiteLLM"}]--\x3e\nfrom langchain.callbacks.manager import CallbackManager\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"await chat.agenerate([messages])\n")),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    LLMResult(generations=[[ChatGeneration(text=\" J'aime programmer.\", generation_info=None, message=AIMessage(content=\" J'aime programmer.\", additional_kwargs={}, example=False))]], llm_output={}, run=[RunInfo(run_id=UUID('8cc8fb68-1c35-439c-96a0-695036a93652'))])\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chat = ChatLiteLLM(\n    streaming=True,\n    verbose=True,\n    callback_manager=CallbackManager([StreamingStdOutCallbackHandler()]),\n)\nchat(messages)\n")),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"     J'aime la programmation.\n\n\n\n\n    AIMessage(content=\" J'aime la programmation.\", additional_kwargs={}, example=False)\n"))))}u.isMDXComponent=!0}}]);