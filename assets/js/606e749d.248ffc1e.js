"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[93831],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),h=a,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||o;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},52097:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const o={},i="RePhraseQueryRetriever",s={unversionedId:"integrations/retrievers/re_phrase",id:"integrations/retrievers/re_phrase",title:"RePhraseQueryRetriever",description:"Simple retriever that applies an LLM between the user input and the query pass the to retriever.",source:"@site/docs/integrations/retrievers/re_phrase.md",sourceDirName:"integrations/retrievers",slug:"/integrations/retrievers/re_phrase",permalink:"/langchain/docs/integrations/retrievers/re_phrase",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"PubMed",permalink:"/langchain/docs/integrations/retrievers/pubmed"},next:{title:"SVM",permalink:"/langchain/docs/integrations/retrievers/svm"}},l={},p=[{value:"Using the default prompt",id:"using-the-default-prompt",level:2},{value:"Supply a prompt",id:"supply-a-prompt",level:2}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const u={toc:p},h="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(h,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rephrasequeryretriever"},"RePhraseQueryRetriever"),(0,a.kt)("p",null,"Simple retriever that applies an LLM between the user input and the query pass the to retriever."),(0,a.kt)("p",null,"It can be used to pre-process the user input in any way."),(0,a.kt)("p",null,"The default prompt used in the ",(0,a.kt)("inlineCode",{parentName:"p"},"from_llm")," classmethod:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'DEFAULT_TEMPLATE = """You are an assistant tasked with taking a natural language \\\nquery from a user and converting it into a query for a vectorstore. \\\nIn this process, you strip out information that is not relevant for \\\nthe retrieval task. Here is the user query: {question}"""\n')),(0,a.kt)("p",null,"Create a vectorstore."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "WebBaseLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.web_base.WebBaseLoader.html", "title": "RePhraseQueryRetriever"}, {"imported": "RecursiveCharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.RecursiveCharacterTextSplitter.html", "title": "RePhraseQueryRetriever"}, {"imported": "Chroma", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.chroma.Chroma.html", "title": "RePhraseQueryRetriever"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "RePhraseQueryRetriever"}]--\x3e\nfrom langchain.document_loaders import WebBaseLoader\n\nloader = WebBaseLoader("https://lilianweng.github.io/posts/2023-06-23-agent/")\ndata = loader.load()\n\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=0)\nall_splits = text_splitter.split_documents(data)\n\nfrom langchain.vectorstores import Chroma\nfrom langchain.embeddings import OpenAIEmbeddings\n\nvectorstore = Chroma.from_documents(documents=all_splits, embedding=OpenAIEmbeddings())\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import logging\n\nlogging.basicConfig()\nlogging.getLogger("langchain.retrievers.re_phraser").setLevel(logging.INFO)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "RePhraseQueryRetriever"}, {"imported": "RePhraseQueryRetriever", "source": "langchain.retrievers", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.re_phraser.RePhraseQueryRetriever.html", "title": "RePhraseQueryRetriever"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.retrievers import RePhraseQueryRetriever\n')),(0,a.kt)("h2",{id:"using-the-default-prompt"},"Using the default prompt"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"llm = ChatOpenAI(temperature=0)\nretriever_from_llm = RePhraseQueryRetriever.from_llm(\n    retriever=vectorstore.as_retriever(), llm=llm\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'docs = retriever_from_llm.get_relevant_documents(\n    "Hi I\'m Lance. What are the approaches to Task Decomposition?"\n)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    INFO:langchain.retrievers.re_phraser:Re-phrased question: The user query can be converted into a query for a vectorstore as follows:\n    \n    "approaches to Task Decomposition"\n'))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'docs = retriever_from_llm.get_relevant_documents(\n    "I live in San Francisco. What are the Types of Memory?"\n)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    INFO:langchain.retrievers.re_phraser:Re-phrased question: Query for vectorstore: "Types of Memory"\n'))),(0,a.kt)("h2",{id:"supply-a-prompt"},"Supply a prompt"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "RePhraseQueryRetriever"}]--\x3e\nfrom langchain import LLMChain\nfrom langchain.prompts import PromptTemplate\n\nQUERY_PROMPT = PromptTemplate(\n    input_variables=["question"],\n    template="""You are an assistant tasked with taking a natural languge query from a user\n    and converting it into a query for a vectorstore. In the process, strip out all \n    information that is not relevant for the retrieval task and return a new, simplified\n    question for vectorstore retrieval. The new user query should be in pirate speech.\n    Here is the user query: {question} """,\n)\nllm = ChatOpenAI(temperature=0)\nllm_chain = LLMChain(llm=llm, prompt=QUERY_PROMPT)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"retriever_from_llm_chain = RePhraseQueryRetriever(\n    retriever=vectorstore.as_retriever(), llm_chain=llm_chain\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'docs = retriever_from_llm_chain.get_relevant_documents(\n    "Hi I\'m Lance. What is Maximum Inner Product Search?"\n)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    INFO:langchain.retrievers.re_phraser:Re-phrased question: Ahoy matey! What be Maximum Inner Product Search, ye scurvy dog?\n"))))}d.isMDXComponent=!0}}]);