"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[58510],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},64839:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},i="Airbyte Question Answering",s={unversionedId:"integrations/toolkits/airbyte_structured_qa",id:"integrations/toolkits/airbyte_structured_qa",title:"Airbyte Question Answering",description:"This notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.",source:"@site/docs/integrations/toolkits/airbyte_structured_qa.md",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/airbyte_structured_qa",permalink:"/langchain/docs/integrations/toolkits/airbyte_structured_qa",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"AINetwork",permalink:"/langchain/docs/integrations/toolkits/ainetwork"},next:{title:"Amadeus",permalink:"/langchain/docs/integrations/toolkits/amadeus"}},l={},c=[],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"airbyte-question-answering"},"Airbyte Question Answering"),(0,r.kt)("p",null,"This notebook shows how to do question answering over structured data, in this case using the ",(0,r.kt)("inlineCode",{parentName:"p"},"AirbyteStripeLoader"),"."),(0,r.kt)("p",null,"Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a ",(0,r.kt)("inlineCode",{parentName:"p"},"pandas"),"\xa0dataframe to help with these types of questions. "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Load data from Stripe using Airbyte. user the ",(0,r.kt)("inlineCode",{parentName:"li"},"record_handler"),"\xa0paramater to return a JSON from the data loader.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "AirbyteStripeLoader", "source": "langchain.document_loaders.airbyte", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.airbyte.AirbyteStripeLoader.html", "title": "Airbyte Question Answering"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models.openai", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Airbyte Question Answering"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Airbyte Question Answering"}, {"imported": "create_pandas_dataframe_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.pandas.base.create_pandas_dataframe_agent.html", "title": "Airbyte Question Answering"}]--\x3e\nimport os\nimport pandas as pd\n\nfrom langchain.document_loaders.airbyte import AirbyteStripeLoader\nfrom langchain.chat_models.openai import ChatOpenAI\nfrom langchain.agents import AgentType, create_pandas_dataframe_agent\n\nstream_name = "customers"\nconfig = {\n    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),\n    "account_id": os.getenv("STRIPE_ACCOUNT_D"),\n    "start_date": "2023-01-20T00:00:00Z",\n}\n\ndef handle_record(record: dict, _id: str):\n    return record.data\n\nloader = AirbyteStripeLoader(\n    config=config,\n    record_handler=handle_record,\n    stream_name=stream_name,\n)\ndata = loader.load()\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Pass the data to ",(0,r.kt)("inlineCode",{parentName:"li"},"pandas"),"\xa0dataframe.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df = pd.DataFrame(data)\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Pass the dataframe ",(0,r.kt)("inlineCode",{parentName:"li"},"df")," to the ",(0,r.kt)("inlineCode",{parentName:"li"},"create_pandas_dataframe_agent")," and invoke")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent = create_pandas_dataframe_agent(\n    ChatOpenAI(temperature=0, model="gpt-4"),\n    df,\n    verbose=True,\n    agent_type=AgentType.OPENAI_FUNCTIONS,\n)\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Run the agent")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'output = agent.run("How many rows are there?")\n')))}u.isMDXComponent=!0}}]);