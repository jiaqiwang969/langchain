"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[12864],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=i(a),m=r,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var i=2;i<o;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},63427:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const o={},l="Tags",s={unversionedId:"modules/callbacks/tags",id:"modules/callbacks/tags",title:"Tags",description:'You can add tags to your callbacks by passing a tags argument to the call()/run()/apply() methods. This is useful for filtering your logs, e.g. if you want to log all requests made to a specific LLMChain, you can add a tag, and then filter your logs by that tag. You can pass tags to both constructor and request callbacks, see the examples above for details. These tags are then passed to the tags argument of the "start" callback methods, ie. onllmstart, onchatmodelstart, onchainstart, ontool_start.',source:"@site/docs/modules/callbacks/tags.mdx",sourceDirName:"modules/callbacks",slug:"/modules/callbacks/tags",permalink:"/langchain/docs/modules/callbacks/tags",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Multiple callback handlers",permalink:"/langchain/docs/modules/callbacks/multiple_callbacks"},next:{title:"Token counting",permalink:"/langchain/docs/modules/callbacks/token_counting"}},c={},i=[],u={toc:i},p="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tags"},"Tags"),(0,r.kt)("p",null,"You can add tags to your callbacks by passing a ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"call()"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"run()"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"apply()")," methods. This is useful for filtering your logs, e.g. if you want to log all requests made to a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"LLMChain"),", you can add a tag, and then filter your logs by that tag. You can pass tags to both constructor and request callbacks, see the examples above for details. These tags are then passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"tags"),' argument of the "start" callback methods, ie. ',(0,r.kt)("inlineCode",{parentName:"p"},"on_llm_start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"on_chat_model_start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"on_chain_start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"on_tool_start"),"."))}d.isMDXComponent=!0}}]);