"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4711],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=s,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(87462),s=(n(67294),n(3905));const a={},o="Typesense",i={unversionedId:"integrations/vectorstores/typesense",id:"integrations/vectorstores/typesense",title:"Typesense",description:"Typesense is an open source, in-memory search engine, that you can either self-host or run on Typesense Cloud.",source:"@site/docs/integrations/vectorstores/typesense.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/typesense",permalink:"/langchain/docs/integrations/vectorstores/typesense",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Tigris",permalink:"/langchain/docs/integrations/vectorstores/tigris"},next:{title:"USearch",permalink:"/langchain/docs/integrations/vectorstores/usearch"}},p={},l=[{value:"Similarity Search",id:"similarity-search",level:2},{value:"Typesense as a Retriever",id:"typesense-as-a-retriever",level:2}],c={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"typesense"},"Typesense"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("a",{parentName:"p",href:"https://typesense.org"},"Typesense")," is an open source, in-memory search engine, that you can either ",(0,s.kt)("a",{parentName:"p",href:"https://typesense.org/docs/guide/install-typesense.html#option-2-local-machine-self-hosting"},"self-host")," or run on ",(0,s.kt)("a",{parentName:"p",href:"https://cloud.typesense.org/"},"Typesense Cloud"),"."),(0,s.kt)("p",{parentName:"blockquote"},"Typesense focuses on performance by storing the entire index in RAM (with a backup on disk) and also focuses on providing an out-of-the-box developer experience by simplifying available options and setting good defaults."),(0,s.kt)("p",{parentName:"blockquote"},"It also lets you combine attribute-based filtering together with vector queries, to fetch the most relevant documents.")),(0,s.kt)("p",null,"This notebook shows you how to use Typesense as your VectorStore."),(0,s.kt)("p",null,"Let's first install our dependencies:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pip install typesense openapi-schema-pydantic openai tiktoken\n")),(0,s.kt)("p",null,"We want to use ",(0,s.kt)("inlineCode",{parentName:"p"},"OpenAIEmbeddings")," so we have to get the OpenAI API Key."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Typesense"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Typesense"}, {"imported": "Typesense", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.typesense.Typesense.html", "title": "Typesense"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Typesense"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Typesense\nfrom langchain.document_loaders import TextLoader\n')),(0,s.kt)("p",null,"Let's import our test dataset:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'loader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'docsearch = Typesense.from_documents(\n    docs,\n    embeddings,\n    typesense_client_params={\n        "host": "localhost",  # Use xxx.a1.typesense.net for Typesense Cloud\n        "port": "8108",  # Use 443 for Typesense Cloud\n        "protocol": "http",  # Use https for Typesense Cloud\n        "typesense_api_key": "xyz",\n        "typesense_collection_name": "lang-chain",\n    },\n)\n')),(0,s.kt)("h2",{id:"similarity-search"},"Similarity Search"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\nfound_docs = docsearch.similarity_search(query)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"print(found_docs[0].page_content)\n")),(0,s.kt)("h2",{id:"typesense-as-a-retriever"},"Typesense as a Retriever"),(0,s.kt)("p",null,"Typesense, as all the other vector stores, is a LangChain Retriever, by using cosine similarity."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"retriever = docsearch.as_retriever()\nretriever\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\nretriever.get_relevant_documents(query)[0]\n')))}d.isMDXComponent=!0}}]);