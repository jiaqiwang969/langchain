"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6318],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>h});var o=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},l=Object.keys(t);for(o=0;o<l.length;o++)n=l[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(o=0;o<l.length;o++)n=l[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=o.createContext({}),p=function(t){var e=o.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=p(t.components);return o.createElement(s.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},g=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,s=t.parentName,u=r(t,["components","mdxType","originalType","parentName"]),c=p(n),g=a,h=c["".concat(s,".").concat(g)]||c[g]||m[g]||l;return n?o.createElement(h,i(i({ref:e},u),{},{components:n})):o.createElement(h,i({ref:e},u))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,i=new Array(l);i[0]=g;var r={};for(var s in e)hasOwnProperty.call(e,s)&&(r[s]=e[s]);r.originalType=t,r[c]="string"==typeof t?t:a,i[1]=r;for(var p=2;p<l;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},95196:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const l={},i="Multi-Input Tools",r={unversionedId:"modules/agents/tools/multi_input_tool",id:"modules/agents/tools/multi_input_tool",title:"Multi-Input Tools",description:"This notebook shows how to use a tool that requires multiple inputs with an agent. The recommended way to do so is with the StructuredTool class.",source:"@site/docs/modules/agents/tools/multi_input_tool.md",sourceDirName:"modules/agents/tools",slug:"/modules/agents/tools/multi_input_tool",permalink:"/langchain/docs/modules/agents/tools/multi_input_tool",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Human-in-the-loop Tool Validation",permalink:"/langchain/docs/modules/agents/tools/human_approval"},next:{title:"Tool Input Schema",permalink:"/langchain/docs/modules/agents/tools/tool_input_validation"}},s={},p=[{value:"Multi-Input Tools with a string format",id:"multi-input-tools-with-a-string-format",level:2}],u=(c="CodeOutputBlock",function(t){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)});var c;const m={toc:p},g="wrapper";function h(t){let{components:e,...n}=t;return(0,a.kt)(g,(0,o.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"multi-input-tools"},"Multi-Input Tools"),(0,a.kt)("p",null,"This notebook shows how to use a tool that requires multiple inputs with an agent. The recommended way to do so is with the ",(0,a.kt)("inlineCode",{parentName:"p"},"StructuredTool")," class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nos.environ["LANGCHAIN_TRACING"] = "true"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Multi-Input Tools"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Multi-Input Tools"}]--\x3e\nfrom langchain import OpenAI\nfrom langchain.agents import initialize_agent, AgentType\n\nllm = OpenAI(temperature=0)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "StructuredTool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.StructuredTool.html", "title": "Multi-Input Tools"}]--\x3e\nfrom langchain.tools import StructuredTool\n\n\ndef multiplier(a: float, b: float) -> float:\n    """Multiply the provided floats."""\n    return a * b\n\n\ntool = StructuredTool.from_function(multiplier)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Structured tools are compatible with the STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION agent type.\nagent_executor = initialize_agent(\n    [tool],\n    llm,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent_executor.run("What is 3 times 4")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    \n    Thought: I need to multiply 3 and 4\n    Action:\n    ```\n    {\n      "action": "multiplier",\n      "action_input": {"a": 3, "b": 4}\n    }\n    ```\n    \n    Observation: 12\n    Thought: I know what to respond\n    Action:\n    ```\n    {\n      "action": "Final Answer",\n      "action_input": "3 times 4 is 12"\n    }\n    ```\n    \n    > Finished chain.\n\n\n\n\n\n    \'3 times 4 is 12\'\n'))),(0,a.kt)("h2",{id:"multi-input-tools-with-a-string-format"},"Multi-Input Tools with a string format"),(0,a.kt)("p",null,"An alternative to the structured tool would be to use the regular ",(0,a.kt)("inlineCode",{parentName:"p"},"Tool")," class and accept a single string. The tool would then have to handle the parsing logic to extract the relavent values from the text, which tightly couples the tool representation to the agent prompt. This is still useful if the underlying language model can't reliably generate structured schema. "),(0,a.kt)("p",null,'Let\'s take the multiplication function as an example. In order to use this, we will tell the agent to generate the "Action Input" as a comma-separated list of length two. We will then write a thin wrapper that takes a string, splits it into two around a comma, and passes both parsed sides as integers to the multiplication function.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Multi-Input Tools"}, {"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Multi-Input Tools"}, {"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Multi-Input Tools"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Multi-Input Tools"}]--\x3e\nfrom langchain.llms import OpenAI\nfrom langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\n')),(0,a.kt)("p",null,"Here is the multiplication function, as well as a wrapper to parse a string as input."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def multiplier(a, b):\n    return a * b\n\n\ndef parsing_multiplier(string):\n    a, b = string.split(",")\n    return multiplier(int(a), int(b))\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm = OpenAI(temperature=0)\ntools = [\n    Tool(\n        name="Multiplier",\n        func=parsing_multiplier,\n        description="useful for when you need to multiply two numbers together. The input to this tool should be a comma separated list of numbers of length two, representing the two numbers you want to multiply together. For example, `1,2` would be the input if you wanted to multiply 1 by 2.",\n    )\n]\nmrkl = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'mrkl.run("What is 3 times 4")\n')),(0,a.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new AgentExecutor chain...\n     I need to multiply two numbers\n    Action: Multiplier\n    Action Input: 3,4\n    Observation: 12\n    Thought: I now know the final answer\n    Final Answer: 3 times 4 is 12\n    \n    > Finished chain.\n\n\n\n\n\n    '3 times 4 is 12'\n"))))}h.isMDXComponent=!0}}]);