"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[18440],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58839:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={},i="CnosDB",s={unversionedId:"integrations/providers/cnosdb",id:"integrations/providers/cnosdb",title:"CnosDB",description:"CnosDB is an open source distributed time series database with high performance, high compression rate and high ease of use.",source:"@site/docs/integrations/providers/cnosdb.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/cnosdb",permalink:"/langchain/docs/integrations/providers/cnosdb",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"ClickHouse",permalink:"/langchain/docs/integrations/providers/clickhouse"},next:{title:"Cohere",permalink:"/langchain/docs/integrations/providers/cohere"}},l={},c=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Connecting to CnosDB",id:"connecting-to-cnosdb",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Examples",id:"examples",level:2},{value:"SQL Database Chain",id:"sql-database-chain",level:3},{value:"SQL Database Agent",id:"sql-database-agent",level:3}],p={toc:c},u="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cnosdb"},"CnosDB"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/cnosdb/cnosdb"},"CnosDB")," is an open source distributed time series database with high performance, high compression rate and high ease of use.")),(0,o.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"pip install cnos-connector\n")),(0,o.kt)("h2",{id:"connecting-to-cnosdb"},"Connecting to CnosDB"),(0,o.kt)("p",null,"You can connect to CnosDB using the ",(0,o.kt)("inlineCode",{parentName:"p"},"SQLDatabase.from_cnosdb()")," method."),(0,o.kt)("h3",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def SQLDatabase.from_cnosdb(url: str = "127.0.0.1:8902",\n                              user: str = "root",\n                              password: str = "",\n                              tenant: str = "cnosdb",\n                              database: str = "public")\n')),(0,o.kt)("p",null,"Args:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'url (str): The HTTP connection host name and port number of the CnosDB\nservice, excluding "http://" or "https://", with a default value\nof "127.0.0.1:8902".'),(0,o.kt)("li",{parentName:"ol"},'user (str): The username used to connect to the CnosDB service, with a\ndefault value of "root".'),(0,o.kt)("li",{parentName:"ol"},'password (str): The password of the user connecting to the CnosDB service,\nwith a default value of "".'),(0,o.kt)("li",{parentName:"ol"},'tenant (str): The name of the tenant used to connect to the CnosDB service,\nwith a default value of "cnosdb".'),(0,o.kt)("li",{parentName:"ol"},"database (str): The name of the database in the CnosDB tenant.")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Connecting to CnosDB with SQLDatabase Wrapper\nfrom langchain import SQLDatabase\n\ndb = SQLDatabase.from_cnosdb()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "CnosDB"}]--\x3e\n# Creating a OpenAI Chat LLM Wrapper\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI(temperature=0, model_name="gpt-3.5-turbo")\n')),(0,o.kt)("h3",{id:"sql-database-chain"},"SQL Database Chain"),(0,o.kt)("p",null,"This example demonstrates the use of the SQL Chain for answering a question over a CnosDB."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import SQLDatabaseChain\n\ndb_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True)\n\ndb_chain.run(\n    "What is the average temperature of air at station XiaoMaiDao between October 19, 2022 and Occtober 20, 2022?"\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"> Entering new  chain...\nWhat is the average temperature of air at station XiaoMaiDao between October 19, 2022 and Occtober 20, 2022?\nSQLQuery:SELECT AVG(temperature) FROM air WHERE station = 'XiaoMaiDao' AND time >= '2022-10-19' AND time < '2022-10-20'\nSQLResult: [(68.0,)]\nAnswer:The average temperature of air at station XiaoMaiDao between October 19, 2022 and October 20, 2022 is 68.0.\n> Finished chain.\n")),(0,o.kt)("h3",{id:"sql-database-agent"},"SQL Database Agent"),(0,o.kt)("p",null,"This example demonstrates the use of the SQL Database Agent for answering questions over a CnosDB."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_sql_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.base.create_sql_agent.html", "title": "CnosDB"}, {"imported": "SQLDatabaseToolkit", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.sql.toolkit.SQLDatabaseToolkit.html", "title": "CnosDB"}]--\x3e\nfrom langchain.agents import create_sql_agent\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\n\ntoolkit = SQLDatabaseToolkit(db=db, llm=llm)\nagent = create_sql_agent(llm=llm, toolkit=toolkit, verbose=True)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'agent.run(\n    "What is the average temperature of air at station XiaoMaiDao between October 19, 2022 and Occtober 20, 2022?"\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'> Entering new  chain...\nAction: sql_db_list_tables\nAction Input: ""\nObservation: air\nThought:The "air" table seems relevant to the question. I should query the schema of the "air" table to see what columns are available.\nAction: sql_db_schema\nAction Input: "air"\nObservation:\nCREATE TABLE air (\n    pressure FLOAT,\n    station STRING,\n    temperature FLOAT,\n    time TIMESTAMP,\n    visibility FLOAT\n)\n\n/*\n3 rows from air table:\npressure    station temperature time    visibility\n75.0    XiaoMaiDao  67.0    2022-10-19T03:40:00 54.0\n77.0    XiaoMaiDao  69.0    2022-10-19T04:40:00 56.0\n76.0    XiaoMaiDao  68.0    2022-10-19T05:40:00 55.0\n*/\nThought:The "temperature" column in the "air" table is relevant to the question. I can query the average temperature between the specified dates.\nAction: sql_db_query\nAction Input: "SELECT AVG(temperature) FROM air WHERE station = \'XiaoMaiDao\' AND time >= \'2022-10-19\' AND time <= \'2022-10-20\'"\nObservation: [(68.0,)]\nThought:The average temperature of air at station XiaoMaiDao between October 19, 2022 and October 20, 2022 is 68.0.\nFinal Answer: 68.0\n\n> Finished chain.\n')))}h.isMDXComponent=!0}}]);