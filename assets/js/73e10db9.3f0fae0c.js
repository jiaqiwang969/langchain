"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[10593],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(a),d=r,h=p["".concat(l,".").concat(d)]||p[d]||u[d]||o;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var m=2;m<o;m++)s[m]=a[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},35609:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const o={},s="Zep",i={unversionedId:"integrations/retrievers/zep_memorystore",id:"integrations/retrievers/zep_memorystore",title:"Zep",description:"Retriever Example for Zep - A long-term memory store for LLM applications.",source:"@site/docs/integrations/retrievers/zep_memorystore.md",sourceDirName:"integrations/retrievers",slug:"/integrations/retrievers/zep_memorystore",permalink:"/langchain/docs/integrations/retrievers/zep_memorystore",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Wikipedia",permalink:"/langchain/docs/integrations/retrievers/wikipedia"},next:{title:"Text embedding models",permalink:"/langchain/docs/integrations/text_embedding/"}},l={},m=[{value:"Retriever Example for Zep - A long-term memory store for LLM applications.",id:"retriever-example-for-zep---a-long-term-memory-store-for-llm-applications",level:2},{value:"More on Zep:",id:"more-on-zep",level:3},{value:"Retriever Example",id:"retriever-example",level:2},{value:"Initialize the Zep Chat Message History Class and add a chat message history to the memory store",id:"initialize-the-zep-chat-message-history-class-and-add-a-chat-message-history-to-the-memory-store",level:3},{value:"Use the Zep Retriever to vector search over the Zep memory",id:"use-the-zep-retriever-to-vector-search-over-the-zep-memory",level:3}],c=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const u={toc:m},d="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"zep"},"Zep"),(0,r.kt)("h2",{id:"retriever-example-for-zep---a-long-term-memory-store-for-llm-applications"},"Retriever Example for ",(0,r.kt)("a",{parentName:"h2",href:"https://docs.getzep.com/"},"Zep")," - A long-term memory store for LLM applications."),(0,r.kt)("h3",{id:"more-on-zep"},"More on Zep:"),(0,r.kt)("p",null,"Zep stores, summarizes, embeds, indexes, and enriches conversational AI chat histories, and exposes them via simple, low-latency APIs."),(0,r.kt)("p",null,"Key Features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fast!")," Zep\u2019s async extractors operate independently of the your chat loop, ensuring a snappy user experience."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Long-term memory persistence"),", with access to historical messages irrespective of your summarization strategy."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Auto-summarization")," of memory messages based on a configurable message window. A series of summaries are stored, providing flexibility for future summarization strategies."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Hybrid search")," over memories and metadata, with messages automatically embedded on creation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Entity Extractor")," that automatically extracts named entities from messages and stores them in the message metadata."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Auto-token counting")," of memories and summaries, allowing finer-grained control over prompt assembly."),(0,r.kt)("li",{parentName:"ul"},"Python and JavaScript SDKs.")),(0,r.kt)("p",null,"Zep project: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/getzep/zep"},"https://github.com/getzep/zep"),"\nDocs: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.getzep.com/"},"https://docs.getzep.com/")),(0,r.kt)("h2",{id:"retriever-example"},"Retriever Example"),(0,r.kt)("p",null,"This notebook demonstrates how to search historical chat message histories using the ",(0,r.kt)("a",{parentName:"p",href:"https://getzep.github.io/"},"Zep Long-term Memory Store"),"."),(0,r.kt)("p",null,"We'll demonstrate:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Adding conversation history to the Zep memory store."),(0,r.kt)("li",{parentName:"ol"},"Vector search over the conversation history.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ZepMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.zep_memory.ZepMemory.html", "title": "Zep"}, {"imported": "CombinedMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.combined.CombinedMemory.html", "title": "Zep"}, {"imported": "VectorStoreRetrieverMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.vectorstore.VectorStoreRetrieverMemory.html", "title": "Zep"}, {"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "Zep"}, {"imported": "AIMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.AIMessage.html", "title": "Zep"}]--\x3e\nimport getpass\nimport time\nfrom uuid import uuid4\n\nfrom langchain.memory import ZepMemory, CombinedMemory, VectorStoreRetrieverMemory\nfrom langchain.schema import HumanMessage, AIMessage\n\n# Set this to your Zep server URL\nZEP_API_URL = "http://localhost:8000"\n')),(0,r.kt)("h3",{id:"initialize-the-zep-chat-message-history-class-and-add-a-chat-message-history-to-the-memory-store"},"Initialize the Zep Chat Message History Class and add a chat message history to the memory store"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," Unlike other Retrievers, the content returned by the Zep Retriever is session/user specific. A ",(0,r.kt)("inlineCode",{parentName:"p"},"session_id")," is required when instantiating the Retriever."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Provide your Zep API key. Note that this is optional. See https://docs.getzep.com/deployment/auth\nAUTHENTICATE = False\n\nzep_api_key = None\nif AUTHENTICATE:\n    zep_api_key = getpass.getpass()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"session_id = str(uuid4())  # This is a unique identifier for the user/session\n\n# Initialize the Zep Memory Class\nzep_memory = ZepMemory(\n    session_id=session_id, url=ZEP_API_URL, api_key=zep_api_key\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Preload some messages into the memory. The default message window is 12 messages. We want to push beyond this to demonstrate auto-summarization.\ntest_history = [\n    {"role": "human", "content": "Who was Octavia Butler?"},\n    {\n        "role": "ai",\n        "content": (\n            "Octavia Estelle Butler (June 22, 1947 \u2013 February 24, 2006) was an American"\n            " science fiction author."\n        ),\n    },\n    {"role": "human", "content": "Which books of hers were made into movies?"},\n    {\n        "role": "ai",\n        "content": (\n            "The most well-known adaptation of Octavia Butler\'s work is the FX series"\n            " Kindred, based on her novel of the same name."\n        ),\n    },\n    {"role": "human", "content": "Who were her contemporaries?"},\n    {\n        "role": "ai",\n        "content": (\n            "Octavia Butler\'s contemporaries included Ursula K. Le Guin, Samuel R."\n            " Delany, and Joanna Russ."\n        ),\n    },\n    {"role": "human", "content": "What awards did she win?"},\n    {\n        "role": "ai",\n        "content": (\n            "Octavia Butler won the Hugo Award, the Nebula Award, and the MacArthur"\n            " Fellowship."\n        ),\n    },\n    {\n        "role": "human",\n        "content": "Which other women sci-fi writers might I want to read?",\n    },\n    {\n        "role": "ai",\n        "content": "You might want to read Ursula K. Le Guin or Joanna Russ.",\n    },\n    {\n        "role": "human",\n        "content": (\n            "Write a short synopsis of Butler\'s book, Parable of the Sower. What is it"\n            " about?"\n        ),\n    },\n    {\n        "role": "ai",\n        "content": (\n            "Parable of the Sower is a science fiction novel by Octavia Butler,"\n            " published in 1993. It follows the story of Lauren Olamina, a young woman"\n            " living in a dystopian future where society has collapsed due to"\n            " environmental disasters, poverty, and violence."\n        ),\n    },\n]\n\nfor msg in test_history:\n    zep_memory.chat_memory.add_message(\n        HumanMessage(content=msg["content"])\n        if msg["role"] == "human"\n        else AIMessage(content=msg["content"])\n    )\n    \ntime.sleep(2)  # Wait for the messages to be embedded\n')),(0,r.kt)("h3",{id:"use-the-zep-retriever-to-vector-search-over-the-zep-memory"},"Use the Zep Retriever to vector search over the Zep memory"),(0,r.kt)("p",null,"Zep provides native vector search over historical conversation memory. Embedding happens automatically."),(0,r.kt)("p",null,"NOTE: Embedding of messages occurs asynchronously, so the first query may not return results. Subsequent queries will return results as the embeddings are generated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ZepRetriever", "source": "langchain.retrievers", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.zep.ZepRetriever.html", "title": "Zep"}]--\x3e\nfrom langchain.retrievers import ZepRetriever\n\nzep_retriever = ZepRetriever(\n    session_id=session_id,  # Ensure that you provide the session_id when instantiating the Retriever\n    url=ZEP_API_URL,\n    top_k=5,\n    api_key=zep_api_key,\n)\n\nawait zep_retriever.aget_relevant_documents("Who wrote Parable of the Sower?")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content='Who was Octavia Butler?', metadata={'score': 0.7758688965570713, 'uuid': 'b3322d28-f589-48c7-9daf-5eb092d65976', 'created_at': '2023-08-11T20:31:12.3856Z', 'role': 'human', 'metadata': {'system': {'entities': [{'Label': 'PERSON', 'Matches': [{'End': 22, 'Start': 8, 'Text': 'Octavia Butler'}], 'Name': 'Octavia Butler'}]}}, 'token_count': 8}),\n     Document(page_content=\"Octavia Butler's contemporaries included Ursula K. Le Guin, Samuel R. Delany, and Joanna Russ.\", metadata={'score': 0.7602672137411663, 'uuid': '756b7136-0b4c-4664-ad33-c4431670356c', 'created_at': '2023-08-11T20:31:12.420717Z', 'role': 'ai', 'metadata': {'system': {'entities': [{'Label': 'PERSON', 'Matches': [{'End': 16, 'Start': 0, 'Text': \"Octavia Butler's\"}], 'Name': \"Octavia Butler's\"}, {'Label': 'ORG', 'Matches': [{'End': 58, 'Start': 41, 'Text': 'Ursula K. Le Guin'}], 'Name': 'Ursula K. Le Guin'}, {'Label': 'PERSON', 'Matches': [{'End': 76, 'Start': 60, 'Text': 'Samuel R. Delany'}], 'Name': 'Samuel R. Delany'}, {'Label': 'PERSON', 'Matches': [{'End': 93, 'Start': 82, 'Text': 'Joanna Russ'}], 'Name': 'Joanna Russ'}]}}, 'token_count': 27}),\n     Document(page_content='You might want to read Ursula K. Le Guin or Joanna Russ.', metadata={'score': 0.7596040989115522, 'uuid': '166d9556-2d48-4237-8a84-5d8a1024d5f4', 'created_at': '2023-08-11T20:31:12.434522Z', 'role': 'ai', 'metadata': {'system': {'entities': [{'Label': 'ORG', 'Matches': [{'End': 40, 'Start': 23, 'Text': 'Ursula K. Le Guin'}], 'Name': 'Ursula K. Le Guin'}, {'Label': 'PERSON', 'Matches': [{'End': 55, 'Start': 44, 'Text': 'Joanna Russ'}], 'Name': 'Joanna Russ'}]}}, 'token_count': 18}),\n     Document(page_content='Who were her contemporaries?', metadata={'score': 0.7575531381951208, 'uuid': 'c6a16691-4012-439f-b223-84fd4e79c4cf', 'created_at': '2023-08-11T20:31:12.410336Z', 'role': 'human', 'token_count': 8}),\n     Document(page_content='Octavia Estelle Butler (June 22, 1947 \u2013 February 24, 2006) was an American science fiction author.', metadata={'score': 0.7546476914454683, 'uuid': '7c093a2a-0099-415a-95c5-615a8026a894', 'created_at': '2023-08-11T20:31:12.399979Z', 'role': 'ai', 'metadata': {'system': {'entities': [{'Label': 'PERSON', 'Matches': [{'End': 22, 'Start': 0, 'Text': 'Octavia Estelle Butler'}], 'Name': 'Octavia Estelle Butler'}, {'Label': 'DATE', 'Matches': [{'End': 37, 'Start': 24, 'Text': 'June 22, 1947'}], 'Name': 'June 22, 1947'}, {'Label': 'DATE', 'Matches': [{'End': 57, 'Start': 40, 'Text': 'February 24, 2006'}], 'Name': 'February 24, 2006'}, {'Label': 'NORP', 'Matches': [{'End': 74, 'Start': 66, 'Text': 'American'}], 'Name': 'American'}]}}, 'token_count': 31})]\n"))),(0,r.kt)("p",null,"We can also use the Zep sync API to retrieve results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'zep_retriever.get_relevant_documents("Who wrote Parable of the Sower?")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content=\"Write a short synopsis of Butler's book, Parable of the Sower. What is it about?\", metadata={'score': 0.8857504413268114, 'uuid': '82f07ab5-9d4b-4db6-aaae-6028e6fd836b', 'created_at': '2023-08-11T20:31:12.437365Z', 'role': 'human', 'metadata': {'system': {'entities': [{'Label': 'ORG', 'Matches': [{'End': 32, 'Start': 26, 'Text': 'Butler'}], 'Name': 'Butler'}, {'Label': 'WORK_OF_ART', 'Matches': [{'End': 61, 'Start': 41, 'Text': 'Parable of the Sower'}], 'Name': 'Parable of the Sower'}]}}, 'token_count': 23}),\n     Document(page_content='Who was Octavia Butler?', metadata={'score': 0.7758688965570713, 'uuid': 'b3322d28-f589-48c7-9daf-5eb092d65976', 'created_at': '2023-08-11T20:31:12.3856Z', 'role': 'human', 'metadata': {'system': {'entities': [{'Label': 'PERSON', 'Matches': [{'End': 22, 'Start': 8, 'Text': 'Octavia Butler'}], 'Name': 'Octavia Butler'}]}}, 'token_count': 8}),\n     Document(page_content=\"Octavia Butler's contemporaries included Ursula K. Le Guin, Samuel R. Delany, and Joanna Russ.\", metadata={'score': 0.7602672137411663, 'uuid': '756b7136-0b4c-4664-ad33-c4431670356c', 'created_at': '2023-08-11T20:31:12.420717Z', 'role': 'ai', 'metadata': {'system': {'entities': [{'Label': 'PERSON', 'Matches': [{'End': 16, 'Start': 0, 'Text': \"Octavia Butler's\"}], 'Name': \"Octavia Butler's\"}, {'Label': 'ORG', 'Matches': [{'End': 58, 'Start': 41, 'Text': 'Ursula K. Le Guin'}], 'Name': 'Ursula K. Le Guin'}, {'Label': 'PERSON', 'Matches': [{'End': 76, 'Start': 60, 'Text': 'Samuel R. Delany'}], 'Name': 'Samuel R. Delany'}, {'Label': 'PERSON', 'Matches': [{'End': 93, 'Start': 82, 'Text': 'Joanna Russ'}], 'Name': 'Joanna Russ'}]}}, 'token_count': 27}),\n     Document(page_content='You might want to read Ursula K. Le Guin or Joanna Russ.', metadata={'score': 0.7596040989115522, 'uuid': '166d9556-2d48-4237-8a84-5d8a1024d5f4', 'created_at': '2023-08-11T20:31:12.434522Z', 'role': 'ai', 'metadata': {'system': {'entities': [{'Label': 'ORG', 'Matches': [{'End': 40, 'Start': 23, 'Text': 'Ursula K. Le Guin'}], 'Name': 'Ursula K. Le Guin'}, {'Label': 'PERSON', 'Matches': [{'End': 55, 'Start': 44, 'Text': 'Joanna Russ'}], 'Name': 'Joanna Russ'}]}}, 'token_count': 18}),\n     Document(page_content='Who were her contemporaries?', metadata={'score': 0.7575531381951208, 'uuid': 'c6a16691-4012-439f-b223-84fd4e79c4cf', 'created_at': '2023-08-11T20:31:12.410336Z', 'role': 'human', 'token_count': 8})]\n"))))}h.isMDXComponent=!0}}]);