"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[72787],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>m});var t=a(67294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(a),g=o,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||r;return a?t.createElement(m,i(i({ref:n},u),{},{components:a})):t.createElement(m,i({ref:n},u))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=a[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},41617:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var t=a(87462),o=(a(67294),a(3905));const r={},i="Google BigQuery",s={unversionedId:"integrations/document_loaders/google_bigquery",id:"integrations/document_loaders/google_bigquery",title:"Google BigQuery",description:"Google BigQuery is a serverless and cost-effective enterprise data warehouse that works across clouds and scales with your data.",source:"@site/docs/integrations/document_loaders/google_bigquery.md",sourceDirName:"integrations/document_loaders",slug:"/integrations/document_loaders/google_bigquery",permalink:"/langchain/docs/integrations/document_loaders/google_bigquery",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"GitHub",permalink:"/langchain/docs/integrations/document_loaders/github"},next:{title:"Google Cloud Storage Directory",permalink:"/langchain/docs/integrations/document_loaders/google_cloud_storage_directory"}},c={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Specifying Which Columns are Content vs Metadata",id:"specifying-which-columns-are-content-vs-metadata",level:2},{value:"Adding Source to Metadata",id:"adding-source-to-metadata",level:2}],u=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var d;const p={toc:l},g="wrapper";function m(e){let{components:n,...a}=e;return(0,o.kt)(g,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"google-bigquery"},"Google BigQuery"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/bigquery"},"Google BigQuery")," is a serverless and cost-effective enterprise data warehouse that works across clouds and scales with your data.\n",(0,o.kt)("inlineCode",{parentName:"p"},"BigQuery")," is a part of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Google Cloud Platform"),".")),(0,o.kt)("p",null,"Load a ",(0,o.kt)("inlineCode",{parentName:"p"},"BigQuery")," query with one document per row."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#!pip install google-cloud-bigquery\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "BigQueryLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.bigquery.BigQueryLoader.html", "title": "Google BigQuery"}]--\x3e\nfrom langchain.document_loaders import BigQueryLoader\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'BASE_QUERY = """\nSELECT\n  id,\n  dna_sequence,\n  organism\nFROM (\n  SELECT\n    ARRAY (\n    SELECT\n      AS STRUCT 1 AS id, "ATTCGA" AS dna_sequence, "Lokiarchaeum sp. (strain GC14_75)." AS organism\n    UNION ALL\n    SELECT\n      AS STRUCT 2 AS id, "AGGCGA" AS dna_sequence, "Heimdallarchaeota archaeon (strain LC_2)." AS organism\n    UNION ALL\n    SELECT\n      AS STRUCT 3 AS id, "TCCGGA" AS dna_sequence, "Acidianus hospitalis (strain W1)." AS organism) AS new_array),\n  UNNEST(new_array)\n"""\n')),(0,o.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"loader = BigQueryLoader(BASE_QUERY)\n\ndata = loader.load()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(data)\n")),(0,o.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='id: 1\\ndna_sequence: ATTCGA\\norganism: Lokiarchaeum sp. (strain GC14_75).', lookup_str='', metadata={}, lookup_index=0), Document(page_content='id: 2\\ndna_sequence: AGGCGA\\norganism: Heimdallarchaeota archaeon (strain LC_2).', lookup_str='', metadata={}, lookup_index=0), Document(page_content='id: 3\\ndna_sequence: TCCGGA\\norganism: Acidianus hospitalis (strain W1).', lookup_str='', metadata={}, lookup_index=0)]\n"))),(0,o.kt)("h2",{id:"specifying-which-columns-are-content-vs-metadata"},"Specifying Which Columns are Content vs Metadata"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loader = BigQueryLoader(\n    BASE_QUERY,\n    page_content_columns=["dna_sequence", "organism"],\n    metadata_columns=["id"],\n)\n\ndata = loader.load()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(data)\n")),(0,o.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='dna_sequence: ATTCGA\\norganism: Lokiarchaeum sp. (strain GC14_75).', lookup_str='', metadata={'id': 1}, lookup_index=0), Document(page_content='dna_sequence: AGGCGA\\norganism: Heimdallarchaeota archaeon (strain LC_2).', lookup_str='', metadata={'id': 2}, lookup_index=0), Document(page_content='dna_sequence: TCCGGA\\norganism: Acidianus hospitalis (strain W1).', lookup_str='', metadata={'id': 3}, lookup_index=0)]\n"))),(0,o.kt)("h2",{id:"adding-source-to-metadata"},"Adding Source to Metadata"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Note that the `id` column is being returned twice, with one instance aliased as `source`\nALIASED_QUERY = """\nSELECT\n  id,\n  dna_sequence,\n  organism,\n  id as source\nFROM (\n  SELECT\n    ARRAY (\n    SELECT\n      AS STRUCT 1 AS id, "ATTCGA" AS dna_sequence, "Lokiarchaeum sp. (strain GC14_75)." AS organism\n    UNION ALL\n    SELECT\n      AS STRUCT 2 AS id, "AGGCGA" AS dna_sequence, "Heimdallarchaeota archaeon (strain LC_2)." AS organism\n    UNION ALL\n    SELECT\n      AS STRUCT 3 AS id, "TCCGGA" AS dna_sequence, "Acidianus hospitalis (strain W1)." AS organism) AS new_array),\n  UNNEST(new_array)\n"""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loader = BigQueryLoader(ALIASED_QUERY, metadata_columns=["source"])\n\ndata = loader.load()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(data)\n")),(0,o.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [Document(page_content='id: 1\\ndna_sequence: ATTCGA\\norganism: Lokiarchaeum sp. (strain GC14_75).\\nsource: 1', lookup_str='', metadata={'source': 1}, lookup_index=0), Document(page_content='id: 2\\ndna_sequence: AGGCGA\\norganism: Heimdallarchaeota archaeon (strain LC_2).\\nsource: 2', lookup_str='', metadata={'source': 2}, lookup_index=0), Document(page_content='id: 3\\ndna_sequence: TCCGGA\\norganism: Acidianus hospitalis (strain W1).\\nsource: 3', lookup_str='', metadata={'source': 3}, lookup_index=0)]\n"))))}m.isMDXComponent=!0}}]);