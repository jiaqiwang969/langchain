"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63962],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),s=c(t),h=o,y=s["".concat(l,".").concat(h)]||s[h]||u[h]||a;return t?r.createElement(y,i(i({ref:n},p),{},{components:t})):r.createElement(y,i({ref:n},p))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=h;var m={};for(var l in n)hasOwnProperty.call(n,l)&&(m[l]=n[l]);m.originalType=e,m[s]="string"==typeof e?e:o,i[1]=m;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5791:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>y,frontMatter:()=>a,metadata:()=>m,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},i="Mot\xf6rhead Memory",m={unversionedId:"integrations/memory/motorhead_memory",id:"integrations/memory/motorhead_memory",title:"Mot\xf6rhead Memory",description:"Mot\xf6rhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.",source:"@site/docs/integrations/memory/motorhead_memory.md",sourceDirName:"integrations/memory",slug:"/integrations/memory/motorhead_memory",permalink:"/langchain/docs/integrations/memory/motorhead_memory",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Mongodb Chat Message History",permalink:"/langchain/docs/integrations/memory/mongodb_chat_message_history"},next:{title:"Mot\xf6rhead Memory (Managed)",permalink:"/langchain/docs/integrations/memory/motorhead_memory_managed"}},l={},c=[{value:"Setup",id:"setup",level:2}],p=(s="CodeOutputBlock",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var s;const u={toc:c},h="wrapper";function y(e){let{components:n,...t}=e;return(0,o.kt)(h,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mot\xf6rhead-memory"},"Mot\xf6rhead Memory"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/getmetal/motorhead"},"Mot\xf6rhead")," is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"See instructions at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/getmetal/motorhead"},"Mot\xf6rhead")," for running the server locally."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MotorheadMemory", "source": "langchain.memory.motorhead_memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.motorhead_memory.MotorheadMemory.html", "title": "Mot\\u00f6rhead Memory"}]--\x3e\nfrom langchain.memory.motorhead_memory import MotorheadMemory\nfrom langchain import OpenAI, LLMChain, PromptTemplate\n\ntemplate = """You are a chatbot having a conversation with a human.\n\n{chat_history}\nHuman: {human_input}\nAI:"""\n\nprompt = PromptTemplate(\n    input_variables=["chat_history", "human_input"], template=template\n)\nmemory = MotorheadMemory(\n    session_id="testing-1", url="http://localhost:8080", memory_key="chat_history"\n)\n\nawait memory.init()\n# loads previous state from Mot\xf6rhead \ud83e\udd18\n\nllm_chain = LLMChain(\n    llm=OpenAI(),\n    prompt=prompt,\n    verbose=True,\n    memory=memory,\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'llm_chain.run("hi im bob")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    You are a chatbot having a conversation with a human.\n    \n    \n    Human: hi im bob\n    AI:\n    \n    > Finished chain.\n\n\n\n\n\n    ' Hi Bob, nice to meet you! How are you doing today?'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'llm_chain.run("whats my name?")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    You are a chatbot having a conversation with a human.\n    \n    Human: hi im bob\n    AI:  Hi Bob, nice to meet you! How are you doing today?\n    Human: whats my name?\n    AI:\n    \n    > Finished chain.\n\n\n\n\n\n    ' You said your name is Bob. Is that correct?'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'llm_chain.run("whats for dinner?")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    You are a chatbot having a conversation with a human.\n    \n    Human: hi im bob\n    AI:  Hi Bob, nice to meet you! How are you doing today?\n    Human: whats my name?\n    AI:  You said your name is Bob. Is that correct?\n    Human: whats for dinner?\n    AI:\n    \n    > Finished chain.\n\n\n\n\n\n    \"  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?\"\n"))))}y.isMDXComponent=!0}}]);