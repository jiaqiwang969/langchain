"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[80242],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={},i="Marqo",s={unversionedId:"integrations/vectorstores/marqo",id:"integrations/vectorstores/marqo",title:"Marqo",description:"This notebook shows how to use functionality related to the Marqo vectorstore.",source:"@site/docs/integrations/vectorstores/marqo.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/marqo",permalink:"/langchain/docs/integrations/vectorstores/marqo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"LanceDB",permalink:"/langchain/docs/integrations/vectorstores/lancedb"},next:{title:"Google Vertex AI MatchingEngine",permalink:"/langchain/docs/integrations/vectorstores/matchingengine"}},l={},c=[{value:"Additional features",id:"additional-features",level:2},{value:"Multimodal Example",id:"multimodal-example",level:4},{value:"Text only example",id:"text-only-example",level:4},{value:"Weighted Queries",id:"weighted-queries",level:2}],p=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var d;const u={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"marqo"},"Marqo"),(0,o.kt)("p",null,"This notebook shows how to use functionality related to the Marqo vectorstore."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://www.marqo.ai/"},"Marqo")," is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.")),(0,o.kt)("p",null,"To run this notebook with our docker image please run the following commands first to get Marqo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker pull marqoai/marqo:latest\ndocker rm -f marqo\ndocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latest\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install marqo\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Marqo"}, {"imported": "Marqo", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.marqo.Marqo.html", "title": "Marqo"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Marqo"}]--\x3e\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Marqo\nfrom langchain.document_loaders import TextLoader\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Marqo"}]--\x3e\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import marqo\n\n# initialize marqo\nmarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)\nmarqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)\n\nclient = marqo.Client(url=marqo_url, api_key=marqo_api_key)\n\nindex_name = "langchain-demo"\n\ndocsearch = Marqo.from_documents(docs, index_name=index_name)\n\nquery = "What did the president say about Ketanji Brown Jackson"\nresult_docs = docsearch.similarity_search(query)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Index langchain-demo exists.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(result_docs[0].page_content)\n")),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'result_docs = docsearch.similarity_search_with_score(query)\nprint(result_docs[0][0].page_content, result_docs[0][1], sep="\\n")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.\n    0.68647254\n"))),(0,o.kt)("h2",{id:"additional-features"},"Additional features"),(0,o.kt)("p",null,"One of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the ",(0,o.kt)("inlineCode",{parentName:"p"},"add_texts")," method.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you had a database of text documents, you can bring it into the langchain framework and add more texts through ",(0,o.kt)("inlineCode",{parentName:"p"},"add_texts"),"."))),(0,o.kt)("p",null,"The documents that are returned are customised by passing your own function to the ",(0,o.kt)("inlineCode",{parentName:"p"},"page_content_builder")," callback in the search methods."),(0,o.kt)("h4",{id:"multimodal-example"},"Multimodal Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# use a new index\nindex_name = "langchain-multimodal-demo"\n\n# incase the demo is re-run\ntry:\n    client.delete_index(index_name)\nexcept Exception:\n    print(f"Creating {index_name}")\n\n# This index could have been created by another system\nsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}\nclient.create_index(index_name, **settings)\nclient.index(index_name).add_documents(\n    [\n        # image of a bus\n        {\n            "caption": "Bus",\n            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",\n        },\n        # image of a plane\n        {\n            "caption": "Plane",\n            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",\n        },\n    ],\n)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'errors': False,\n     'processingTimeMs': 2090.2822139996715,\n     'index_name': 'langchain-multimodal-demo',\n     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',\n       'result': 'created',\n       'status': 201},\n      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',\n       'result': 'created',\n       'status': 201}]}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def get_content(res):\n    """Helper to format Marqo\'s documents into text to be used as page_content"""\n    return f"{res[\'caption\']}: {res[\'image\']}"\n\n\ndocsearch = Marqo(client, index_name, page_content_builder=get_content)\n\n\nquery = "vehicles that fly"\ndoc_results = docsearch.similarity_search(query)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"for doc in doc_results:\n    print(doc.page_content)\n")),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg\n    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg\n"))),(0,o.kt)("h4",{id:"text-only-example"},"Text only example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# use a new index\nindex_name = "langchain-byo-index-demo"\n\n# incase the demo is re-run\ntry:\n    client.delete_index(index_name)\nexcept Exception:\n    print(f"Creating {index_name}")\n\n# This index could have been created by another system\nclient.create_index(index_name)\nclient.index(index_name).add_documents(\n    [\n        {\n            "Title": "Smartphone",\n            "Description": "A smartphone is a portable computer device that combines mobile telephone "\n            "functions and computing functions into one unit.",\n        },\n        {\n            "Title": "Telephone",\n            "Description": "A telephone is a telecommunications device that permits two or more users to"\n            "conduct a conversation when they are too far apart to be easily heard directly.",\n        },\n    ],\n)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'errors': False,\n     'processingTimeMs': 139.2144540004665,\n     'index_name': 'langchain-byo-index-demo',\n     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',\n       'result': 'created',\n       'status': 201},\n      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',\n       'result': 'created',\n       'status': 201}]}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Note text indexes retain the ability to use add_texts despite different field names in documents\n# this is because the page_content_builder callback lets you handle these document fields as required\n\n\ndef get_content(res):\n    """Helper to format Marqo\'s documents into text to be used as page_content"""\n    if "text" in res:\n        return res["text"]\n    return res["Description"]\n\n\ndocsearch = Marqo(client, index_name, page_content_builder=get_content)\n\ndocsearch.add_texts(["This is a document that is about elephants"])\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ['9986cc72-adcd-4080-9d74-265c173a9ec3']\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query = "modern communications devices"\ndoc_results = docsearch.similarity_search(query)\n\nprint(doc_results[0].page_content)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query = "elephants"\ndoc_results = docsearch.similarity_search(query, page_content_builder=get_content)\n\nprint(doc_results[0].page_content)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    This is a document that is about elephants\n"))),(0,o.kt)("h2",{id:"weighted-queries"},"Weighted Queries"),(0,o.kt)("p",null,"We also expose marqos weighted queries which are a powerful way to compose complex semantic searches."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query = {"communications devices": 1.0}\ndoc_results = docsearch.similarity_search(query)\nprint(doc_results[0].page_content)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query = {"communications devices": 1.0, "technology post 2000": -1.0}\ndoc_results = docsearch.similarity_search(query)\nprint(doc_results[0].page_content)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.\n"))),(0,o.kt)("h1",{id:"question-answering-with-sources"},"Question Answering with Sources"),(0,o.kt)("p",null,"This section shows how to use Marqo as part of a ",(0,o.kt)("inlineCode",{parentName:"p"},"RetrievalQAWithSourcesChain"),". Marqo will perform the searches for information in the sources."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RetrievalQAWithSourcesChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.qa_with_sources.retrieval.RetrievalQAWithSourcesChain.html", "title": "Marqo"}]--\x3e\nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain import OpenAI\n\nimport os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    OpenAI API Key:\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'with open("../../../state_of_the_union.txt") as f:\n    state_of_the_union = f.read()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_text(state_of_the_union)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'index_name = "langchain-qa-with-retrieval"\ndocsearch = Marqo.from_documents(docs, index_name=index_name)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Index langchain-qa-with-retrieval exists.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain = RetrievalQAWithSourcesChain.from_chain_type(\n    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever()\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain(\n    {"question": "What did the president say about Justice Breyer"},\n    return_only_outputs=True,\n)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\\n',\n     'sources': '../../../state_of_the_union.txt'}\n"))))}h.isMDXComponent=!0}}]);