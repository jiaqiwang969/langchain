"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[26707],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return t?a.createElement(h,s(s({ref:n},c),{},{components:t})):a.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},18258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(87462),o=(t(67294),t(3905));const r={},s="Facebook Messenger",i={unversionedId:"integrations/chat_loaders/facebook",id:"integrations/chat_loaders/facebook",title:"Facebook Messenger",description:"This notebook shows how to load data from Facebook in a format you can finetune on. The overall steps are:",source:"@site/docs/integrations/chat_loaders/facebook.md",sourceDirName:"integrations/chat_loaders",slug:"/integrations/chat_loaders/facebook",permalink:"/langchain/docs/integrations/chat_loaders/facebook",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Discord",permalink:"/langchain/docs/integrations/chat_loaders/discord"},next:{title:"GMail",permalink:"/langchain/docs/integrations/chat_loaders/gmail"}},l={},p=[{value:"1. Download Data",id:"1-download-data",level:2},{value:"2. Create Chat Loader",id:"2-create-chat-loader",level:2},{value:"3. Prepare for fine-tuning",id:"3-prepare-for-fine-tuning",level:2},{value:"Now we can convert to OpenAI format dictionaries",id:"now-we-can-convert-to-openai-format-dictionaries",level:4},{value:"4. Fine-tune the model",id:"4-fine-tune-the-model",level:2},{value:"5. Use in LangChain",id:"5-use-in-langchain",level:2}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const d={toc:p},u="wrapper";function h(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"facebook-messenger"},"Facebook Messenger"),(0,o.kt)("p",null,"This notebook shows how to load data from Facebook in a format you can finetune on. The overall steps are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Download your messenger data to disk."),(0,o.kt)("li",{parentName:"ol"},"Create the Chat Loader and call ",(0,o.kt)("inlineCode",{parentName:"li"},"loader.load()")," (or ",(0,o.kt)("inlineCode",{parentName:"li"},"loader.lazy_load()"),") to perform the conversion."),(0,o.kt)("li",{parentName:"ol"},"Optionally use ",(0,o.kt)("inlineCode",{parentName:"li"},"merge_chat_runs")," to combine message from the same sender in sequence, and/or ",(0,o.kt)("inlineCode",{parentName:"li"},"map_ai_messages"),' to convert messages from the specified sender to the "AIMessage" class. Once you\'ve done this, call ',(0,o.kt)("inlineCode",{parentName:"li"},"convert_messages_for_finetuning")," to prepare your data for fine-tuning.")),(0,o.kt)("p",null,"Once this has been done, you can fine-tune your model. To do so you would complete the following steps:"),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Upload your messages to OpenAI and run a fine-tuning job."),(0,o.kt)("li",{parentName:"ol"},"Use the resulting model in your LangChain app!")),(0,o.kt)("p",null,"Let's begin."),(0,o.kt)("h2",{id:"1-download-data"},"1. Download Data"),(0,o.kt)("p",null,"To download your own messenger data, following instructions ",(0,o.kt)("a",{parentName:"p",href:"https://www.zapptales.com/en/download-facebook-messenger-chat-history-how-to/"},"here"),". IMPORTANT - make sure to download them in JSON format (not HTML)."),(0,o.kt)("p",null,"We are hosting an example dump at ",(0,o.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/1rh1s1o2i7B-Sk1v9o8KNgivLVGwJ-osV/view?usp=sharing"},"this google drive link")," that we will use in this walkthrough."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# This uses some example data\nimport requests\nimport zipfile\n\ndef download_and_unzip(url: str, output_path: str = 'file.zip') -> None:\n    file_id = url.split('/')[-2]\n    download_url = f'https://drive.google.com/uc?export=download&id={file_id}'\n\n    response = requests.get(download_url)\n    if response.status_code != 200:\n        print('Failed to download the file.')\n        return\n\n    with open(output_path, 'wb') as file:\n        file.write(response.content)\n        print(f'File {output_path} downloaded.')\n\n    with zipfile.ZipFile(output_path, 'r') as zip_ref:\n        zip_ref.extractall()\n        print(f'File {output_path} has been unzipped.')\n\n# URL of the file to download\nurl = 'https://drive.google.com/file/d/1rh1s1o2i7B-Sk1v9o8KNgivLVGwJ-osV/view?usp=sharing'\n\n# Download and unzip\ndownload_and_unzip(url)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    File file.zip downloaded.\n    File file.zip has been unzipped.\n"))),(0,o.kt)("h2",{id:"2-create-chat-loader"},"2. Create Chat Loader"),(0,o.kt)("p",null,"We have 2 different ",(0,o.kt)("inlineCode",{parentName:"p"},"FacebookMessengerChatLoader")," classes, one for an entire directory of chats, and one to load individual files. We"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'directory_path = "./hogwarts"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SingleFileFacebookMessengerChatLoader", "source": "langchain.chat_loaders.facebook_messenger", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.facebook_messenger.SingleFileFacebookMessengerChatLoader.html", "title": "Facebook Messenger"}, {"imported": "FolderFacebookMessengerChatLoader", "source": "langchain.chat_loaders.facebook_messenger", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.facebook_messenger.FolderFacebookMessengerChatLoader.html", "title": "Facebook Messenger"}]--\x3e\nfrom langchain.chat_loaders.facebook_messenger import (\n    SingleFileFacebookMessengerChatLoader,\n    FolderFacebookMessengerChatLoader,\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loader = SingleFileFacebookMessengerChatLoader(\n    path="./hogwarts/inbox/HermioneGranger/messages_Hermione_Granger.json",\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat_session = loader.load()[0]\nchat_session["messages"][:3]\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [HumanMessage(content=\"Hi Hermione! How's your summer going so far?\", additional_kwargs={'sender': 'Harry Potter'}, example=False),\n     HumanMessage(content=\"Harry! Lovely to hear from you. My summer is going well, though I do miss everyone. I'm spending most of my time going through my books and researching fascinating new topics. How about you?\", additional_kwargs={'sender': 'Hermione Granger'}, example=False),\n     HumanMessage(content=\"I miss you all too. The Dursleys are being their usual unpleasant selves but I'm getting by. At least I can practice some spells in my room without them knowing. Let me know if you find anything good in your researching!\", additional_kwargs={'sender': 'Harry Potter'}, example=False)]\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'loader = FolderFacebookMessengerChatLoader(\n    path="./hogwarts",\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chat_sessions = loader.load()\nlen(chat_sessions)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    9\n"))),(0,o.kt)("h2",{id:"3-prepare-for-fine-tuning"},"3. Prepare for fine-tuning"),(0,o.kt)("p",null,"Calling ",(0,o.kt)("inlineCode",{parentName:"p"},"load()")," returns all the chat messages we could extract as human messages. When conversing with chat bots, conversations typically follow a more strict alternating dialogue pattern relative to real conversations. "),(0,o.kt)("p",null,'You can choose to merge message "runs" (consecutive messages from the same sender) and select a sender to represent the "AI". The fine-tuned LLM will learn to generate these AI messages.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "merge_chat_runs", "source": "langchain.chat_loaders.utils", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.utils.merge_chat_runs.html", "title": "Facebook Messenger"}, {"imported": "map_ai_messages", "source": "langchain.chat_loaders.utils", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.utils.map_ai_messages.html", "title": "Facebook Messenger"}]--\x3e\nfrom langchain.chat_loaders.utils import (\n    merge_chat_runs,\n    map_ai_messages,\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'merged_sessions = merge_chat_runs(chat_sessions)\nalternating_sessions = list(map_ai_messages(merged_sessions, "Harry Potter"))\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Now all of Harry Potter's messages will take the AI message class\n# which maps to the 'assistant' role in OpenAI's training format\nalternating_sessions[0]['messages'][:3]\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [AIMessage(content=\"Professor Snape, I was hoping I could speak with you for a moment about something that's been concerning me lately.\", additional_kwargs={'sender': 'Harry Potter'}, example=False),\n     HumanMessage(content=\"What is it, Potter? I'm quite busy at the moment.\", additional_kwargs={'sender': 'Severus Snape'}, example=False),\n     AIMessage(content=\"I apologize for the interruption, sir. I'll be brief. I've noticed some strange activity around the school grounds at night. I saw a cloaked figure lurking near the Forbidden Forest last night. I'm worried someone may be plotting something sinister.\", additional_kwargs={'sender': 'Harry Potter'}, example=False)]\n"))),(0,o.kt)("h4",{id:"now-we-can-convert-to-openai-format-dictionaries"},"Now we can convert to OpenAI format dictionaries"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "convert_messages_for_finetuning", "source": "langchain.adapters.openai", "docs": "https://api.python.langchain.com/en/latest/adapters/langchain.adapters.openai.convert_messages_for_finetuning.html", "title": "Facebook Messenger"}]--\x3e\nfrom langchain.adapters.openai import convert_messages_for_finetuning\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'training_data = convert_messages_for_finetuning(alternating_sessions)\nprint(f"Prepared {len(training_data)} dialogues for training")\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Prepared 9 dialogues for training\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"training_data[0][:3]\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    [{'role': 'assistant',\n      'content': \"Professor Snape, I was hoping I could speak with you for a moment about something that's been concerning me lately.\"},\n     {'role': 'user',\n      'content': \"What is it, Potter? I'm quite busy at the moment.\"},\n     {'role': 'assistant',\n      'content': \"I apologize for the interruption, sir. I'll be brief. I've noticed some strange activity around the school grounds at night. I saw a cloaked figure lurking near the Forbidden Forest last night. I'm worried someone may be plotting something sinister.\"}]\n"))),(0,o.kt)("p",null,"OpenAI currently requires at least 10 training examples for a fine-tuning job, though they recommend between 50-100 for most tasks. Since we only have 9 chat sessions, we can subdivide them (optionally with some overlap) so that each training example is comprised of a portion of a whole conversation."),(0,o.kt)("p",null,"Facebook chat sessions (1 per person) often span multiple days and conversations,\nso the long-range dependencies may not be that important to model anyhow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Our chat is alternating, we will make each datapoint a group of 8 messages,\n# with 2 messages overlapping\nchunk_size = 8\noverlap = 2\n\ntraining_examples = [\n    conversation_messages[i: i + chunk_size] \n    for conversation_messages in training_data\n    for i in range(\n        0, len(conversation_messages) - chunk_size + 1, \n        chunk_size - overlap)\n]\n\nlen(training_examples)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    100\n"))),(0,o.kt)("h2",{id:"4-fine-tune-the-model"},"4. Fine-tune the model"),(0,o.kt)("p",null,"It's time to fine-tune the model. Make sure you have ",(0,o.kt)("inlineCode",{parentName:"p"},"openai")," installed\nand have set your ",(0,o.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," appropriately"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# %pip install -U openai --quiet\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import json\nfrom io import BytesIO\nimport time\n\nimport openai\n\n# We will write the jsonl file in memory\nmy_file = BytesIO()\nfor m in training_examples:\n    my_file.write((json.dumps({"messages": m}) + "\\n").encode(\'utf-8\'))\n\nmy_file.seek(0)\ntraining_file = openai.File.create(\n  file=my_file,\n  purpose=\'fine-tune\'\n)\n\n# OpenAI audits each training file for compliance reasons.\n# This make take a few minutes\nstatus = openai.File.retrieve(training_file.id).status\nstart_time = time.time()\nwhile status != "processed":\n    print(f"Status=[{status}]... {time.time() - start_time:.2f}s", end="\\r", flush=True)\n    time.sleep(5)\n    status = openai.File.retrieve(training_file.id).status\nprint(f"File {training_file.id} ready after {time.time() - start_time:.2f} seconds.")\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    File file-zCyNBeg4snpbBL7VkvsuhCz8 ready afer 30.55 seconds.\n"))),(0,o.kt)("p",null,"With the file ready, it's time to kick off a training job."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'job = openai.FineTuningJob.create(\n    training_file=training_file.id,\n    model="gpt-3.5-turbo",\n)\n')),(0,o.kt)("p",null,"Grab a cup of tea while your model is being prepared. This may take some time!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'status = openai.FineTuningJob.retrieve(job.id).status\nstart_time = time.time()\nwhile status != "succeeded":\n    print(f"Status=[{status}]... {time.time() - start_time:.2f}s", end="\\r", flush=True)\n    time.sleep(5)\n    job = openai.FineTuningJob.retrieve(job.id)\n    status = job.status\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Status=[running]... 908.87s\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(job.fine_tuned_model)\n")),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ft:gpt-3.5-turbo-0613:personal::7rDwkaOq\n"))),(0,o.kt)("h2",{id:"5-use-in-langchain"},"5. Use in LangChain"),(0,o.kt)("p",null,"You can use the resulting model ID directly the ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatOpenAI")," model class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Facebook Messenger"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\n\nmodel = ChatOpenAI(\n    model=job.fine_tuned_model,\n    temperature=1,\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "Facebook Messenger"}, {"imported": "StrOutputParser", "source": "langchain.schema.output_parser", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.output_parser.StrOutputParser.html", "title": "Facebook Messenger"}]--\x3e\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.schema.output_parser import StrOutputParser\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        ("human", "{input}"),\n    ]\n)\n\nchain = prompt | model | StrOutputParser()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'for tok in chain.stream({"input": "What classes are you taking?"}):\n    print(tok, end="", flush=True)\n')),(0,o.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    The usual - Potions, Transfiguration, Defense Against the Dark Arts. What about you?\n"))))}h.isMDXComponent=!0}}]);