"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[45251],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=l(a),h=r,d=m["".concat(s,".").concat(h)]||m[h]||u[h]||o;return a?n.createElement(d,p(p({ref:t},c),{},{components:a})):n.createElement(d,p({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,p=new Array(o);p[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,p[1]=i;for(var l=2;l<o;l++)p[l]=a[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},21669:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={},p="Connecting to a Feature Store",i={unversionedId:"modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store",id:"modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store",title:"Connecting to a Feature Store",description:"Feature stores are a concept from traditional machine learning that make sure data fed into models is up-to-date and relevant. For more on this, see here.",source:"@site/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store.md",sourceDirName:"modules/model_io/prompts/prompt_templates",slug:"/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store",permalink:"/langchain/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Prompt templates",permalink:"/langchain/docs/modules/model_io/prompts/prompt_templates/"},next:{title:"Custom prompt template",permalink:"/langchain/docs/modules/model_io/prompts/prompt_templates/custom_prompt_template"}},s={},l=[{value:"Feast",id:"feast",level:2},{value:"Load Feast Store",id:"load-feast-store",level:3},{value:"Prompts",id:"prompts",level:3},{value:"Use in a chain",id:"use-in-a-chain",level:3},{value:"Tecton",id:"tecton",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Define and load features",id:"define-and-load-features",level:3},{value:"Prompts",id:"prompts-1",level:3},{value:"Use in a chain",id:"use-in-a-chain-1",level:3},{value:"Featureform",id:"featureform",level:2},{value:"Initialize Featureform",id:"initialize-featureform",level:3},{value:"Prompts",id:"prompts-2",level:3},{value:"Use in a chain",id:"use-in-a-chain-2",level:3},{value:"AzureML Managed Feature Store",id:"azureml-managed-feature-store",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"Prompts",id:"prompts-3",level:3},{value:"Test",id:"test",level:3},{value:"Use in a chain",id:"use-in-a-chain-3",level:3}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const u={toc:l},h="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"connecting-to-a-feature-store"},"Connecting to a Feature Store"),(0,r.kt)("p",null,"Feature stores are a concept from traditional machine learning that make sure data fed into models is up-to-date and relevant. For more on this, see ",(0,r.kt)("a",{parentName:"p",href:"https://www.tecton.ai/blog/what-is-a-feature-store/"},"here"),"."),(0,r.kt)("p",null,"This concept is extremely relevant when considering putting LLM applications in production. In order to personalize LLM applications, you may want to combine LLMs with up-to-date information about particular users. Feature stores can be a great way to keep that data fresh, and LangChain provides an easy way to combine that data with LLMs."),(0,r.kt)("p",null,"In this notebook we will show how to connect prompt templates to feature stores. The basic idea is to call a feature store from inside a prompt template to retrieve values that are then formatted into the prompt."),(0,r.kt)("h2",{id:"feast"},"Feast"),(0,r.kt)("p",null,"To start, we will use the popular open source feature store framework ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/feast-dev/feast"},"Feast"),"."),(0,r.kt)("p",null,"This assumes you have already run the steps in the README around getting started. We will build off of that example in getting started, and create and LLMChain to write a note to a specific driver regarding their up-to-date statistics."),(0,r.kt)("h3",{id:"load-feast-store"},"Load Feast Store"),(0,r.kt)("p",null,"Again, this should be set up according to the instructions in the Feast README."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from feast import FeatureStore\n\n# You may need to update the path depending on where you stored it\nfeast_repo_path = "../../../../../my_feature_repo/feature_repo/"\nstore = FeatureStore(repo_path=feast_repo_path)\n')),(0,r.kt)("h3",{id:"prompts"},"Prompts"),(0,r.kt)("p",null,"Here we will set up a custom FeastPromptTemplate. This prompt template will take in a driver id, look up their stats, and format those stats into a prompt."),(0,r.kt)("p",null,"Note that the input to this prompt template is just ",(0,r.kt)("inlineCode",{parentName:"p"},"driver_id"),", since that is the only user defined piece (all other variables are looked up inside the prompt template)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Connecting to a Feature Store"}, {"imported": "StringPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.base.StringPromptTemplate.html", "title": "Connecting to a Feature Store"}]--\x3e\nfrom langchain.prompts import PromptTemplate, StringPromptTemplate\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """Given the driver\'s up to date stats, write them note relaying those stats to them.\nIf they have a conversation rate above .5, give them a compliment. Otherwise, make a silly joke about chickens at the end to make them feel better\n\nHere are the drivers stats:\nConversation rate: {conv_rate}\nAcceptance rate: {acc_rate}\nAverage Daily Trips: {avg_daily_trips}\n\nYour response:"""\nprompt = PromptTemplate.from_template(template)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class FeastPromptTemplate(StringPromptTemplate):\n    def format(self, **kwargs) -> str:\n        driver_id = kwargs.pop("driver_id")\n        feature_vector = store.get_online_features(\n            features=[\n                "driver_hourly_stats:conv_rate",\n                "driver_hourly_stats:acc_rate",\n                "driver_hourly_stats:avg_daily_trips",\n            ],\n            entity_rows=[{"driver_id": driver_id}],\n        ).to_dict()\n        kwargs["conv_rate"] = feature_vector["conv_rate"][0]\n        kwargs["acc_rate"] = feature_vector["acc_rate"][0]\n        kwargs["avg_daily_trips"] = feature_vector["avg_daily_trips"][0]\n        return prompt.format(**kwargs)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'prompt_template = FeastPromptTemplate(input_variables=["driver_id"])\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(prompt_template.format(driver_id=1001))\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Given the driver's up to date stats, write them note relaying those stats to them.\n    If they have a conversation rate above .5, give them a compliment. Otherwise, make a silly joke about chickens at the end to make them feel better\n    \n    Here are the drivers stats:\n    Conversation rate: 0.4745151400566101\n    Acceptance rate: 0.055561766028404236\n    Average Daily Trips: 936\n    \n    Your response:\n"))),(0,r.kt)("h3",{id:"use-in-a-chain"},"Use in a chain"),(0,r.kt)("p",null,"We can now use this in a chain, successfully creating a chain that achieves personalization backed by a feature store."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Connecting to a Feature Store"}, {"imported": "LLMChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "Connecting to a Feature Store"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import LLMChain\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = LLMChain(llm=ChatOpenAI(), prompt=prompt_template)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain.run(1001)\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \"Hi there! I wanted to update you on your current stats. Your acceptance rate is 0.055561766028404236 and your average daily trips are 936. While your conversation rate is currently 0.4745151400566101, I have no doubt that with a little extra effort, you'll be able to exceed that .5 mark! Keep up the great work! And remember, even chickens can't always cross the road, but they still give it their best shot.\"\n"))),(0,r.kt)("h2",{id:"tecton"},"Tecton"),(0,r.kt)("p",null,"Above, we showed how you could use Feast, a popular open source and self-managed feature store, with LangChain. Our examples below will show a similar integration using Tecton. Tecton is a fully managed feature platform built to orchestrate the complete ML feature lifecycle, from transformation to online serving, with enterprise-grade SLAs."),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tecton Deployment (sign up at ",(0,r.kt)("a",{parentName:"li",href:"https://tecton.ai"},"https://tecton.ai"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TECTON_API_KEY")," environment variable set to a valid Service Account key")),(0,r.kt)("h3",{id:"define-and-load-features"},"Define and load features"),(0,r.kt)("p",null,"We will use the user_transaction_counts Feature View from the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tecton.ai/docs/tutorials/tecton-fundamentals"},"Tecton tutorial")," as part of a Feature Service. For simplicity, we are only using a single Feature View; however, more sophisticated applications may require more feature views to retrieve the features needed for its prompt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'user_transaction_metrics = FeatureService(\n    name = "user_transaction_metrics",\n    features = [user_transaction_counts]\n)\n')),(0,r.kt)("p",null,"The above Feature Service is expected to be ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tecton.ai/docs/applying-feature-repository-changes-to-a-workspace"},"applied to a live workspace"),'. For this example, we will be using the "prod" workspace.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import tecton\n\nworkspace = tecton.get_workspace("prod")\nfeature_service = workspace.get_feature_service("user_transaction_metrics")\n')),(0,r.kt)("h3",{id:"prompts-1"},"Prompts"),(0,r.kt)("p",null,"Here we will set up a custom TectonPromptTemplate. This prompt template will take in a user_id , look up their stats, and format those stats into a prompt."),(0,r.kt)("p",null,"Note that the input to this prompt template is just ",(0,r.kt)("inlineCode",{parentName:"p"},"user_id"),", since that is the only user defined piece (all other variables are looked up inside the prompt template)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Connecting to a Feature Store"}, {"imported": "StringPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.base.StringPromptTemplate.html", "title": "Connecting to a Feature Store"}]--\x3e\nfrom langchain.prompts import PromptTemplate, StringPromptTemplate\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """Given the vendor\'s up to date transaction stats, write them a note based on the following rules:\n\n1. If they had a transaction in the last day, write a short congratulations message on their recent sales\n2. If no transaction in the last day, but they had a transaction in the last 30 days, playfully encourage them to sell more.\n3. Always add a silly joke about chickens at the end\n\nHere are the vendor\'s stats:\nNumber of Transactions Last Day: {transaction_count_1d}\nNumber of Transactions Last 30 Days: {transaction_count_30d}\n\nYour response:"""\nprompt = PromptTemplate.from_template(template)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class TectonPromptTemplate(StringPromptTemplate):\n    def format(self, **kwargs) -> str:\n        user_id = kwargs.pop("user_id")\n        feature_vector = feature_service.get_online_features(\n            join_keys={"user_id": user_id}\n        ).to_dict()\n        kwargs["transaction_count_1d"] = feature_vector[\n            "user_transaction_counts.transaction_count_1d_1d"\n        ]\n        kwargs["transaction_count_30d"] = feature_vector[\n            "user_transaction_counts.transaction_count_30d_1d"\n        ]\n        return prompt.format(**kwargs)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'prompt_template = TectonPromptTemplate(input_variables=["user_id"])\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(prompt_template.format(user_id="user_469998441571"))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Given the vendor's up to date transaction stats, write them a note based on the following rules:\n    \n    1. If they had a transaction in the last day, write a short congratulations message on their recent sales\n    2. If no transaction in the last day, but they had a transaction in the last 30 days, playfully encourage them to sell more.\n    3. Always add a silly joke about chickens at the end\n    \n    Here are the vendor's stats:\n    Number of Transactions Last Day: 657\n    Number of Transactions Last 30 Days: 20326\n    \n    Your response:\n"))),(0,r.kt)("h3",{id:"use-in-a-chain-1"},"Use in a chain"),(0,r.kt)("p",null,"We can now use this in a chain, successfully creating a chain that achieves personalization backed by the Tecton Feature Platform."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Connecting to a Feature Store"}, {"imported": "LLMChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "Connecting to a Feature Store"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import LLMChain\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = LLMChain(llm=ChatOpenAI(), prompt=prompt_template)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("user_469998441571")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    'Wow, congratulations on your recent sales! Your business is really soaring like a chicken on a hot air balloon! Keep up the great work!'\n"))),(0,r.kt)("h2",{id:"featureform"},"Featureform"),(0,r.kt)("p",null,"Finally, we will use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/featureform/featureform"},"Featureform"),", an open-source and enterprise-grade feature store, to run the same example. Featureform allows you to work with your infrastructure like Spark or locally to define your feature transformations."),(0,r.kt)("h3",{id:"initialize-featureform"},"Initialize Featureform"),(0,r.kt)("p",null,"You can follow in the instructions in the README to initialize your transformations and features in Featureform."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import featureform as ff\n\nclient = ff.Client(host="demo.featureform.com")\n')),(0,r.kt)("h3",{id:"prompts-2"},"Prompts"),(0,r.kt)("p",null,"Here we will set up a custom FeatureformPromptTemplate. This prompt template will take in the average amount a user pays per transactions."),(0,r.kt)("p",null,"Note that the input to this prompt template is just avg_transaction, since that is the only user defined piece (all other variables are looked up inside the prompt template)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Connecting to a Feature Store"}, {"imported": "StringPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.base.StringPromptTemplate.html", "title": "Connecting to a Feature Store"}]--\x3e\nfrom langchain.prompts import PromptTemplate, StringPromptTemplate\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'template = """Given the amount a user spends on average per transaction, let them know if they are a high roller. Otherwise, make a silly joke about chickens at the end to make them feel better\n\nHere are the user\'s stats:\nAverage Amount per Transaction: ${avg_transcation}\n\nYour response:"""\nprompt = PromptTemplate.from_template(template)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class FeatureformPromptTemplate(StringPromptTemplate):\n    def format(self, **kwargs) -> str:\n        user_id = kwargs.pop("user_id")\n        fpf = client.features([("avg_transactions", "quickstart")], {"user": user_id})\n        return prompt.format(**kwargs)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'prompt_template = FeatureformPromptTemplate(input_variables=["user_id"])\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(prompt_template.format(user_id="C1410926"))\n')),(0,r.kt)("h3",{id:"use-in-a-chain-2"},"Use in a chain"),(0,r.kt)("p",null,"We can now use this in a chain, successfully creating a chain that achieves personalization backed by the Featureform Feature Platform."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Connecting to a Feature Store"}, {"imported": "LLMChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "Connecting to a Feature Store"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import LLMChain\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = LLMChain(llm=ChatOpenAI(), prompt=prompt_template)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("C1410926")\n')),(0,r.kt)("h2",{id:"azureml-managed-feature-store"},"AzureML Managed Feature Store"),(0,r.kt)("p",null,"We will use ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/machine-learning/concept-what-is-managed-feature-store"},"AzureML Managed Feature Store")," to run the example below. "),(0,r.kt)("h3",{id:"prerequisites-1"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create feature store with online materialization using instructions here ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Azure/azureml-examples/blob/featurestore/online/sdk/python/featurestore_sample/notebooks/sdk_only/5.%20Enable%20online%20store%20and%20run%20online%20inference.ipynb"},"Enable online materialization and run online inference"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A successfully created feature store by following the instructions should have an ",(0,r.kt)("inlineCode",{parentName:"p"},"account")," featureset with version as ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),". It will have ",(0,r.kt)("inlineCode",{parentName:"p"},"accountID")," as index column with features ",(0,r.kt)("inlineCode",{parentName:"p"},"accountAge"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"accountCountry"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"numPaymentRejects1dPerUser"),"."))),(0,r.kt)("h3",{id:"prompts-3"},"Prompts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Here we will set up a custom AzureMLFeatureStorePromptTemplate. This prompt template will take in an ",(0,r.kt)("inlineCode",{parentName:"p"},"account_id")," and optional ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),". It then fetches feature values from feature store and format those features into the output prompt. Note that the required input to this prompt template is just ",(0,r.kt)("inlineCode",{parentName:"p"},"account_id"),", since that is the only user defined piece (all other variables are looked up inside the prompt template).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Also note that this is a bootstrap example to showcase how LLM applications can leverage AzureML managed feature store. Developers are welcome to improve the prompt template further to suit their needs."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\nos.environ['AZURE_ML_CLI_PRIVATE_FEATURES_ENABLED'] = 'True'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Connecting to a Feature Store"}, {"imported": "StringPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.base.StringPromptTemplate.html", "title": "Connecting to a Feature Store"}]--\x3e\nimport pandas\n\nfrom pydantic import Extra\nfrom langchain.prompts import PromptTemplate, StringPromptTemplate\nfrom azure.identity import AzureCliCredential\nfrom azureml.featurestore import FeatureStoreClient, init_online_lookup, get_online_features\n\nclass AzureMLFeatureStorePromptTemplate(StringPromptTemplate, extra=Extra.allow):\n\n    def __init__(self, subscription_id: str, resource_group: str, feature_store_name: str, **kwargs):\n        # this is an example template for proof of concept and can be changed to suit the developer needs\n        template = """\n            {query}\n            ###\n            account id = {account_id}\n            account age = {account_age}\n            account country = {account_country}\n            payment rejects 1d per user = {payment_rejects_1d_per_user}\n            ###\n            """\n        prompt_template=PromptTemplate.from_template(template)\n        super().__init__(prompt=prompt_template, input_variables=["account_id", "query"])\n\n        # use AzureMLOnBehalfOfCredential() in spark context\n        credential = AzureCliCredential()\n\n        self._fs_client = FeatureStoreClient(\n            credential=credential,\n            subscription_id=subscription_id,\n            resource_group_name=resource_group,\n            name=feature_store_name)\n        \n        self._feature_set = self._fs_client.feature_sets.get(name="accounts", version=1)\n\n        init_online_lookup(self._feature_set.features, credential, force=True)\n        \n\n    def format(self, **kwargs) -> str:    \n        if "account_id" not in kwargs:\n            raise "account_id needed to fetch details from feature store"\n        account_id = kwargs.pop("account_id")        \n\n        query=""\n        if "query" in kwargs:\n            query = kwargs.pop("query")\n\n        # feature set is registered with accountID as entity index column.\n        obs = pandas.DataFrame({\'accountID\': [account_id]})\n\n        # get the feature details for the input entity from feature store.\n        df = get_online_features(self._feature_set.features, obs)        \n\n        # populate prompt template output using the fetched feature values.\n        kwargs["query"] = query\n        kwargs["account_id"] = account_id\n        kwargs["account_age"] = df["accountAge"][0]\n        kwargs["account_country"] = df["accountCountry"][0]\n        kwargs["payment_rejects_1d_per_user"] = df["numPaymentRejects1dPerUser"][0]\n\n        return self.prompt.format(**kwargs)\n')),(0,r.kt)("h3",{id:"test"},"Test"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Replace the place holders below with actual details of feature store that was created in previous steps\n\nprompt_template = AzureMLFeatureStorePromptTemplate(\n            subscription_id="",\n            resource_group="",\n            feature_store_name="")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print(prompt_template.format(account_id="A1829581630230790"))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n                \n                ###\n                account id = A1829581630230790\n                account age = 563.0\n                account country = GB\n                payment rejects 1d per user = 15.0\n                ###\n                \n"))),(0,r.kt)("h3",{id:"use-in-a-chain-3"},"Use in a chain"),(0,r.kt)("p",null,"We can now use this in a chain, successfully creating a chain that achieves personalization backed by the AzureML Managed Feature Store."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Connecting to a Feature Store"}]--\x3e\nos.environ["OPENAI_API_KEY"]="" # Fill the open ai key here\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain import LLMChain\n\nchain = LLMChain(llm=ChatOpenAI(), prompt=prompt_template)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# NOTE: developer\'s can further fine tune AzureMLFeatureStorePromptTemplate\n# for getting even more accurate results for the input query\nchain.predict(account_id="A1829581630230790", query ="write a small thank you note within 20 words if account age > 10 using the account stats")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    'Thank you for being a valued member for over 10 years! We appreciate your continued support.'\n"))))}d.isMDXComponent=!0}}]);