"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[52644],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>m});var r=a(67294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var i=r.createContext({}),c=function(e){var n=r.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},s=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),h=c(a),u=t,m=h["".concat(i,".").concat(u)]||h[u]||d[u]||o;return a?r.createElement(m,l(l({ref:n},s),{},{components:a})):r.createElement(m,l({ref:n},s))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,l=new Array(o);l[0]=u;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[h]="string"==typeof e?e:t,l[1]=p;for(var c=2;c<o;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},18398:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=a(87462),t=(a(67294),a(3905));const o={},l="FalkorDBQAChain",p={unversionedId:"use_cases/more/graph/graph_falkordb_qa",id:"use_cases/more/graph/graph_falkordb_qa",title:"FalkorDBQAChain",description:"This notebook shows how to use LLMs to provide a natural language interface to FalkorDB database.",source:"@site/docs/use_cases/more/graph/graph_falkordb_qa.md",sourceDirName:"use_cases/more/graph",slug:"/use_cases/more/graph/graph_falkordb_qa",permalink:"/langchain/docs/use_cases/more/graph/graph_falkordb_qa",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Neo4j DB QA chain",permalink:"/langchain/docs/use_cases/more/graph/graph_cypher_qa"},next:{title:"HugeGraph QA Chain",permalink:"/langchain/docs/use_cases/more/graph/graph_hugegraph_qa"}},i={},c=[{value:"Create a graph connection and insert some demo data.",id:"create-a-graph-connection-and-insert-some-demo-data",level:3},{value:"Creating FalkorDBQAChain",id:"creating-falkordbqachain",level:3},{value:"Querying the graph",id:"querying-the-graph",level:3}],s=(h="CodeOutputBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.kt)("div",e)});var h;const d={toc:c},u="wrapper";function m(e){let{components:n,...a}=e;return(0,t.kt)(u,(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"falkordbqachain"},"FalkorDBQAChain"),(0,t.kt)("p",null,"This notebook shows how to use LLMs to provide a natural language interface to FalkorDB database."),(0,t.kt)("p",null,"FalkorDB is a low latency property graph database management system. You can simply run its docker locally:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 6379:6379 -it --rm falkordb/falkordb:edge\n")),(0,t.kt)("p",null,"Once launched, you can simply start creating a database on the local machine and connect to it."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chat_models import ChatOpenAI\nfrom langchain.graphs import FalkorDBGraph\nfrom langchain.chains import FalkorDBQAChain\n")),(0,t.kt)("h3",{id:"create-a-graph-connection-and-insert-some-demo-data"},"Create a graph connection and insert some demo data."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'graph = FalkorDBGraph(database="movies")\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"graph.query(\"\"\"\n    CREATE \n        (al:Person {name: 'Al Pacino', birthDate: '1940-04-25'}),\n        (robert:Person {name: 'Robert De Niro', birthDate: '1943-08-17'}),\n        (tom:Person {name: 'Tom Cruise', birthDate: '1962-07-3'}),\n        (val:Person {name: 'Val Kilmer', birthDate: '1959-12-31'}),\n        (anthony:Person {name: 'Anthony Edwards', birthDate: '1962-7-19'}),\n        (meg:Person {name: 'Meg Ryan', birthDate: '1961-11-19'}),\n\n        (god1:Movie {title: 'The Godfather'}),\n        (god2:Movie {title: 'The Godfather: Part II'}),\n        (god3:Movie {title: 'The Godfather Coda: The Death of Michael Corleone'}),\n        (top:Movie {title: 'Top Gun'}),\n\n        (al)-[:ACTED_IN]->(god1),\n        (al)-[:ACTED_IN]->(god2),\n        (al)-[:ACTED_IN]->(god3),\n        (robert)-[:ACTED_IN]->(god2),\n        (tom)-[:ACTED_IN]->(top),\n        (val)-[:ACTED_IN]->(top),\n        (anthony)-[:ACTED_IN]->(top),\n        (meg)-[:ACTED_IN]->(top)\n\"\"\")\n")),(0,t.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    []\n"))),(0,t.kt)("h3",{id:"creating-falkordbqachain"},"Creating FalkorDBQAChain"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"graph.refresh_schema()\nprint(graph.schema)\n\nimport os\nos.environ['OPENAI_API_KEY']='API_KEY_HERE'\n")),(0,t.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    Node properties: [[OrderedDict([('label', None), ('properties', ['name', 'birthDate', 'title'])])]]\n    Relationships properties: [[OrderedDict([('type', None), ('properties', [])])]]\n    Relationships: [['(:Person)-[:ACTED_IN]->(:Movie)']]\n    \n"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"chain = FalkorDBQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True\n)\n")),(0,t.kt)("h3",{id:"querying-the-graph"},"Querying the graph"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Who played in Top Gun?")\n')),(0,t.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new FalkorDBQAChain chain...\n    Generated Cypher:\n    MATCH (p:Person)-[:ACTED_IN]->(m:Movie)\n    WHERE m.title = 'Top Gun'\n    RETURN p.name\n    Full Context:\n    [['Tom Cruise'], ['Val Kilmer'], ['Anthony Edwards'], ['Meg Ryan'], ['Tom Cruise'], ['Val Kilmer'], ['Anthony Edwards'], ['Meg Ryan']]\n    \n    > Finished chain.\n\n\n\n\n\n    'Tom Cruise, Val Kilmer, Anthony Edwards, and Meg Ryan played in Top Gun.'\n"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Who is the oldest actor who played in The Godfather: Part II?")\n')),(0,t.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new FalkorDBQAChain chain...\n    Generated Cypher:\n    MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)\n    WHERE m.title = 'The Godfather: Part II'\n    RETURN p.name\n    ORDER BY p.birthDate ASC\n    LIMIT 1\n    Full Context:\n    [['Al Pacino']]\n    \n    > Finished chain.\n\n\n\n\n\n    'The oldest actor who played in The Godfather: Part II is Al Pacino.'\n"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Robert De Niro played in which movies?")\n')),(0,t.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new FalkorDBQAChain chain...\n    Generated Cypher:\n    MATCH (p:Person {name: 'Robert De Niro'})-[:ACTED_IN]->(m:Movie)\n    RETURN m.title\n    Full Context:\n    [['The Godfather: Part II'], ['The Godfather: Part II']]\n    \n    > Finished chain.\n\n\n\n\n\n    'Robert De Niro played in \"The Godfather: Part II\".'\n"))))}m.isMDXComponent=!0}}]);