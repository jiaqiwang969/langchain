"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[37097],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,u=d["".concat(i,".").concat(m)]||d[m]||h[m]||o;return n?a.createElement(u,s(s({ref:t},p),{},{components:n})):a.createElement(u,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[d]="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={},s="DashVector",c={unversionedId:"integrations/vectorstores/dashvector",id:"integrations/vectorstores/dashvector",title:"DashVector",description:"DashVector is a fully-managed vectorDB service that supports high-dimension dense and sparse vectors, real-time insertion and filtered search. It is built to scale automatically and can adapt to different application requirements.",source:"@site/docs/integrations/vectorstores/dashvector.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/dashvector",permalink:"/langchain/docs/integrations/vectorstores/dashvector",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"ClickHouse",permalink:"/langchain/docs/integrations/vectorstores/clickhouse"},next:{title:"Dingo",permalink:"/langchain/docs/integrations/vectorstores/dingo"}},i={},l=[{value:"Install",id:"install",level:2},{value:"Example",id:"example",level:2}],p=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const h={toc:l},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dashvector"},"DashVector"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://help.aliyun.com/document_detail/2510225.html"},"DashVector")," is a fully-managed vectorDB service that supports high-dimension dense and sparse vectors, real-time insertion and filtered search. It is built to scale automatically and can adapt to different application requirements.")),(0,r.kt)("p",null,"This notebook shows how to use functionality related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DashVector")," vector database."),(0,r.kt)("p",null,"To use DashVector, you must have an API key.\nHere are the ",(0,r.kt)("a",{parentName:"p",href:"https://help.aliyun.com/document_detail/2510223.html"},"installation instructions"),"."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install dashvector dashscope\n")),(0,r.kt)("p",null,"We want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"DashScopeEmbeddings")," so we also have to get the Dashscope API Key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["DASHVECTOR_API_KEY"] = getpass.getpass("DashVector API Key:")\nos.environ["DASHSCOPE_API_KEY"] = getpass.getpass("DashScope API Key:")\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "DashScopeEmbeddings", "source": "langchain.embeddings.dashscope", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.dashscope.DashScopeEmbeddings.html", "title": "DashVector"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "DashVector"}, {"imported": "DashVector", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.dashvector.DashVector.html", "title": "DashVector"}]--\x3e\nfrom langchain.embeddings.dashscope import DashScopeEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import DashVector\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "DashVector"}]--\x3e\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader("../../modules/state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = DashScopeEmbeddings()\n')),(0,r.kt)("p",null,"We can create DashVector from documents."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'dashvector = DashVector.from_documents(docs, embeddings)\n\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = dashvector.similarity_search(query)\nprint(docs)\n')),(0,r.kt)("p",null,"We can add texts with meta datas and ids, and search with meta filter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'texts = ["foo", "bar", "baz"]\nmetadatas = [{"key": i} for i in range(len(texts))]\nids = ["0", "1", "2"]\n\ndashvector.add_texts(texts, metadatas=metadatas, ids=ids)\n\ndocs = dashvector.similarity_search("foo", filter="key = 2")\nprint(docs)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content='baz', metadata={'key': 2})]\n"))))}u.isMDXComponent=!0}}]);