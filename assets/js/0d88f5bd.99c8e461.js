"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[92055],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),i=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=i(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=i(t),h=o,d=c["".concat(p,".").concat(h)]||c[h]||u[h]||r;return t?a.createElement(d,s(s({ref:n},m),{},{components:t})):a.createElement(d,s({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=h;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:o,s[1]=l;for(var i=2;i<r;i++)s[i]=t[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},34389:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var a=t(87462),o=(t(67294),t(3905));const r={},s="Cookbook",l={unversionedId:"expression_language/cookbook",id:"expression_language/cookbook",title:"Cookbook",description:"In this notebook we'll take a look at a few common types of sequences to create.",source:"@site/docs/expression_language/cookbook.md",sourceDirName:"expression_language",slug:"/expression_language/cookbook",permalink:"/langchain/docs/expression_language/cookbook",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"LangChain Expression Language (LCEL)",permalink:"/langchain/docs/expression_language/"},next:{title:"LangChain Expression Language (LCEL)",permalink:"/langchain/docs/expression_language/"}},p={},i=[{value:"PromptTemplate + LLM",id:"prompttemplate--llm",level:2},{value:"Attaching Stop Sequences",id:"attaching-stop-sequences",level:3},{value:"Attaching Function Call information",id:"attaching-function-call-information",level:3},{value:"PromptTemplate + LLM + OutputParser",id:"prompttemplate--llm--outputparser",level:2},{value:"Functions Output Parser",id:"functions-output-parser",level:3},{value:"Passthroughs and itemgetter",id:"passthroughs-and-itemgetter",level:2},{value:"LLMChain + Retriever",id:"llmchain--retriever",level:2},{value:"Conversational Retrieval Chain",id:"conversational-retrieval-chain",level:2},{value:"With Memory and returning source documents",id:"with-memory-and-returning-source-documents",level:3},{value:"Multiple LLM Chains",id:"multiple-llm-chains",level:2},{value:"Branching and Merging",id:"branching-and-merging",level:3},{value:"Router",id:"router",level:2},{value:"Tools",id:"tools",level:2},{value:"Arbitrary Functions",id:"arbitrary-functions",level:2},{value:"Accepting a Runnable Config",id:"accepting-a-runnable-config",level:2},{value:"SQL Database",id:"sql-database",level:2},{value:"Code Writing",id:"code-writing",level:2},{value:"Memory",id:"memory",level:2},{value:"Moderation",id:"moderation",level:2}],m=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const u={toc:i},h="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(h,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cookbook"},"Cookbook"),(0,o.kt)("p",null,"In this notebook we'll take a look at a few common types of sequences to create."),(0,o.kt)("h2",{id:"prompttemplate--llm"},"PromptTemplate + LLM"),(0,o.kt)("p",null,"A PromptTemplate -> LLM is a core chain that is used in most other larger chains/systems."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "Cookbook"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Cookbook"}]--\x3e\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"model = ChatOpenAI()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'prompt = ChatPromptTemplate.from_template("tell me a joke about {foo}")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain = prompt | model\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"foo": "bears"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="Why don\'t bears wear shoes?\\n\\nBecause they have bear feet!", additional_kwargs={}, example=False)\n'))),(0,o.kt)("p",null,"Often times we want to attach kwargs to the model that's passed in. Here's a few examples of that:"),(0,o.kt)("h3",{id:"attaching-stop-sequences"},"Attaching Stop Sequences"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain = prompt | model.bind(stop=["\\n"])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"foo": "bears"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="Why don\'t bears wear shoes?", additional_kwargs={}, example=False)\n'))),(0,o.kt)("h3",{id:"attaching-function-call-information"},"Attaching Function Call information"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'functions = [\n    {\n      "name": "joke",\n      "description": "A joke",\n      "parameters": {\n        "type": "object",\n        "properties": {\n          "setup": {\n            "type": "string",\n            "description": "The setup for the joke"\n          },\n          "punchline": {\n            "type": "string",\n            "description": "The punchline for the joke"\n          }\n        },\n        "required": ["setup", "punchline"]\n      }\n    }\n  ]\nchain = prompt | model.bind(function_call= {"name": "joke"}, functions= functions)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"foo": "bears"}, config={})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    AIMessage(content='', additional_kwargs={'function_call': {'name': 'joke', 'arguments': '{\\n  \"setup\": \"Why don\\'t bears wear shoes?\",\\n  \"punchline\": \"Because they have bear feet!\"\\n}'}}, example=False)\n"))),(0,o.kt)("h2",{id:"prompttemplate--llm--outputparser"},"PromptTemplate + LLM + OutputParser"),(0,o.kt)("p",null,"We can also add in an output parser to easily trasform the raw LLM/ChatModel output into a more workable format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "StrOutputParser", "source": "langchain.schema.output_parser", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.output_parser.StrOutputParser.html", "title": "Cookbook"}]--\x3e\nfrom langchain.schema.output_parser import StrOutputParser\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain = prompt | model | StrOutputParser()\n")),(0,o.kt)("p",null,"Notice that this now returns a string - a much more workable format for downstream tasks"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"foo": "bears"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \"Sure, here's a bear joke for you:\\n\\nWhy don't bears like fast food?\\n\\nBecause they can't catch it!\"\n"))),(0,o.kt)("h3",{id:"functions-output-parser"},"Functions Output Parser"),(0,o.kt)("p",null,"When you specify the function to return, you may just want to parse that directly"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "JsonOutputFunctionsParser", "source": "langchain.output_parsers.openai_functions", "docs": "https://api.python.langchain.com/en/latest/output_parsers/langchain.output_parsers.openai_functions.JsonOutputFunctionsParser.html", "title": "Cookbook"}]--\x3e\nfrom langchain.output_parsers.openai_functions import JsonOutputFunctionsParser\nchain = (\n    prompt \n    | model.bind(function_call= {"name": "joke"}, functions= functions) \n    | JsonOutputFunctionsParser()\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"foo": "bears"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'setup': \"Why don't bears wear shoes?\",\n     'punchline': 'Because they have bear feet!'}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "JsonKeyOutputFunctionsParser", "source": "langchain.output_parsers.openai_functions", "docs": "https://api.python.langchain.com/en/latest/output_parsers/langchain.output_parsers.openai_functions.JsonKeyOutputFunctionsParser.html", "title": "Cookbook"}]--\x3e\nfrom langchain.output_parsers.openai_functions import JsonKeyOutputFunctionsParser\nchain = (\n    prompt \n    | model.bind(function_call= {"name": "joke"}, functions= functions) \n    | JsonKeyOutputFunctionsParser(key_name="setup")\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"foo": "bears"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "Why don\'t bears wear shoes?"\n'))),(0,o.kt)("h2",{id:"passthroughs-and-itemgetter"},"Passthroughs and itemgetter"),(0,o.kt)("p",null,"Often times when constructing a chain you may want to pass along original input variables to future steps in the chain. How exactly you do this depends on what exactly the input is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If the original input was a string, then you likely just want to pass along the string. This can be done with ",(0,o.kt)("inlineCode",{parentName:"li"},"RunnablePassthrough"),". For an example of this, see ",(0,o.kt)("inlineCode",{parentName:"li"},"LLMChain + Retriever")),(0,o.kt)("li",{parentName:"ul"},"If the original input was a dictionary, then you likely want to pass along specific keys. This can be done with ",(0,o.kt)("inlineCode",{parentName:"li"},"itemgetter"),". For an example of this see ",(0,o.kt)("inlineCode",{parentName:"li"},"Multiple LLM Chains"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RunnablePassthrough", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.passthrough.RunnablePassthrough.html", "title": "Cookbook"}]--\x3e\nfrom langchain.schema.runnable import RunnablePassthrough\nfrom operator import itemgetter\n')),(0,o.kt)("h2",{id:"llmchain--retriever"},"LLMChain + Retriever"),(0,o.kt)("p",null,'Let\'s now look at adding in a retrieval step, which adds up to a "retrieval-augmented generation" chain'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Chroma", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.chroma.Chroma.html", "title": "Cookbook"}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Cookbook"}, {"imported": "RunnablePassthrough", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.passthrough.RunnablePassthrough.html", "title": "Cookbook"}]--\x3e\nfrom langchain.vectorstores import Chroma\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.schema.runnable import RunnablePassthrough\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Create the retriever\nvectorstore = Chroma.from_texts(["harrison worked at kensho"], embedding=OpenAIEmbeddings())\nretriever = vectorstore.as_retriever()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = """Answer the question based only on the following context:\n{context}\n\nQuestion: {question}\n"""\nprompt = ChatPromptTemplate.from_template(template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain = (\n    {"context": retriever, "question": RunnablePassthrough()} \n    | prompt \n    | model \n    | StrOutputParser()\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke("where did harrison work?")\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Number of requested results 4 is greater than number of elements in index 1, updating n_results = 1\n\n\n\n\n\n    'Harrison worked at Kensho.'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = """Answer the question based only on the following context:\n{context}\n\nQuestion: {question}\n\nAnswer in the following language: {language}\n"""\nprompt = ChatPromptTemplate.from_template(template)\n\nchain = {\n    "context": itemgetter("question") | retriever, \n    "question": itemgetter("question"), \n    "language": itemgetter("language")\n} | prompt | model | StrOutputParser()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"question": "where did harrison work", "language": "italian"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Number of requested results 4 is greater than number of elements in index 1, updating n_results = 1\n\n\n\n\n\n    'Harrison ha lavorato a Kensho.'\n"))),(0,o.kt)("h2",{id:"conversational-retrieval-chain"},"Conversational Retrieval Chain"),(0,o.kt)("p",null,"We can easily add in conversation history. This primarily means adding in chat_message_history"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RunnableMap", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.base.RunnableMap.html", "title": "Cookbook"}, {"imported": "format_document", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.prompt_template.format_document.html", "title": "Cookbook"}]--\x3e\nfrom langchain.schema.runnable import RunnableMap\nfrom langchain.schema import format_document\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts.prompt", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Cookbook"}]--\x3e\nfrom langchain.prompts.prompt import PromptTemplate\n\n_template = """Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone question:"""\nCONDENSE_QUESTION_PROMPT = PromptTemplate.from_template(_template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = """Answer the question based only on the following context:\n{context}\n\nQuestion: {question}\n"""\nANSWER_PROMPT = ChatPromptTemplate.from_template(template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'DEFAULT_DOCUMENT_PROMPT = PromptTemplate.from_template(template="{page_content}")\ndef _combine_documents(docs, document_prompt = DEFAULT_DOCUMENT_PROMPT, document_separator="\\n\\n"):\n    doc_strings = [format_document(doc, document_prompt) for doc in docs]\n    return document_separator.join(doc_strings)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from typing import Tuple, List\ndef _format_chat_history(chat_history: List[Tuple]) -> str:\n    buffer = ""\n    for dialogue_turn in chat_history:\n        human = "Human: " + dialogue_turn[0]\n        ai = "Assistant: " + dialogue_turn[1]\n        buffer += "\\n" + "\\n".join([human, ai])\n    return buffer\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'_inputs = RunnableMap(\n    {\n        "standalone_question": {\n            "question": lambda x: x["question"],\n            "chat_history": lambda x: _format_chat_history(x[\'chat_history\'])\n        } | CONDENSE_QUESTION_PROMPT | ChatOpenAI(temperature=0) | StrOutputParser(),\n    }\n)\n_context = {\n    "context": itemgetter("standalone_question") | retriever | _combine_documents,\n    "question": lambda x: x["standalone_question"]\n}\nconversational_qa_chain = _inputs | _context | ANSWER_PROMPT | ChatOpenAI()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversational_qa_chain.invoke({\n    "question": "where did harrison work?",\n    "chat_history": [],\n})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Number of requested results 4 is greater than number of elements in index 1, updating n_results = 1\n\n\n\n\n\n    AIMessage(content='Harrison was employed at Kensho.', additional_kwargs={}, example=False)\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversational_qa_chain.invoke({\n    "question": "where did he work?",\n    "chat_history": [("Who wrote this notebook?", "Harrison")],\n})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Number of requested results 4 is greater than number of elements in index 1, updating n_results = 1\n\n\n\n\n\n    AIMessage(content='Harrison worked at Kensho.', additional_kwargs={}, example=False)\n"))),(0,o.kt)("h3",{id:"with-memory-and-returning-source-documents"},"With Memory and returning source documents"),(0,o.kt)("p",null,"This shows how to use memory with the above. For memory, we need to manage that outside at the memory. For returning the retrieved documents, we just need to pass them through all the way."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ConversationBufferMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.buffer.ConversationBufferMemory.html", "title": "Cookbook"}]--\x3e\nfrom langchain.memory import ConversationBufferMemory\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memory = ConversationBufferMemory(return_messages=True, output_key="answer", input_key="question")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# First we add a step to load memory\n# This needs to be a RunnableMap because its the first input\nloaded_memory = RunnableMap(\n    {\n        "question": itemgetter("question"),\n        "memory": memory.load_memory_variables,\n    }\n)\n# Next we add a step to expand memory into the variables\nexpanded_memory = {\n    "question": itemgetter("question"),\n    "chat_history": lambda x: x["memory"]["history"]\n}\n\n# Now we calculate the standalone question\nstandalone_question = {\n    "standalone_question": {\n        "question": lambda x: x["question"],\n        "chat_history": lambda x: _format_chat_history(x[\'chat_history\'])\n    } | CONDENSE_QUESTION_PROMPT | ChatOpenAI(temperature=0) | StrOutputParser(),\n}\n# Now we retrieve the documents\nretrieved_documents = {\n    "docs": itemgetter("standalone_question") | retriever,\n    "question": lambda x: x["standalone_question"]\n}\n# Now we construct the inputs for the final prompt\nfinal_inputs = {\n    "context": lambda x: _combine_documents(x["docs"]),\n    "question": itemgetter("question")\n}\n# And finally, we do the part that returns the answers\nanswer = {\n    "answer": final_inputs | ANSWER_PROMPT | ChatOpenAI(),\n    "docs": itemgetter("docs"),\n}\n# And now we put it all together!\nfinal_chain = loaded_memory | expanded_memory | standalone_question | retrieved_documents | answer\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'inputs = {"question": "where did harrison work?"}\nresult = final_chain.invoke(inputs)\nresult\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Number of requested results 4 is greater than number of elements in index 1, updating n_results = 1\n\n\n\n\n\n    {'answer': AIMessage(content='Harrison was employed at Kensho.', additional_kwargs={}, example=False),\n     'docs': [Document(page_content='harrison worked at kensho', metadata={})]}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Note that the memory does not save automatically\n# This will be improved in the future\n# For now you need to save it yourself\nmemory.save_context(inputs, {"answer": result["answer"].content})\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'history': [HumanMessage(content='where did harrison work?', additional_kwargs={}, example=False),\n      AIMessage(content='Harrison was employed at Kensho.', additional_kwargs={}, example=False)]}\n"))),(0,o.kt)("h2",{id:"multiple-llm-chains"},"Multiple LLM Chains"),(0,o.kt)("p",null,"This can also be used to string together multiple LLMChains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from operator import itemgetter\n\nprompt1 = ChatPromptTemplate.from_template("what is the city {person} is from?")\nprompt2 = ChatPromptTemplate.from_template("what country is the city {city} in? respond in {language}")\n\nchain1 = prompt1 | model | StrOutputParser()\n\nchain2 = {"city": chain1, "language": itemgetter("language")} | prompt2 | model | StrOutputParser()\n\nchain2.invoke({"person": "obama", "language": "spanish"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'El pa\xeds en el que se encuentra la ciudad de Honolulu, Haw\xe1i, donde naci\xf3 Barack Obama, el 44\xba presidente de los Estados Unidos, es Estados Unidos.'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RunnableMap", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.base.RunnableMap.html", "title": "Cookbook"}]--\x3e\nfrom langchain.schema.runnable import RunnableMap\nprompt1 = ChatPromptTemplate.from_template("generate a random color")\nprompt2 = ChatPromptTemplate.from_template("what is a fruit of color: {color}")\nprompt3 = ChatPromptTemplate.from_template("what is countries flag that has the color: {color}")\nprompt4 = ChatPromptTemplate.from_template("What is the color of {fruit} and {country}")\nchain1 = prompt1 | model | StrOutputParser()\nchain2 = RunnableMap(steps={"color": chain1}) | {\n    "fruit": prompt2 | model | StrOutputParser(),\n    "country": prompt3 | model | StrOutputParser(),\n} | prompt4\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain2.invoke({})\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    ChatPromptValue(messages=[HumanMessage(content="What is the color of A fruit that is of color #FF4500 is typically an orange fruit. and The country\'s flag that has the color #FF4500 is the flag of India.", additional_kwargs={}, example=False)])\n'))),(0,o.kt)("h3",{id:"branching-and-merging"},"Branching and Merging"),(0,o.kt)("p",null,"You may want the output of one component to be processed by 2 or more other components. ",(0,o.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.base.RunnableMap.html"},"RunnableMaps")," let you split or fork the chain so multiple components can process the input in parallel. Later, other components can join or merge the results to synthesize a final response. This type of chain creates a computation graph that looks like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"     Input\n      / \\\n     /   \\\n Branch1 Branch2\n     \\   /\n      \\ /\n      Combine\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'planner = (\n    ChatPromptTemplate.from_template(\n        "Generate an argument about: {input}"\n    )\n    | ChatOpenAI()\n    | StrOutputParser()\n    | {"base_response": RunnablePassthrough()}\n)\n\narguments_for = (\n    ChatPromptTemplate.from_template(\n        "List the pros or positive aspects of {base_response}"\n    )\n    | ChatOpenAI()\n    | StrOutputParser()\n)\narguments_against =  (\n    ChatPromptTemplate.from_template(\n        "List the cons or negative aspects of {base_response}"\n    )\n    | ChatOpenAI()\n    | StrOutputParser()\n)\n\nfinal_responder = (\n    ChatPromptTemplate.from_messages(\n        [\n            ("ai", "{original_response}"),\n            ("human", "Pros:\\n{results_1}\\n\\nCons:\\n{results_2}"),\n            ("system", "Generate a final response given the critique"),\n        ]\n    )\n    | ChatOpenAI()\n    | StrOutputParser()\n)\n\nchain = (\n    planner \n    | {\n        "results_1": arguments_for,\n        "results_2": arguments_against,\n        "original_response": itemgetter("base_response"),\n    }\n    | final_responder\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"input": "scrum"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "While Scrum has its limitations and potential drawbacks, it is important to note that these can be mitigated with proper understanding, implementation, and adaptation. Here are some ways to address the critique:\\n\\n1. Lack of structure: While Scrum promotes self-organization, it is essential to provide clear guidelines, define roles and responsibilities, and establish a shared understanding of the project\'s goals and expectations. This can be achieved through effective communication and regular alignment meetings.\\n\\n2. Time and resource constraints: Proper planning, prioritization, and resource allocation are crucial in managing the sprint cycles effectively. Teams can leverage tools and techniques such as backlog refinement, sprint planning, and capacity planning to ensure that workloads are manageable and realistic.\\n\\n3. Managing large teams: Scaling frameworks like Scrum of Scrums or LeSS (Large-Scale Scrum) can be implemented to coordinate the efforts of multiple Scrum teams. These frameworks provide mechanisms for communication, synchronization, and alignment across teams.\\n\\n4. Limited documentation: Although Scrum emphasizes working software over comprehensive documentation, it is important to strike a balance. Teams can adopt lightweight documentation practices such as user stories, acceptance criteria, and sprint reviews to capture relevant information and promote knowledge transfer.\\n\\n5. Resolving conflicts and fostering collaboration: Conflict resolution techniques and team-building activities can help address conflicts and foster a collaborative environment. Encouraging open and honest communication, promoting a culture of trust and respect, and providing opportunities for team members to share ideas and perspectives can contribute to better team dynamics.\\n\\n6. Long-term planning: While Scrum focuses on short-term goals, it is still important to have a long-term vision and roadmap. Teams can incorporate longer-term planning activities, such as release planning or product roadmapping, to align the project with broader strategic objectives and ensure a balance between adaptability and long-term goals.\\n\\n7. Skilled Scrum Master: Investing in the training and development of a skilled Scrum Master is crucial. Organizations can provide training and support for Scrum Masters to enhance their understanding of Scrum principles, facilitation skills, and ability to address challenges effectively.\\n\\n8. Scope management: To prevent scope creep, teams should establish a well-defined product backlog and prioritize requirements based on value and feasibility. Regular backlog refinement and stakeholder engagement can help ensure that changes are evaluated and incorporated in a controlled manner.\\n\\n9. Applicability to different domains: While Scrum originated in software development, it has been successfully applied in various industries and domains. Organizations can tailor Scrum practices to suit their specific needs, making necessary adaptations and incorporating domain-specific practices as required.\\n\\nBy addressing these concerns and adapting Scrum to the specific context, organizations can maximize the benefits of Scrum while mitigating potential drawbacks. It is important to continuously evaluate and improve the implementation to ensure the best outcomes for the project and the team."\n'))),(0,o.kt)("h2",{id:"router"},"Router"),(0,o.kt)("p",null,"You can also use the router runnable to conditionally route inputs to different runnables."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_tagging_chain_pydantic", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.openai_functions.tagging.create_tagging_chain_pydantic.html", "title": "Cookbook"}]--\x3e\nfrom langchain.chains import create_tagging_chain_pydantic\nfrom pydantic import BaseModel, Field\n\nclass PromptToUse(BaseModel):\n    """Used to determine which prompt to use to answer the user\'s input."""\n    \n    name: str = Field(description="Should be one of `math` or `english`")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"tagger = create_tagging_chain_pydantic(PromptToUse, ChatOpenAI(temperature=0))\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain1 = ChatPromptTemplate.from_template("You are a math genius. Answer the question: {question}") | ChatOpenAI()\nchain2 = ChatPromptTemplate.from_template("You are an english major. Answer the question: {question}") | ChatOpenAI()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RouterRunnable", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.router.RouterRunnable.html", "title": "Cookbook"}]--\x3e\nfrom langchain.schema.runnable import RouterRunnable\nrouter = RouterRunnable({"math": chain1, "english": chain2})\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain = {\n    "key": {"input": lambda x: x["question"]} | tagger | (lambda x: x[\'text\'].name),\n    "input": {"question": lambda x: x["question"]}\n} | router\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"question": "whats 2 + 2"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    AIMessage(content='Thank you for the compliment! The sum of 2 and 2 is 4.', additional_kwargs={}, example=False)\n"))),(0,o.kt)("h2",{id:"tools"},"Tools"),(0,o.kt)("p",null,"You can use any LangChain tool easily."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "DuckDuckGoSearchRun", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.ddg_search.tool.DuckDuckGoSearchRun.html", "title": "Cookbook"}]--\x3e\nfrom langchain.tools import DuckDuckGoSearchRun\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"search = DuckDuckGoSearchRun()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = """turn the following user input into a search query for a search engine:\n\n{input}"""\nprompt = ChatPromptTemplate.from_template(template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain = prompt | model | StrOutputParser() | search\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"input": "I\'d like to figure out what games are tonight"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \"What sports games are on TV today & tonight? Watch and stream live sports on TV today, tonight, tomorrow. Today's 2023 sports TV schedule includes football, basketball, baseball, hockey, motorsports, soccer and more. Watch on TV or stream online on ESPN, FOX, FS1, CBS, NBC, ABC, Peacock, Paramount+, fuboTV, local channels and many other networks. MLB Games Tonight: How to Watch on TV, Streaming & Odds - Wednesday, September 6. Texas Rangers second baseman Marcus Semien, left, tags out Houston Astros' Jose Altuve (27) who was attempting to stretch out a single in the seventh inning of a baseball game, Monday, Sept. 4, 2023, in Arlington, Texas. (AP Photo/Tony Gutierrez) (APMedia) There ... MLB Games Tonight: How to Watch on TV, Streaming & Odds - Sunday, September 3. Los Angeles Dodgers right fielder Mookie Betts, left, gives a thumbs up to Vanessa Bryant, right, widow of Kobe ... WEEK 16 NFL TV SCHEDULE. NFL Games Thursday, 12/21/23. TIME ET. TV. New Orleans at LA Rams. 8:15pm. AMZN. NFL Games Saturday, 12/23/23. TIME ET. The second half of tonight's college football schedule still has some good games remaining to watch on your television.. We've already seen an exciting one when Colorado upset TCU. And we saw some ...\"\n"))),(0,o.kt)("h2",{id:"arbitrary-functions"},"Arbitrary Functions"),(0,o.kt)("p",null,"You can use arbitrary functions in the pipeline"),(0,o.kt)("p",null,"Note that all inputs to these functions need to be a SINGLE argument. If you have a function that accepts multiple arguments, you should write a wrapper that accepts a single input and unpacks it into multiple argument."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RunnableLambda", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.base.RunnableLambda.html", "title": "Cookbook"}]--\x3e\nfrom langchain.schema.runnable import RunnableLambda\n\ndef length_function(text):\n    return len(text)\n\ndef _multiple_length_function(text1, text2):\n    return len(text1) * len(text2)\n\ndef multiple_length_function(_dict):\n    return _multiple_length_function(_dict["text1"], _dict["text2"])\n\nprompt = ChatPromptTemplate.from_template("what is {a} + {b}")\n\nchain1 = prompt | model\n\nchain = {\n    "a": itemgetter("foo") | RunnableLambda(length_function),\n    "b": {"text1": itemgetter("foo"), "text2": itemgetter("bar")} | RunnableLambda(multiple_length_function)\n} | prompt | model\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"foo": "bar", "bar": "gah"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    AIMessage(content='3 + 9 equals 12.', additional_kwargs={}, example=False)\n"))),(0,o.kt)("h2",{id:"accepting-a-runnable-config"},"Accepting a Runnable Config"),(0,o.kt)("p",null,"Runnable lambdas can optionally accept a ",(0,o.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.config.RunnableConfig.html?highlight=runnableconfig#langchain.schema.runnable.config.RunnableConfig"},"RunnableConfig"),", which they can use to pass callbacks, tags, and other configuration information to nested runs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RunnableConfig", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.config.RunnableConfig.html", "title": "Cookbook"}]--\x3e\nfrom langchain.schema.runnable import RunnableConfig\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import json\n\ndef parse_or_fix(text: str, config: RunnableConfig):\n    fixing_chain = (\n        ChatPromptTemplate.from_template(\n            "Fix the following text:\\n\\n```text\\n{input}\\n```\\nError: {error}"\n            " Don\'t narrate, just respond with the fixed data."\n        )\n        | ChatOpenAI()\n        | StrOutputParser()\n    )\n    for _ in range(3):\n        try:\n            return json.loads(text)\n        except Exception as e:\n            text = fixing_chain.invoke({"input": text, "error": e}, config)\n    return "Failed to parse"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "get_openai_callback", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.manager.get_openai_callback.html", "title": "Cookbook"}]--\x3e\nfrom langchain.callbacks import get_openai_callback\n\nwith get_openai_callback() as cb:\n    RunnableLambda(parse_or_fix).invoke("{foo: bar}", {"tags": ["my-tag"], "callbacks": [cb]})\n    print(cb)\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Tokens Used: 65\n        Prompt Tokens: 56\n        Completion Tokens: 9\n    Successful Requests: 1\n    Total Cost (USD): $0.00010200000000000001\n"))),(0,o.kt)("h2",{id:"sql-database"},"SQL Database"),(0,o.kt)("p",null,"We can also try to replicate our SQLDatabaseChain using this style."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = """Based on the table schema below, write a SQL query that would answer the user\'s question:\n{schema}\n\nQuestion: {question}\nSQL Query:"""\nprompt = ChatPromptTemplate.from_template(template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "SQLDatabase", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.sql_database.SQLDatabase.html", "title": "Cookbook"}]--\x3e\nfrom langchain.utilities import SQLDatabase\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'db = SQLDatabase.from_uri("sqlite:///../../../../notebooks/Chinook.db")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_schema(_):\n    return db.get_table_info()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def run_query(query):\n    return db.run(query)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'inputs = {\n    "schema": RunnableLambda(get_schema),\n    "question": itemgetter("question")\n}\nsql_response = (\n        RunnableMap(inputs)\n        | prompt\n        | model.bind(stop=["\\nSQLResult:"])\n        | StrOutputParser()\n    )\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'sql_response.invoke({"question": "How many employees are there?"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'SELECT COUNT(EmployeeId) FROM Employee'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = """Based on the table schema below, question, sql query, and sql response, write a natural language response:\n{schema}\n\nQuestion: {question}\nSQL Query: {query}\nSQL Response: {response}"""\nprompt_response = ChatPromptTemplate.from_template(template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'full_chain = (\n    RunnableMap({\n        "question": itemgetter("question"),\n        "query": sql_response,\n    }) \n    | {\n        "schema": RunnableLambda(get_schema),\n        "question": itemgetter("question"),\n        "query": itemgetter("query"),\n        "response": lambda x: db.run(x["query"])    \n    } \n    | prompt_response \n    | model\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'full_chain.invoke({"question": "How many employees are there?"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    AIMessage(content='There are 8 employees.', additional_kwargs={}, example=False)\n"))),(0,o.kt)("h2",{id:"code-writing"},"Code Writing"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PythonREPL", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.python.PythonREPL.html", "title": "Cookbook"}, {"imported": "SystemMessagePromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.SystemMessagePromptTemplate.html", "title": "Cookbook"}, {"imported": "HumanMessagePromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.HumanMessagePromptTemplate.html", "title": "Cookbook"}]--\x3e\nfrom langchain.utilities import PythonREPL\nfrom langchain.prompts import SystemMessagePromptTemplate, HumanMessagePromptTemplate\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = """Write some python code to solve the user\'s problem. \n\nReturn only python code in Markdown format, e.g.:\n\n```python\n....\n```"""\nprompt = ChatPromptTemplate(messages=[\n    SystemMessagePromptTemplate.from_template(template),\n    HumanMessagePromptTemplate.from_template("{input}")\n])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def _sanitize_output(text: str):\n    _, after = text.split("```python")\n    return after.split("```")[0]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain = prompt | model | StrOutputParser() | _sanitize_output | PythonREPL().run\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"input": "whats 2 plus 2"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Python REPL can execute arbitrary code. Use with caution.\n\n\n\n\n\n    '4\\n'\n"))),(0,o.kt)("h2",{id:"memory"},"Memory"),(0,o.kt)("p",null,"This shows how to add memory to an arbitrary chain. Right now, you can use the memory classes but need to hook it up manually"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ConversationBufferMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.buffer.ConversationBufferMemory.html", "title": "Cookbook"}, {"imported": "RunnableMap", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.base.RunnableMap.html", "title": "Cookbook"}, {"imported": "MessagesPlaceholder", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.MessagesPlaceholder.html", "title": "Cookbook"}]--\x3e\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.schema.runnable import RunnableMap\nfrom langchain.prompts import MessagesPlaceholder\nmodel = ChatOpenAI()\nprompt = ChatPromptTemplate.from_messages([\n    ("system", "You are a helpful chatbot"),\n    MessagesPlaceholder(variable_name="history"),\n    ("human", "{input}")\n])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory = ConversationBufferMemory(return_messages=True)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'history': []}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain = RunnableMap({\n    "input": lambda x: x["input"],\n    "memory": memory.load_memory_variables\n}) | {\n    "input": lambda x: x["input"],\n    "history": lambda x: x["memory"]["history"]\n} | prompt | model\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'inputs = {"input": "hi im bob"}\nresponse = chain.invoke(inputs)\nresponse\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    AIMessage(content='Hello Bob! How can I assist you today?', additional_kwargs={}, example=False)\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memory.save_context(inputs, {"output": response.content})\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'history': [HumanMessage(content='hi im bob', additional_kwargs={}, example=False),\n      AIMessage(content='Hello Bob! How can I assist you today?', additional_kwargs={}, example=False)]}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'inputs = {"input": "whats my name"}\nresponse = chain.invoke(inputs)\nresponse\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    AIMessage(content='Your name is Bob.', additional_kwargs={}, example=False)\n"))),(0,o.kt)("h2",{id:"moderation"},"Moderation"),(0,o.kt)("p",null,"This shows how to add in moderation (or other safeguards) around your LLM application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIModerationChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.moderation.OpenAIModerationChain.html", "title": "Cookbook"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Cookbook"}]--\x3e\nfrom langchain.chains import OpenAIModerationChain\nfrom langchain.llms import OpenAI\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"moderate = OpenAIModerationChain()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'model = OpenAI()\nprompt = ChatPromptTemplate.from_messages([\n    ("system", "repeat after me: {input}")\n])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain = prompt | model\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"input": "you are stupid"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    '\\n\\nYou are stupid.'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"moderated_chain = chain | moderate\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'moderated_chain.invoke({"input": "you are stupid"})\n')),(0,o.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'input': '\\n\\nYou are stupid.',\n     'output': \"Text was found that violates OpenAI's content policy.\"}\n"))))}d.isMDXComponent=!0}}]);