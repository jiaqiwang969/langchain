"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1785],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(n),u=o,h=p["".concat(c,".").concat(u)]||p[u]||d[u]||a;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},42088:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>m,metadata:()=>d,toc:()=>h});var r=n(87462),o=(n(67294),n(3905));const a=(i="CodeOutputBlock",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var i;const s={toc:[]},c="wrapper";function l(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.chains import ConversationChain\nfrom langchain.memory import ConversationBufferMemory\n\nconversation = ConversationChain(\n    llm=chat,\n    memory=ConversationBufferMemory()\n)\n\nconversation.run("Answer briefly. What are the first 3 colors of a rainbow?")\n# -> The first three colors of a rainbow are red, orange, and yellow.\nconversation.run("And the next 4?")\n# -> The next four colors of a rainbow are green, blue, indigo, and violet.\n')),(0,o.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'The next four colors of a rainbow are green, blue, indigo, and violet.'\n"))),(0,o.kt)("p",null,"Essentially, ",(0,o.kt)("inlineCode",{parentName:"p"},"BaseMemory")," defines an interface of how ",(0,o.kt)("inlineCode",{parentName:"p"},"langchain")," stores memory. It allows reading of stored data through ",(0,o.kt)("inlineCode",{parentName:"p"},"load_memory_variables")," method and storing new data through ",(0,o.kt)("inlineCode",{parentName:"p"},"save_context")," method. You can learn more about it in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/modules/memory/"},"Memory")," section."))}l.isMDXComponent=!0;const m={},p="Adding memory (state)",d={unversionedId:"modules/chains/how_to/memory",id:"modules/chains/how_to/memory",title:"Adding memory (state)",description:"Chains can be initialized with a Memory object, which will persist data across calls to the chain. This makes a Chain stateful.",source:"@site/docs/modules/chains/how_to/memory.mdx",sourceDirName:"modules/chains/how_to",slug:"/modules/chains/how_to/memory",permalink:"/langchain/docs/modules/chains/how_to/memory",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Loading from LangChainHub",permalink:"/langchain/docs/modules/chains/how_to/from_hub"},next:{title:"Using OpenAI functions",permalink:"/langchain/docs/modules/chains/how_to/openai_functions"}},u={},h=[{value:"Get started",id:"get-started",level:2}],f={toc:h},y="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(y,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"adding-memory-state"},"Adding memory (state)"),(0,o.kt)("p",null,"Chains can be initialized with a Memory object, which will persist data across calls to the chain. This makes a Chain stateful."),(0,o.kt)("h2",{id:"get-started"},"Get started"),(0,o.kt)(l,{mdxType:"GetStarted"}))}g.isMDXComponent=!0}}]);