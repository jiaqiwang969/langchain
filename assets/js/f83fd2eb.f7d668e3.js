"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[37208],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(h,i(i({ref:n},l),{},{components:t})):r.createElement(h,i({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85296:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const a={},i="Pinecone Hybrid Search",s={unversionedId:"integrations/retrievers/pinecone_hybrid_search",id:"integrations/retrievers/pinecone_hybrid_search",title:"Pinecone Hybrid Search",description:"Pinecone is a vector database with broad functionality.",source:"@site/docs/integrations/retrievers/pinecone_hybrid_search.md",sourceDirName:"integrations/retrievers",slug:"/integrations/retrievers/pinecone_hybrid_search",permalink:"/langchain/docs/integrations/retrievers/pinecone_hybrid_search",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Metal",permalink:"/langchain/docs/integrations/retrievers/metal"},next:{title:"PubMed",permalink:"/langchain/docs/integrations/retrievers/pubmed"}},c={},p=[{value:"Setup Pinecone",id:"setup-pinecone",level:2},{value:"Get embeddings and sparse encoders",id:"get-embeddings-and-sparse-encoders",level:2},{value:"Load Retriever",id:"load-retriever",level:2},{value:"Add texts (if necessary)",id:"add-texts-if-necessary",level:2},{value:"Use Retriever",id:"use-retriever",level:2}],l=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var d;const u={toc:p},m="wrapper";function h(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pinecone-hybrid-search"},"Pinecone Hybrid Search"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://docs.pinecone.io/docs/overview"},"Pinecone")," is a vector database with broad functionality.")),(0,o.kt)("p",null,"This notebook goes over how to use a retriever that under the hood uses Pinecone and Hybrid Search."),(0,o.kt)("p",null,"The logic of this retriever is taken from ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pinecone.io/docs/hybrid-search"},"this documentaion")),(0,o.kt)("p",null,"To use Pinecone, you must have an API key and an Environment.\nHere are the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pinecone.io/docs/quickstart"},"installation instructions"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#!pip install pinecone-client pinecone-text\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["PINECONE_API_KEY"] = getpass.getpass("Pinecone API Key:")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PineconeHybridSearchRetriever", "source": "langchain.retrievers", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.pinecone_hybrid_search.PineconeHybridSearchRetriever.html", "title": "Pinecone Hybrid Search"}]--\x3e\nfrom langchain.retrievers import PineconeHybridSearchRetriever\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'os.environ["PINECONE_ENVIRONMENT"] = getpass.getpass("Pinecone Environment:")\n')),(0,o.kt)("p",null,"We want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAIEmbeddings")," so we have to get the OpenAI API Key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,o.kt)("h2",{id:"setup-pinecone"},"Setup Pinecone"),(0,o.kt)("p",null,"You should only have to do this part once."),(0,o.kt)("p",null,"Note: it's important to make sure that the \"context\" field that holds the document text in the metadata is not indexed. Currently you need to specify explicitly the fields you do want to index. For more information checkout Pinecone's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pinecone.io/docs/manage-indexes#selective-metadata-indexing"},"docs"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport pinecone\n\napi_key = os.getenv("PINECONE_API_KEY") or "PINECONE_API_KEY"\n# find environment next to your API key in the Pinecone console\nenv = os.getenv("PINECONE_ENVIRONMENT") or "PINECONE_ENVIRONMENT"\n\nindex_name = "langchain-pinecone-hybrid-search"\n\npinecone.init(api_key=api_key, environment=env)\npinecone.whoami()\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    WhoAmIResponse(username='load', user_label='label', projectname='load-test')\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# create the index\npinecone.create_index(\n    name=index_name,\n    dimension=1536,  # dimensionality of dense model\n    metric="dotproduct",  # sparse values supported only for dotproduct\n    pod_type="s1",\n    metadata_config={"indexed": []},  # see explaination above\n)\n')),(0,o.kt)("p",null,"Now that its created, we can use it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"index = pinecone.Index(index_name)\n")),(0,o.kt)("h2",{id:"get-embeddings-and-sparse-encoders"},"Get embeddings and sparse encoders"),(0,o.kt)("p",null,"Embeddings are used for the dense vectors, tokenizer is used for the sparse vector"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Pinecone Hybrid Search"}]--\x3e\nfrom langchain.embeddings import OpenAIEmbeddings\n\nembeddings = OpenAIEmbeddings()\n')),(0,o.kt)("p",null,"To encode the text to sparse values you can either choose SPLADE or BM25. For out of domain tasks we recommend using BM25."),(0,o.kt)("p",null,"For more information about the sparse encoders you can checkout pinecone-text library ",(0,o.kt)("a",{parentName:"p",href:"https://pinecone-io.github.io/pinecone-text/pinecone_text.html"},"docs"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pinecone_text.sparse import BM25Encoder\n\n# or from pinecone_text.sparse import SpladeEncoder if you wish to work with SPLADE\n\n# use default tf-idf values\nbm25_encoder = BM25Encoder().default()\n")),(0,o.kt)("p",null,"The above code is using default tfids values. It's highly recommended to fit the tf-idf values to your own corpus. You can do it as follow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'corpus = ["foo", "bar", "world", "hello"]\n\n# fit tf-idf values on your corpus\nbm25_encoder.fit(corpus)\n\n# store the values to a json file\nbm25_encoder.dump("bm25_values.json")\n\n# load to your BM25Encoder object\nbm25_encoder = BM25Encoder().load("bm25_values.json")\n')),(0,o.kt)("h2",{id:"load-retriever"},"Load Retriever"),(0,o.kt)("p",null,"We can now construct the retriever!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"retriever = PineconeHybridSearchRetriever(\n    embeddings=embeddings, sparse_encoder=bm25_encoder, index=index\n)\n")),(0,o.kt)("h2",{id:"add-texts-if-necessary"},"Add texts (if necessary)"),(0,o.kt)("p",null,"We can optionally add texts to the retriever (if they aren't already in there)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'retriever.add_texts(["foo", "bar", "world", "hello"])\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:02<00:00,  2.27s/it]\n"))),(0,o.kt)("h2",{id:"use-retriever"},"Use Retriever"),(0,o.kt)("p",null,"We can now use the retriever!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'result = retriever.get_relevant_documents("foo")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"result[0]\n")),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Document(page_content='foo', metadata={})\n"))))}h.isMDXComponent=!0}}]);