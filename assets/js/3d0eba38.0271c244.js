"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[29819],{3905:(n,e,t)=>{t.d(e,{Zo:()=>h,kt:()=>g});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var p=a.createContext({}),l=function(n){var e=a.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},h=function(n){var e=l(n.components);return a.createElement(p.Provider,{value:e},n.children)},c="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,p=n.parentName,h=i(n,["components","mdxType","originalType","parentName"]),c=l(t),d=r,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return t?a.createElement(g,s(s({ref:e},h),{},{components:t})):a.createElement(g,s({ref:e},h))}));function g(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=n,i[c]="string"==typeof n?n:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},46275:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const o={},s="Xorbits",i={unversionedId:"integrations/toolkits/xorbits",id:"integrations/toolkits/xorbits",title:"Xorbits",description:"This notebook shows how to use agents to interact with Xorbits Pandas dataframe and Xorbits Numpy ndarray. It is mostly optimized for question answering.",source:"@site/docs/integrations/toolkits/xorbits.md",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/xorbits",permalink:"/langchain/docs/integrations/toolkits/xorbits",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Vectorstore",permalink:"/langchain/docs/integrations/toolkits/vectorstore"},next:{title:"Tools",permalink:"/langchain/docs/integrations/tools/"}},p={},l=[{value:"Pandas examples",id:"pandas-examples",level:2},{value:"Numpy examples",id:"numpy-examples",level:2}],h=(c="CodeOutputBlock",function(n){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)});var c;const u={toc:l},d="wrapper";function g(n){let{components:e,...t}=n;return(0,r.kt)(d,(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"xorbits"},"Xorbits"),(0,r.kt)("p",null,"This notebook shows how to use agents to interact with ",(0,r.kt)("a",{parentName:"p",href:"https://doc.xorbits.io/en/latest/reference/pandas/index.html"},"Xorbits Pandas")," dataframe and ",(0,r.kt)("a",{parentName:"p",href:"https://doc.xorbits.io/en/latest/reference/numpy/index.html"},"Xorbits Numpy")," ndarray. It is mostly optimized for question answering."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE: this agent calls the ",(0,r.kt)("inlineCode",{parentName:"strong"},"Python")," agent under the hood, which executes LLM generated Python code - this can be bad if the LLM generated Python code is harmful. Use cautiously.")),(0,r.kt)("h2",{id:"pandas-examples"},"Pandas examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_xorbits_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.xorbits.base.create_xorbits_agent.html", "title": "Xorbits"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Xorbits"}]--\x3e\nimport xorbits.pandas as pd\n\nfrom langchain.agents import create_xorbits_agent\nfrom langchain.llms import OpenAI\n\ndata = pd.read_csv("titanic.csv")\nagent = create_xorbits_agent(OpenAI(temperature=0), data, verbose=True)\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"      0%|          |   0.00/100 [00:00<?, ?it/s]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("How many rows and columns are there?")\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to count the number of rows and columns\n    Action: python_repl_ast\n    Action Input: data.shape\n    Observation: (891, 12)\n    Thought: I now know the final answer\n    Final Answer: There are 891 rows and 12 columns.\n    \n    > Finished chain.\n\n\n\n\n\n    'There are 891 rows and 12 columns.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("How many people are in pclass 1?")\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n\n\n\n      0%|          |   0.00/100 [00:00<?, ?it/s]\n\n\n    Thought: I need to count the number of people in pclass 1\n    Action: python_repl_ast\n    Action Input: data[data['Pclass'] == 1].shape[0]\n    Observation: 216\n    Thought: I now know the final answer\n    Final Answer: There are 216 people in pclass 1.\n    \n    > Finished chain.\n\n\n\n\n\n    'There are 216 people in pclass 1.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("whats the mean age?")\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to calculate the mean age\n    Action: python_repl_ast\n    Action Input: data['Age'].mean()\n\n\n      0%|          |   0.00/100 [00:00<?, ?it/s]\n\n\n    \n    Observation: 29.69911764705882\n    Thought: I now know the final answer\n    Final Answer: The mean age is 29.69911764705882.\n    \n    > Finished chain.\n\n\n\n\n\n    'The mean age is 29.69911764705882.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("Group the data by sex and find the average age for each group")\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to group the data by sex and then find the average age for each group\n    Action: python_repl_ast\n    Action Input: data.groupby('Sex')['Age'].mean()\n\n\n      0%|          |   0.00/100 [00:00<?, ?it/s]\n\n\n    \n    Observation: Sex\n    female    27.915709\n    male      30.726645\n    Name: Age, dtype: float64\n    Thought: I now know the average age for each group\n    Final Answer: The average age for female passengers is 27.92 and the average age for male passengers is 30.73.\n    \n    > Finished chain.\n\n\n\n\n\n    'The average age for female passengers is 27.92 and the average age for male passengers is 30.73.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run(\n    "Show the number of people whose age is greater than 30 and fare is between 30 and 50 , and pclass is either 1 or 2"\n)\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n\n\n\n      0%|          |   0.00/100 [00:00<?, ?it/s]\n\n\n    Thought: I need to filter the dataframe to get the desired result\n    Action: python_repl_ast\n    Action Input: data[(data['Age'] > 30) & (data['Fare'] > 30) & (data['Fare'] < 50) & ((data['Pclass'] == 1) | (data['Pclass'] == 2))].shape[0]\n    Observation: 20\n    Thought: I now know the final answer\n    Final Answer: 20\n    \n    > Finished chain.\n\n\n\n\n\n    '20'\n"))),(0,r.kt)("h2",{id:"numpy-examples"},"Numpy examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_xorbits_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.xorbits.base.create_xorbits_agent.html", "title": "Xorbits"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Xorbits"}]--\x3e\nimport xorbits.numpy as np\n\nfrom langchain.agents import create_xorbits_agent\nfrom langchain.llms import OpenAI\n\narr = np.array([1, 2, 3, 4, 5, 6])\nagent = create_xorbits_agent(OpenAI(temperature=0), arr, verbose=True)\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"      0%|          |   0.00/100 [00:00<?, ?it/s]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("Give the shape of the array ")\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to find out the shape of the array\n    Action: python_repl_ast\n    Action Input: data.shape\n    Observation: (6,)\n    Thought: I now know the final answer\n    Final Answer: The shape of the array is (6,).\n    \n    > Finished chain.\n\n\n\n\n\n    'The shape of the array is (6,).'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("Give the 2nd element of the array ")\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to access the 2nd element of the array\n    Action: python_repl_ast\n    Action Input: data[1]\n\n\n      0%|          |   0.00/100 [00:00<?, ?it/s]\n\n\n    \n    Observation: 2\n    Thought: I now know the final answer\n    Final Answer: 2\n    \n    > Finished chain.\n\n\n\n\n\n    '2'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run(\n    "Reshape the array into a 2-dimensional array with 2 rows and 3 columns, and then transpose it"\n)\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to reshape the array and then transpose it\n    Action: python_repl_ast\n    Action Input: np.reshape(data, (2,3)).T\n\n\n      0%|          |   0.00/100 [00:00<?, ?it/s]\n\n\n    \n    Observation: [[1 4]\n     [2 5]\n     [3 6]]\n    Thought: I now know the final answer\n    Final Answer: The reshaped and transposed array is [[1 4], [2 5], [3 6]].\n    \n    > Finished chain.\n\n\n\n\n\n    'The reshaped and transposed array is [[1 4], [2 5], [3 6]].'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run(\n    "Reshape the array into a 2-dimensional array with 3 rows and 2 columns and sum the array along the first axis"\n)\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to reshape the array and then sum it\n    Action: python_repl_ast\n    Action Input: np.sum(np.reshape(data, (3,2)), axis=0)\n\n\n      0%|          |   0.00/100 [00:00<?, ?it/s]\n\n\n    \n    Observation: [ 9 12]\n    Thought: I now know the final answer\n    Final Answer: The sum of the array along the first axis is [9, 12].\n    \n    > Finished chain.\n\n\n\n\n\n    'The sum of the array along the first axis is [9, 12].'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nagent = create_xorbits_agent(OpenAI(temperature=0), arr, verbose=True)\n")),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"      0%|          |   0.00/100 [00:00<?, ?it/s]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("calculate the covariance matrix")\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to use the numpy covariance function\n    Action: python_repl_ast\n    Action Input: np.cov(data)\n\n\n      0%|          |   0.00/100 [00:00<?, ?it/s]\n\n\n    \n    Observation: [[1. 1. 1.]\n     [1. 1. 1.]\n     [1. 1. 1.]]\n    Thought: I now know the final answer\n    Final Answer: The covariance matrix is [[1. 1. 1.], [1. 1. 1.], [1. 1. 1.]].\n    \n    > Finished chain.\n\n\n\n\n\n    'The covariance matrix is [[1. 1. 1.], [1. 1. 1.], [1. 1. 1.]].'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("compute the U of Singular Value Decomposition of the matrix")\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Thought: I need to use the SVD function\n    Action: python_repl_ast\n    Action Input: U, S, V = np.linalg.svd(data)\n    Observation: \n    Thought: I now have the U matrix\n    Final Answer: U = [[-0.70710678 -0.70710678]\n     [-0.70710678  0.70710678]]\n    \n    > Finished chain.\n\n\n\n\n\n    'U = [[-0.70710678 -0.70710678]\\n [-0.70710678  0.70710678]]'\n"))))}g.isMDXComponent=!0}}]);