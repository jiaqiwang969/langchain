"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98976],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,g=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},32112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:0},s="Agent types",i={unversionedId:"modules/agents/agent_types/index",id:"modules/agents/agent_types/index",title:"Agent types",description:"Action agents",source:"@site/docs/modules/agents/agent_types/index.mdx",sourceDirName:"modules/agents/agent_types",slug:"/modules/agents/agent_types/",permalink:"/langchain/docs/modules/agents/agent_types/",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"docs",previous:{title:"Agents",permalink:"/langchain/docs/modules/agents/"},next:{title:"Conversational",permalink:"/langchain/docs/modules/agents/agent_types/chat_conversation_agent"}},l={},c=[{value:"Action agents",id:"action-agents",level:2},{value:"Zero-shot ReAct",id:"zero-shot-react",level:3},{value:"Structured input ReAct",id:"structured-input-react",level:3},{value:"OpenAI Functions",id:"openai-functions",level:3},{value:"Conversational",id:"conversational",level:3},{value:"Self-ask with search",id:"self-ask-with-search",level:3},{value:"ReAct document store",id:"react-document-store",level:3},{value:"Plan-and-execute agents",id:"plan-and-execute-agents",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"agent-types"},"Agent types"),(0,o.kt)("h2",{id:"action-agents"},"Action agents"),(0,o.kt)("p",null,"Agents use an LLM to determine which actions to take and in what order.\nAn action can either be using a tool and observing its output, or returning a response to the user.\nHere are the agents available in LangChain."),(0,o.kt)("h3",{id:"zero-shot-react"},(0,o.kt)("a",{parentName:"h3",href:"/docs/modules/agents/agent_types/react.html"},"Zero-shot ReAct")),(0,o.kt)("p",null,"This agent uses the ",(0,o.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/2210.03629"},"ReAct")," framework to determine which tool to use\nbased solely on the tool's description. Any number of tools can be provided.\nThis agent requires that a description is provided for each tool."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note"),": This is the most general purpose action agent."),(0,o.kt)("h3",{id:"structured-input-react"},(0,o.kt)("a",{parentName:"h3",href:"/docs/modules/agents/agent_types/structured_chat.html"},"Structured input ReAct")),(0,o.kt)("p",null,"The structured tool chat agent is capable of using multi-input tools.\nOlder agents are configured to specify an action input as a single string, but this agent can use a tools' argument\nschema to create a structured action input. This is useful for more complex tool usage, like precisely\nnavigating around a browser."),(0,o.kt)("h3",{id:"openai-functions"},(0,o.kt)("a",{parentName:"h3",href:"/docs/modules/agents/agent_types/openai_functions_agent.html"},"OpenAI Functions")),(0,o.kt)("p",null,"Certain OpenAI models (like gpt-3.5-turbo-0613 and gpt-4-0613) have been explicitly fine-tuned to detect when a\nfunction should be called and respond with the inputs that should be passed to the function.\nThe OpenAI Functions Agent is designed to work with these models."),(0,o.kt)("h3",{id:"conversational"},(0,o.kt)("a",{parentName:"h3",href:"/docs/modules/agents/agent_types/chat_conversation_agent.html"},"Conversational")),(0,o.kt)("p",null,"This agent is designed to be used in conversational settings.\nThe prompt is designed to make the agent helpful and conversational.\nIt uses the ReAct framework to decide which tool to use, and uses memory to remember the previous conversation interactions."),(0,o.kt)("h3",{id:"self-ask-with-search"},(0,o.kt)("a",{parentName:"h3",href:"/docs/modules/agents/agent_types/self_ask_with_search.html"},"Self-ask with search")),(0,o.kt)("p",null,"This agent utilizes a single tool that should be named ",(0,o.kt)("inlineCode",{parentName:"p"},"Intermediate Answer"),".\nThis tool should be able to lookup factual answers to questions. This agent\nis equivalent to the original ",(0,o.kt)("a",{parentName:"p",href:"https://ofir.io/self-ask.pdf"},"self-ask with search paper"),",\nwhere a Google search API was provided as the tool."),(0,o.kt)("h3",{id:"react-document-store"},(0,o.kt)("a",{parentName:"h3",href:"/docs/modules/agents/agent_types/react_docstore.html"},"ReAct document store")),(0,o.kt)("p",null,"This agent uses the ReAct framework to interact with a docstore. Two tools must\nbe provided: a ",(0,o.kt)("inlineCode",{parentName:"p"},"Search")," tool and a ",(0,o.kt)("inlineCode",{parentName:"p"},"Lookup")," tool (they must be named exactly as so).\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"Search")," tool should search for a document, while the ",(0,o.kt)("inlineCode",{parentName:"p"},"Lookup")," tool should lookup\na term in the most recently found document.\nThis agent is equivalent to the\noriginal ",(0,o.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/2210.03629.pdf"},"ReAct paper"),", specifically the Wikipedia example."),(0,o.kt)("h2",{id:"plan-and-execute-agents"},(0,o.kt)("a",{parentName:"h2",href:"/docs/modules/agents/agent_types/plan_and_execute.html"},"Plan-and-execute agents")),(0,o.kt)("p",null,"Plan-and-execute agents accomplish an objective by first planning what to do, then executing the sub tasks. This idea is largely inspired by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/yoheinakajima/babyagi"},"BabyAGI")," and then the ",(0,o.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2305.04091"},'"Plan-and-Solve" paper'),"."))}d.isMDXComponent=!0}}]);