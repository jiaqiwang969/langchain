"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[93174],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(l,".").concat(m)]||u[m]||g[m]||i;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},39827:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={sidebar_position:1,title:"Tagging"},o=void 0,s={unversionedId:"use_cases/tagging",id:"use_cases/tagging",title:"Tagging",description:"Open In Collab",source:"@site/docs/use_cases/tagging.md",sourceDirName:"use_cases",slug:"/use_cases/tagging",permalink:"/langchain/docs/use_cases/tagging",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Tagging"},sidebar:"use_cases",previous:{title:"Summarization",permalink:"/langchain/docs/use_cases/summarization"},next:{title:"Web scraping",permalink:"/langchain/docs/use_cases/web_scraping"}},l={},p=[{value:"Use case",id:"use-case",level:2},{value:"Overview",id:"overview",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"Finer control",id:"finer-control",level:2},{value:"Pydantic",id:"pydantic",level:2},{value:"Going deeper",id:"going-deeper",level:3}],c=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const g={toc:p},m="wrapper";function h(e){let{components:n,...i}=e;return(0,r.kt)(m,(0,a.Z)({},g,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/langchain-ai/langchain/blob/master/docs/extras/use_cases/tagging.ipynb"},(0,r.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Collab"}))),(0,r.kt)("h2",{id:"use-case"},"Use case"),(0,r.kt)("p",null,"Tagging means labeling a document with classes such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"sentiment"),(0,r.kt)("li",{parentName:"ul"},"language"),(0,r.kt)("li",{parentName:"ul"},"style (formal, informal etc.)"),(0,r.kt)("li",{parentName:"ul"},"covered topics"),(0,r.kt)("li",{parentName:"ul"},"political tendency")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Image description",src:t(97505).Z,width:"1581",height:"647"})),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Tagging has a few components:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function"),": Like ",(0,r.kt)("a",{parentName:"li",href:"/docs/use_cases/extraction"},"extraction"),", tagging uses ",(0,r.kt)("a",{parentName:"li",href:"https://openai.com/blog/function-calling-and-other-api-updates"},"functions")," to specify how the model should tag a document"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"schema"),": defines how we want to tag the document")),(0,r.kt)("h2",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"Let's see a very straightforward example of how we can use OpenAI functions for tagging in LangChain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install langchain openai \n\n# Set env var OPENAI_API_KEY or load from a .env file:\n# import dotenv\n# dotenv.load_dotenv()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Set env var OPENAI_API_KEY or load from a .env file:"}, {"imported": "ChatPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "Set env var OPENAI_API_KEY or load from a .env file:"}, {"imported": "create_tagging_chain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.openai_functions.tagging.create_tagging_chain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file:"}, {"imported": "create_tagging_chain_pydantic", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.openai_functions.tagging.create_tagging_chain_pydantic.html", "title": "Set env var OPENAI_API_KEY or load from a .env file:"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chains import create_tagging_chain, create_tagging_chain_pydantic\n')),(0,r.kt)("p",null,"We specify a few properties with their expected type in our schema."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Schema\nschema = {\n    "properties": {\n        "sentiment": {"type": "string"},\n        "aggressiveness": {"type": "integer"},\n        "language": {"type": "string"},\n    }\n}\n\n# LLM\nllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")\nchain = create_tagging_chain(schema, llm)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'inp = "Estoy increiblemente contento de haberte conocido! Creo que seremos muy buenos amigos!"\nchain.run(inp)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'sentiment': 'positive', 'language': 'Spanish'}\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'inp = "Estoy muy enojado con vos! Te voy a dar tu merecido!"\nchain.run(inp)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'sentiment': 'enojado', 'aggressiveness': 1, 'language': 'es'}\n"))),(0,r.kt)("p",null,"As we can see in the examples, it correctly interprets what we want."),(0,r.kt)("p",null,"The results vary so that we get, for example, sentiments in different languages ('positive', 'enojado' etc.)."),(0,r.kt)("p",null,"We will see how to control these results in the next section."),(0,r.kt)("h2",{id:"finer-control"},"Finer control"),(0,r.kt)("p",null,"Careful schema definition gives us more control over the model's output. "),(0,r.kt)("p",null,"Specifically, we can define:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"possible values for each property"),(0,r.kt)("li",{parentName:"ul"},"description to make sure that the model understands the property"),(0,r.kt)("li",{parentName:"ul"},"required properties to be returned")),(0,r.kt)("p",null,"Here is an example of how we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"_enum_"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_description_"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"_required_")," to control for each of the previously mentioned aspects:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'schema = {\n    "properties": {\n        "aggressiveness": {\n            "type": "integer",\n            "enum": [1, 2, 3, 4, 5],\n            "description": "describes how aggressive the statement is, the higher the number the more aggressive",\n        },\n        "language": {\n            "type": "string",\n            "enum": ["spanish", "english", "french", "german", "italian"],\n        },\n    },\n    "required": ["language", "sentiment", "aggressiveness"],\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = create_tagging_chain(schema, llm)\n")),(0,r.kt)("p",null,"Now the answers are much better!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'inp = "Estoy increiblemente contento de haberte conocido! Creo que seremos muy buenos amigos!"\nchain.run(inp)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'aggressiveness': 0, 'language': 'spanish'}\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'inp = "Estoy muy enojado con vos! Te voy a dar tu merecido!"\nchain.run(inp)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'aggressiveness': 5, 'language': 'spanish'}\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'inp = "Weather is ok here, I can go outside without much more than a coat"\nchain.run(inp)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'aggressiveness': 0, 'language': 'english'}\n"))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://smith.langchain.com/public/311e663a-bbe8-4053-843e-5735055c032d/r"},"LangSmith trace")," lets us peek under the hood:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"As with ",(0,r.kt)("a",{parentName:"li",href:"/docs/use_cases/extraction"},"extraction"),", we call the ",(0,r.kt)("inlineCode",{parentName:"li"},"information_extraction")," function ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/langchain-ai/langchain/blob/269f85b7b7ffd74b38cd422d4164fc033388c3d0/libs/langchain/langchain/chains/openai_functions/extraction.py#L20"},"here")," on the input string."),(0,r.kt)("li",{parentName:"ul"},"This OpenAI funtion extraction information based upon the provided schema.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Image description",src:t(83694).Z,width:"1779",height:"641"})),(0,r.kt)("h2",{id:"pydantic"},"Pydantic"),(0,r.kt)("p",null,"We can also use a Pydantic schema to specify the required properties and types. "),(0,r.kt)("p",null,"We can also send other arguments, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),", to each field."),(0,r.kt)("p",null,"This lets us specify our schema in the same manner that we would a new class or function in Python with purely Pythonic types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from enum import Enum\nfrom pydantic import BaseModel, Field\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Tags(BaseModel):\n    sentiment: str = Field(..., enum=["happy", "neutral", "sad"])\n    aggressiveness: int = Field(\n        ...,\n        description="describes how aggressive the statement is, the higher the number the more aggressive",\n        enum=[1, 2, 3, 4, 5],\n    )\n    language: str = Field(\n        ..., enum=["spanish", "english", "french", "german", "italian"]\n    )\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = create_tagging_chain_pydantic(Tags, llm)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'inp = "Estoy muy enojado con vos! Te voy a dar tu merecido!"\nres = chain.run(inp)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"res\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Tags(sentiment='sad', aggressiveness=5, language='spanish')\n"))),(0,r.kt)("h3",{id:"going-deeper"},"Going deeper"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can use the ",(0,r.kt)("a",{parentName:"li",href:"https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger"},"metadata tagger")," document transformer to extract metadata from a LangChain ",(0,r.kt)("inlineCode",{parentName:"li"},"Document"),". "),(0,r.kt)("li",{parentName:"ul"},"This covers the same basic functionality as the tagging chain, only applied to a LangChain ",(0,r.kt)("inlineCode",{parentName:"li"},"Document"),".")))}h.isMDXComponent=!0},97505:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/tagging-93990e95451d92b715c2b47066384224.png"},83694:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/tagging_trace-5338eefd44752099dc36689e94169a42.png"}}]);