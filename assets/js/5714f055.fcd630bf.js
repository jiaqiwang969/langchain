"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4159],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=o,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return t?a.createElement(h,r(r({ref:n},p),{},{components:t})):a.createElement(h,r({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const i={sidebar_position:1,title:"Summarization"},r=void 0,s={unversionedId:"use_cases/summarization",id:"use_cases/summarization",title:"Summarization",description:"Open In Collab",source:"@site/docs/use_cases/summarization.md",sourceDirName:"use_cases",slug:"/use_cases/summarization",permalink:"/langchain/docs/use_cases/summarization",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Summarization"},sidebar:"use_cases",previous:{title:"Extraction",permalink:"/langchain/docs/use_cases/extraction"},next:{title:"Tagging",permalink:"/langchain/docs/use_cases/tagging"}},l={},c=[{value:"Use case",id:"use-case",level:2},{value:"Overview",id:"overview",level:2},{value:"Quickstart",id:"quickstart",level:2},{value:"Option 1. Stuff",id:"option-1-stuff",level:2},{value:"Go deeper",id:"go-deeper",level:3},{value:"Option 2. Map-Reduce",id:"option-2-map-reduce",level:2},{value:"Go deeper",id:"go-deeper-1",level:3},{value:"Option 3. Refine",id:"option-3-refine",level:2}],p=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const u={toc:c},d="wrapper";function h(e){let{components:n,...i}=e;return(0,o.kt)(d,(0,a.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/langchain-ai/langchain/blob/master/docs/extras/use_cases/summarization.ipynb"},(0,o.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Collab"}))),(0,o.kt)("h2",{id:"use-case"},"Use case"),(0,o.kt)("p",null,"Suppose you have a set of documents (PDFs, Notion pages, customer questions, etc.) and you want to summarize the content. "),(0,o.kt)("p",null,"LLMs are a great tool for this given their proficiency in understanding and synthesizing text."),(0,o.kt)("p",null,"In this walkthrough we'll go over how to perform document summarization using LLMs."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Image description",src:t(90811).Z,width:"1509",height:"695"})),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"A central question for building a summarizer is how to pass your documents into the LLM's context window. Two common approaches for this are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Stuff"),': Simply "stuff" all your documents into a single prompt. This is the simplest approach (see ',(0,o.kt)("a",{parentName:"p",href:"/docs/modules/chains/document/stuff"},"here")," for more on the ",(0,o.kt)("inlineCode",{parentName:"p"},"StuffDocumentsChains"),", which is used for this method).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Map-reduce"),': Summarize each document on it\'s own in a "map" step and then "reduce" the summaries into a final summary (see ',(0,o.kt)("a",{parentName:"p",href:"/docs/modules/chains/document/map_reduce"},"here")," for more on the ",(0,o.kt)("inlineCode",{parentName:"p"},"MapReduceDocumentsChain"),", which is used for this method)."))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Image description",src:t(71371).Z,width:"1655",height:"737"})),(0,o.kt)("h2",{id:"quickstart"},"Quickstart"),(0,o.kt)("p",null,"To give you a sneak preview, either pipeline can be wrapped in a single object: ",(0,o.kt)("inlineCode",{parentName:"p"},"load_summarize_chain"),". "),(0,o.kt)("p",null,"Suppose we want to summarize a blog post. We can create this in a few lines of code."),(0,o.kt)("p",null,"First set environment variables and install packages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install openai tiktoken chromadb langchain\n\n# Set env var OPENAI_API_KEY or load from a .env file\n# import dotenv\n\n# dotenv.load_dotenv()\n")),(0,o.kt)("p",null,"We can use ",(0,o.kt)("inlineCode",{parentName:"p"},'chain_type="stuff"'),", especially if using larger context window models such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"16k token OpenAI ",(0,o.kt)("inlineCode",{parentName:"li"},"gpt-3.5-turbo-16k")," "),(0,o.kt)("li",{parentName:"ul"},"100k token Anthropic ",(0,o.kt)("a",{parentName:"li",href:"https://www.anthropic.com/index/claude-2"},"Claude-2"))),(0,o.kt)("p",null,"We can also supply ",(0,o.kt)("inlineCode",{parentName:"p"},'chain_type="map_reduce"')," or ",(0,o.kt)("inlineCode",{parentName:"p"},'chain_type="refine"')," (read more ",(0,o.kt)("a",{parentName:"p",href:"/docs/modules/chains/document/refine"},"here"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "WebBaseLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.web_base.WebBaseLoader.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "load_summarize_chain", "source": "langchain.chains.summarize", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.summarize.load_summarize_chain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.document_loaders import WebBaseLoader\nfrom langchain.chains.summarize import load_summarize_chain\n\nloader = WebBaseLoader("https://lilianweng.github.io/posts/2023-06-23-agent/")\ndocs = loader.load()\n\nllm = ChatOpenAI(temperature=0, model_name="gpt-3.5-turbo-16k")\nchain = load_summarize_chain(llm, chain_type="stuff")\n\nchain.run(docs)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'The article discusses the concept of building autonomous agents powered by large language models (LLMs). It explores the components of such agents, including planning, memory, and tool use. The article provides case studies and proof-of-concept examples of LLM-powered agents in various domains. It also highlights the challenges and limitations of using LLMs in agent systems.'\n"))),(0,o.kt)("h2",{id:"option-1-stuff"},"Option 1. Stuff"),(0,o.kt)("p",null,"When we use ",(0,o.kt)("inlineCode",{parentName:"p"},"load_summarize_chain")," with ",(0,o.kt)("inlineCode",{parentName:"p"},'chain_type="stuff"'),", we will use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/modules/chains/document/stuff"},"StuffDocumentsChain"),"."),(0,o.kt)("p",null,"The chain will take a list of documents, inserts them all into a prompt, and passes that prompt to an LLM:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "LLMChain", "source": "langchain.chains.llm", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "StuffDocumentsChain", "source": "langchain.chains.combine_documents.stuff", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.combine_documents.stuff.StuffDocumentsChain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.chains.llm import LLMChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains.combine_documents.stuff import StuffDocumentsChain\n\n# Define prompt\nprompt_template = """Write a concise summary of the following:\n"{text}"\nCONCISE SUMMARY:"""\nprompt = PromptTemplate.from_template(prompt_template)\n\n# Define LLM chain\nllm = ChatOpenAI(temperature=0, model_name="gpt-3.5-turbo-16k")\nllm_chain = LLMChain(llm=llm, prompt=prompt)\n\n# Define StuffDocumentsChain\nstuff_chain = StuffDocumentsChain(\n    llm_chain=llm_chain, document_variable_name="text"\n)\n\ndocs = loader.load()\nprint(stuff_chain.run(docs))\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    The article discusses the concept of building autonomous agents powered by large language models (LLMs). It explores the components of such agents, including planning, memory, and tool use. The article provides case studies and examples of proof-of-concept demos, highlighting the challenges and limitations of LLM-powered agents. It also includes references to related research papers and provides a citation for the article.\n"))),(0,o.kt)("p",null,"Great! We can see that we reproduce the earlier result using the ",(0,o.kt)("inlineCode",{parentName:"p"},"load_summarize_chain"),"."),(0,o.kt)("h3",{id:"go-deeper"},"Go deeper"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can easily customize the prompt. "),(0,o.kt)("li",{parentName:"ul"},"You can easily try different LLMs, (e.g., ",(0,o.kt)("a",{parentName:"li",href:"/docs/integrations/chat/anthropic"},"Claude"),") via the ",(0,o.kt)("inlineCode",{parentName:"li"},"llm")," parameter.")),(0,o.kt)("h2",{id:"option-2-map-reduce"},"Option 2. Map-Reduce"),(0,o.kt)("p",null,"Let's unpack the map reduce approach. For this, we'll first map each document to an individual summary using an ",(0,o.kt)("inlineCode",{parentName:"p"},"LLMChain"),". Then we'll use a ",(0,o.kt)("inlineCode",{parentName:"p"},"ReduceDocumentsChain")," to combine those summaries into a single global summary."),(0,o.kt)("p",null,"First, we specfy the LLMChain to use for mapping each document to an individual summary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MapReduceChain", "source": "langchain.chains.mapreduce", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.mapreduce.MapReduceChain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "ReduceDocumentsChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.combine_documents.reduce.ReduceDocumentsChain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}, {"imported": "MapReduceDocumentsChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.combine_documents.map_reduce.MapReduceDocumentsChain.html", "title": "Set env var OPENAI_API_KEY or load from a .env file"}]--\x3e\nfrom langchain.chains.mapreduce import MapReduceChain\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.chains import ReduceDocumentsChain, MapReduceDocumentsChain\n\nllm = ChatOpenAI(temperature=0)\n\n# Map\nmap_template = """The following is a set of documents\n{docs}\nBased on this list of docs, please identify the main themes \nHelpful Answer:"""\nmap_prompt = PromptTemplate.from_template(map_template)\nmap_chain = LLMChain(llm=llm, prompt=map_prompt)\n')),(0,o.kt)("p",null,"We can also use the Prompt Hub to store and fetch prompts."),(0,o.kt)("p",null,"This will work with your ",(0,o.kt)("a",{parentName:"p",href:"https://docs.smith.langchain.com/"},"LangSmith API key"),"."),(0,o.kt)("p",null,"For example, see the map prompt ",(0,o.kt)("a",{parentName:"p",href:"https://smith.langchain.com/hub/rlm/map-prompt"},"here"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import hub\nmap_prompt = hub.pull("rlm/map-prompt")\nmap_chain = LLMChain(llm=llm, prompt=map_prompt)\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ReduceDocumentsChain")," handles taking the document mapping results and reducing them into a single output. It wraps a generic ",(0,o.kt)("inlineCode",{parentName:"p"},"CombineDocumentsChain")," (like ",(0,o.kt)("inlineCode",{parentName:"p"},"StuffDocumentsChain"),") but adds the ability to collapse documents before passing it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CombineDocumentsChain")," if their cumulative size exceeds ",(0,o.kt)("inlineCode",{parentName:"p"},"token_max"),". In this example, we can actually re-use our chain for combining our docs to also collapse our docs."),(0,o.kt)("p",null,"So if the cumulative number of tokens in our mapped documents exceeds 4000 tokens, then we'll recursively pass in the documents in batches of < 4000 tokens to our ",(0,o.kt)("inlineCode",{parentName:"p"},"StuffDocumentsChain")," to create batched summaries. And once those batched summaries are cumulatively less than 4000 tokens, we'll pass them all one last time to the ",(0,o.kt)("inlineCode",{parentName:"p"},"StuffDocumentsChain")," to create the final summary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Reduce\nreduce_template = """The following is set of summaries:\n{doc_summaries}\nTake these and distill it into a final, consolidated summary of the main themes. \nHelpful Answer:"""\nreduce_prompt = PromptTemplate.from_template(reduce_template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Note we can also get this from the prompt hub, as noted above\nreduce_prompt = hub.pull("rlm/map-prompt")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Run chain\nreduce_chain = LLMChain(llm=llm, prompt=reduce_prompt)\n\n# Takes a list of documents, combines them into a single string, and passes this to an LLMChain\ncombine_documents_chain = StuffDocumentsChain(\n    llm_chain=reduce_chain, document_variable_name="doc_summaries"\n)\n\n# Combines and iteravely reduces the mapped documents\nreduce_documents_chain = ReduceDocumentsChain(\n    # This is final chain that is called.\n    combine_documents_chain=combine_documents_chain,\n    # If documents exceed context for `StuffDocumentsChain`\n    collapse_documents_chain=combine_documents_chain,\n    # The maximum number of tokens to group documents into.\n    token_max=4000,\n)\n')),(0,o.kt)("p",null,"Combining our map and reduce chains into one:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Combining documents by mapping a chain over them, then combining results\nmap_reduce_chain = MapReduceDocumentsChain(\n    # Map chain\n    llm_chain=map_chain,\n    # Reduce chain\n    reduce_documents_chain=reduce_documents_chain,\n    # The variable name in the llm_chain to put the documents in\n    document_variable_name="docs",\n    # Return the results of the map steps in the output\n    return_intermediate_steps=False,\n)\n\ntext_splitter = CharacterTextSplitter.from_tiktoken_encoder(\n    chunk_size=1000, chunk_overlap=0\n)\nsplit_docs = text_splitter.split_documents(docs)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Created a chunk of size 1003, which is longer than the specified 1000\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(map_reduce_chain.run(split_docs))\n")),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    The main themes identified in the provided set of documents are:\n    \n    1. LLM-powered autonomous agent systems: The documents discuss the concept of building autonomous agents with large language models (LLMs) as the core controller. They explore the potential of LLMs beyond content generation and present them as powerful problem solvers.\n    \n    2. Components of the agent system: The documents outline the key components of LLM-powered agent systems, including planning, memory, and tool use. Each component is described in detail, highlighting its role in enhancing the agent's capabilities.\n    \n    3. Planning and task decomposition: The planning component focuses on task decomposition and self-reflection. The agent breaks down complex tasks into smaller subgoals and learns from past actions to improve future results.\n    \n    4. Memory and learning: The memory component includes short-term memory for in-context learning and long-term memory for retaining and recalling information over extended periods. The use of external vector stores for fast retrieval is also mentioned.\n    \n    5. Tool use and external APIs: The agent learns to utilize external APIs for accessing additional information, code execution, and proprietary sources. This enhances the agent's knowledge and problem-solving abilities.\n    \n    6. Case studies and proof-of-concept examples: The documents provide case studies and examples to demonstrate the application of LLM-powered agents in scientific discovery, generative simulations, and other domains. These examples serve as proof-of-concept for the effectiveness of the agent system.\n    \n    7. Challenges and limitations: The documents mention challenges associated with building LLM-powered autonomous agents, such as the limitations of finite context length, difficulties in long-term planning, and reliability issues with natural language interfaces.\n    \n    8. Citation and references: The documents include a citation and reference section for acknowledging the sources and inspirations for the concepts discussed.\n    \n    Overall, the main themes revolve around the development and capabilities of LLM-powered autonomous agent systems, including their components, planning and task decomposition, memory and learning mechanisms, tool use and external APIs, case studies and proof-of-concept examples, challenges and limitations, and the importance of proper citation and references.\n"))),(0,o.kt)("h3",{id:"go-deeper-1"},"Go deeper"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Customization")," "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"As shown above, you can customize the LLMs and prompts for map and reduce stages.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Real-world use-case")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"See ",(0,o.kt)("a",{parentName:"li",href:"https://blog.langchain.dev/llms-to-improve-documentation/"},"this blog post")," case-study on analyzing user interactions (questions about LangChain documentation)!  "),(0,o.kt)("li",{parentName:"ul"},"The blog post and associated ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/mendableai/QA_clustering"},"repo")," also introduce clustering as a means of summarization."),(0,o.kt)("li",{parentName:"ul"},"This opens up a third path beyond the ",(0,o.kt)("inlineCode",{parentName:"li"},"stuff")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"map-reduce")," approaches that is worth considering.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Image description",src:t(20218).Z,width:"1690",height:"731"})),(0,o.kt)("h2",{id:"option-3-refine"},"Option 3. Refine"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/modules/chains/document/refine"},"Refine")," is similar to map-reduce:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The refine documents chain constructs a response by looping over the input documents and iteratively updating its answer. For each document, it passes all non-document inputs, the current document, and the latest intermediate answer to an LLM chain to get a new answer.")),(0,o.kt)("p",null,"This can be easily run with the ",(0,o.kt)("inlineCode",{parentName:"p"},'chain_type="refine"')," specified."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain = load_summarize_chain(llm, chain_type="refine")\nchain.run(split_docs)\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'The GPT-Engineer project aims to create a repository of code for specific tasks specified in natural language. It involves breaking down tasks into smaller components and seeking clarification from the user when needed. The project emphasizes the importance of implementing every detail of the architecture as code and provides guidelines for file organization, code structure, and dependencies. However, there are challenges in long-term planning and task decomposition, as well as the reliability of the natural language interface. The system has limited communication bandwidth and struggles to adjust plans when faced with unexpected errors. The reliability of model outputs is questionable, as formatting errors and rebellious behavior can occur. The conversation also includes instructions for writing the code, including laying out the core classes, functions, and methods, and providing the code in a markdown code block format. The user is reminded to ensure that the code is fully functional and follows best practices for file naming, imports, and types. The project is powered by LLM (Large Language Models) and incorporates prompting techniques from various research papers.'\n"))),(0,o.kt)("p",null,"It's also possible to supply a prompt and return intermediate steps."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'prompt_template = """Write a concise summary of the following:\n{text}\nCONCISE SUMMARY:"""\nprompt = PromptTemplate.from_template(prompt_template)\n\nrefine_template = (\n    "Your job is to produce a final summary\\n"\n    "We have provided an existing summary up to a certain point: {existing_answer}\\n"\n    "We have the opportunity to refine the existing summary"\n    "(only if needed) with some more context below.\\n"\n    "------------\\n"\n    "{text}\\n"\n    "------------\\n"\n    "Given the new context, refine the original summary in Italian"\n    "If the context isn\'t useful, return the original summary."\n)\nrefine_prompt = PromptTemplate.from_template(refine_template)\nchain = load_summarize_chain(\n    llm=llm,\n    chain_type="refine",\n    question_prompt=prompt,\n    refine_prompt=refine_prompt,\n    return_intermediate_steps=True,\n    input_key="input_documents",\n    output_key="output_text",\n)\nresult = chain({"input_documents": split_docs}, return_only_outputs=True)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'print(result["output_text"])\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    L'articolo discute il concetto di costruire agenti autonomi utilizzando LLM (large language model) come controller principale. Esplora i diversi componenti di un sistema di agenti alimentato da LLM, inclusa la pianificazione, la memoria e l'uso di strumenti. Dimostrazioni di concetto come AutoGPT mostrano la possibilit\xe0 di creare agenti autonomi con LLM come controller principale. Approcci come Chain of Thought, Tree of Thoughts, LLM+P, ReAct e Reflexion consentono agli agenti autonomi di pianificare, riflettere su se stessi e migliorare iterativamente. Tuttavia, ci sono sfide legate alla lunghezza del contesto, alla pianificazione a lungo termine e alla decomposizione delle attivit\xe0. Inoltre, l'affidabilit\xe0 dell'interfaccia di linguaggio naturale tra LLM e componenti esterni come la memoria e gli strumenti \xe8 incerta. Nonostante ci\xf2, l'uso di LLM come router per indirizzare le richieste ai moduli esperti pi\xf9 adatti \xe8 stato proposto come architettura neuro-simbolica per agenti autonomi nel sistema MRKL. L'articolo fa riferimento a diverse pubblicazioni che approfondiscono l'argomento, tra cui Chain of Thought, Tree of Thoughts, LLM+P, ReAct, Reflexion, e MRKL Systems.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'print("\\n\\n".join(result["intermediate_steps"][:3]))\n')),(0,o.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    This article discusses the concept of building autonomous agents using LLM (large language model) as the core controller. The article explores the different components of an LLM-powered agent system, including planning, memory, and tool use. It also provides examples of proof-of-concept demos and highlights the potential of LLM as a general problem solver.\n    \n    Questo articolo discute del concetto di costruire agenti autonomi utilizzando LLM (large language model) come controller principale. L'articolo esplora i diversi componenti di un sistema di agenti alimentato da LLM, inclusa la pianificazione, la memoria e l'uso degli strumenti. Vengono anche forniti esempi di dimostrazioni di proof-of-concept e si evidenzia il potenziale di LLM come risolutore generale di problemi. Inoltre, vengono presentati approcci come Chain of Thought, Tree of Thoughts, LLM+P, ReAct e Reflexion che consentono agli agenti autonomi di pianificare, riflettere su se stessi e migliorare iterativamente.\n    \n    Questo articolo discute del concetto di costruire agenti autonomi utilizzando LLM (large language model) come controller principale. L'articolo esplora i diversi componenti di un sistema di agenti alimentato da LLM, inclusa la pianificazione, la memoria e l'uso degli strumenti. Vengono anche forniti esempi di dimostrazioni di proof-of-concept e si evidenzia il potenziale di LLM come risolutore generale di problemi. Inoltre, vengono presentati approcci come Chain of Thought, Tree of Thoughts, LLM+P, ReAct e Reflexion che consentono agli agenti autonomi di pianificare, riflettere su se stessi e migliorare iterativamente. Il nuovo contesto riguarda l'approccio Chain of Hindsight (CoH) che permette al modello di migliorare autonomamente i propri output attraverso un processo di apprendimento supervisionato. Viene anche presentato l'approccio Algorithm Distillation (AD) che applica lo stesso concetto alle traiettorie di apprendimento per compiti di reinforcement learning.\n"))))}h.isMDXComponent=!0},90811:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/summarization_use_case_1-cdb1b94b53af261bd997a9934a8c3703.png"},71371:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/summarization_use_case_2-f2a4d5d60980a79140085fb7f8043217.png"},20218:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/summarization_use_case_3-4247e4011d0a52901288005bfaf20dc1.png"}}]);