"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[13961],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),g=o,u=p["".concat(c,".").concat(g)]||p[g]||m[g]||r;return n?a.createElement(u,i(i({ref:t},l),{},{components:n})):a.createElement(u,i({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},16442:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const r={},i="Dingo",s={unversionedId:"integrations/vectorstores/dingo",id:"integrations/vectorstores/dingo",title:"Dingo",description:"Dingo is a distributed multi-mode vector database, which combines the characteristics of data lakes and vector databases, and can store data of any type and size (Key-Value, PDF, audio, video, etc.). It has real-time low-latency processing capabilities to achieve rapid insight and response, and can efficiently conduct instant analysis and process multi-modal data.",source:"@site/docs/integrations/vectorstores/dingo.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/dingo",permalink:"/langchain/docs/integrations/vectorstores/dingo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"DashVector",permalink:"/langchain/docs/integrations/vectorstores/dashvector"},next:{title:"DocArray HnswSearch",permalink:"/langchain/docs/integrations/vectorstores/docarray_hnsw"}},c={},d=[{value:"Adding More Text to an Existing Index",id:"adding-more-text-to-an-existing-index",level:3},{value:"Maximal Marginal Relevance Searches",id:"maximal-marginal-relevance-searches",level:3}],l=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var p;const m={toc:d},g="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(g,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dingo"},"Dingo"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://dingodb.readthedocs.io/en/latest/"},"Dingo")," is a distributed multi-mode vector database, which combines the characteristics of data lakes and vector databases, and can store data of any type and size (Key-Value, PDF, audio, video, etc.). It has real-time low-latency processing capabilities to achieve rapid insight and response, and can efficiently conduct instant analysis and process multi-modal data.")),(0,o.kt)("p",null,"This notebook shows how to use functionality related to the DingoDB vector database."),(0,o.kt)("p",null,"To run, you should have a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dingodb/dingo-deploy/blob/main/README.md"},"DingoDB instance up and running"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install dingodb\nor install latest:\npip install git+https://git@github.com/dingodb/pydingo.git\n")),(0,o.kt)("p",null,"We want to use OpenAIEmbeddings so we have to get the OpenAI API Key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,o.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    OpenAI API Key:\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Dingo"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Dingo"}, {"imported": "Dingo", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.dingo.Dingo.html", "title": "Dingo"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Dingo"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Dingo\nfrom langchain.document_loaders import TextLoader\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Dingo"}]--\x3e\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from dingodb import DingoDB\n\nindex_name = "langchain-demo"\n\ndingo_client = DingoDB(user="", password="", host=["127.0.0.1:13000"])\n# First, check if our index already exists. If it doesn\'t, we create it\nif index_name not in dingo_client.get_index():\n    # we create a new index, modify to your own\n    dingo_client.create_index(\n      index_name=index_name,\n      dimension=1536,\n      metric_type=\'cosine\',\n      auto_id=False\n)\n\n# The OpenAI embedding model `text-embedding-ada-002 uses 1536 dimensions`\ndocsearch = Dingo.from_documents(docs, embeddings, client=dingo_client, index_name=index_name)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Dingo"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Dingo"}, {"imported": "Dingo", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.dingo.Dingo.html", "title": "Dingo"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Dingo"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Dingo\nfrom langchain.document_loaders import TextLoader\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(query)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,o.kt)("h3",{id:"adding-more-text-to-an-existing-index"},"Adding More Text to an Existing Index"),(0,o.kt)("p",null,"More text can embedded and upserted to an existing Dingo index using the ",(0,o.kt)("inlineCode",{parentName:"p"},"add_texts")," function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'vectorstore = Dingo(embeddings, "text", client=dingo_client, index_name=index_name)\n\nvectorstore.add_texts(["More text!"])\n')),(0,o.kt)("h3",{id:"maximal-marginal-relevance-searches"},"Maximal Marginal Relevance Searches"),(0,o.kt)("p",null,"In addition to using similarity search in the retriever object, you can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"mmr")," as retriever."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'retriever = docsearch.as_retriever(search_type="mmr")\nmatched_docs = retriever.get_relevant_documents(query)\nfor i, d in enumerate(matched_docs):\n    print(f"\\n## Document {i}\\n")\n    print(d.page_content)\n')),(0,o.kt)("p",null,"Or use ",(0,o.kt)("inlineCode",{parentName:"p"},"max_marginal_relevance_search")," directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'found_docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10)\nfor i, doc in enumerate(found_docs):\n    print(f"{i + 1}.", doc.page_content, "\\n")\n')))}u.isMDXComponent=!0}}]);