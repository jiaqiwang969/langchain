"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[50225],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),f=a,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||o;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},26422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={},i="Xorbits Inference (Xinference)",l={unversionedId:"integrations/llms/xinference",id:"integrations/llms/xinference",title:"Xorbits Inference (Xinference)",description:"Xinference is a powerful and versatile library designed to serve LLMs,",source:"@site/docs/integrations/llms/xinference.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/xinference",permalink:"/langchain/docs/integrations/llms/xinference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Writer",permalink:"/langchain/docs/integrations/llms/writer"},next:{title:"Memory",permalink:"/langchain/docs/integrations/memory/"}},c={},s=[{value:"Installation",id:"installation",level:2},{value:"Deploy Xinference Locally or in a Distributed Cluster.",id:"deploy-xinference-locally-or-in-a-distributed-cluster",level:2},{value:"Wrapper",id:"wrapper",level:2},{value:"Integrate with a LLMChain",id:"integrate-with-a-llmchain",level:3}],p=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const m={toc:s},f="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(f,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"xorbits-inference-xinference"},"Xorbits Inference (Xinference)"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/xorbitsai/inference"},"Xinference")," is a powerful and versatile library designed to serve LLMs,\nspeech recognition models, and multimodal models, even on your laptop. It supports a variety of models compatible with GGML, such as chatglm, baichuan, whisper, vicuna, orca, and many others. This notebook demonstrates how to use Xinference with LangChain."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Install ",(0,a.kt)("inlineCode",{parentName:"p"},"Xinference")," through PyPI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'%pip install "xinference[all]"\n')),(0,a.kt)("h2",{id:"deploy-xinference-locally-or-in-a-distributed-cluster"},"Deploy Xinference Locally or in a Distributed Cluster."),(0,a.kt)("p",null,"For local deployment, run ",(0,a.kt)("inlineCode",{parentName:"p"},"xinference"),". "),(0,a.kt)("p",null,"To deploy Xinference in a cluster, first start an Xinference supervisor using the ",(0,a.kt)("inlineCode",{parentName:"p"},"xinference-supervisor"),". You can also use the option -p to specify the port and -H to specify the host. The default port is 9997."),(0,a.kt)("p",null,"Then, start the Xinference workers using ",(0,a.kt)("inlineCode",{parentName:"p"},"xinference-worker")," on each server you want to run them on. "),(0,a.kt)("p",null,"You can consult the README file from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/xorbitsai/inference"},"Xinference")," for more information."),(0,a.kt)("h2",{id:"wrapper"},"Wrapper"),(0,a.kt)("p",null,"To use Xinference with LangChain, you need to first launch a model. You can use command line interface (CLI) to do so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"xinference launch -n vicuna-v1.3 -f ggmlv3 -q q4_0\n")),(0,a.kt)(p,{lang:"bash",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Model uid: 7167b2b0-2a04-11ee-83f0-d29396a3f064\n"))),(0,a.kt)("p",null,"A model UID is returned for you to use. Now you can use Xinference with LangChain:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Xinference", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.xinference.Xinference.html", "title": "Xorbits Inference (Xinference)"}]--\x3e\nfrom langchain.llms import Xinference\n\nllm = Xinference(\n    server_url="http://0.0.0.0:9997",\n    model_uid = "7167b2b0-2a04-11ee-83f0-d29396a3f064"\n)\n\nllm(\n    prompt="Q: where can we visit in the capital of France? A:",\n    generate_config={"max_tokens": 1024, "stream": True},\n)\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    ' You can visit the Eiffel Tower, Notre-Dame Cathedral, the Louvre Museum, and many other historical sites in Paris, the capital of France.'\n"))),(0,a.kt)("h3",{id:"integrate-with-a-llmchain"},"Integrate with a LLMChain"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import PromptTemplate, LLMChain\n\ntemplate = "Where can we visit in the capital of {country}?"\n\nprompt = PromptTemplate(template=template, input_variables=["country"])\n\nllm_chain = LLMChain(prompt=prompt, llm=llm)\n\ngenerated = llm_chain.run(country="France")\nprint(generated)\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    A: You can visit many places in Paris, such as the Eiffel Tower, the Louvre Museum, Notre-Dame Cathedral, the Champs-Elys\xe9es, Montmartre, Sacr\xe9-C\u0153ur, and the Palace of Versailles.\n"))),(0,a.kt)("p",null,"Lastly, terminate the model when you do not need to use it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'xinference terminate --model-uid "7167b2b0-2a04-11ee-83f0-d29396a3f064"\n')))}d.isMDXComponent=!0}}]);