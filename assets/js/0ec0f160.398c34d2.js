"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78865],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),h=r,m=d["".concat(i,".").concat(h)]||d[h]||p[h]||l;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=h;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},51119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>u,metadata:()=>p,toc:()=>m});var a=t(87462),r=(t(67294),t(3905));const l=(o="CodeOutputBlock",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var o;const s={toc:[{value:"Callback handlers",id:"callback-handlers",level:2},{value:"Get started",id:"get-started",level:2},{value:"Where to pass in callbacks",id:"where-to-pass-in-callbacks",level:2},{value:"When do you want to use each of these?",id:"when-do-you-want-to-use-each-of-these",level:3}]},i="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(i,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can subscribe to these events by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"callbacks")," argument available throughout the API. This argument is list of handler objects, which are expected to implement one or more of the methods described below in more detail."),(0,r.kt)("h2",{id:"callback-handlers"},"Callback handlers"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CallbackHandlers")," are objects that implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"CallbackHandler")," interface, which has a method for each event that can be subscribed to. The ",(0,r.kt)("inlineCode",{parentName:"p"},"CallbackManager")," will call the appropriate method on each handler when the event is triggered."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class BaseCallbackHandler:\n    """Base callback handler that can be used to handle callbacks from langchain."""\n\n    def on_llm_start(\n        self, serialized: Dict[str, Any], prompts: List[str], **kwargs: Any\n    ) -> Any:\n        """Run when LLM starts running."""\n\n    def on_chat_model_start(\n        self, serialized: Dict[str, Any], messages: List[List[BaseMessage]], **kwargs: Any\n    ) -> Any:\n        """Run when Chat Model starts running."""\n\n    def on_llm_new_token(self, token: str, **kwargs: Any) -> Any:\n        """Run on new LLM token. Only available when streaming is enabled."""\n\n    def on_llm_end(self, response: LLMResult, **kwargs: Any) -> Any:\n        """Run when LLM ends running."""\n\n    def on_llm_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when LLM errors."""\n\n    def on_chain_start(\n        self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any\n    ) -> Any:\n        """Run when chain starts running."""\n\n    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> Any:\n        """Run when chain ends running."""\n\n    def on_chain_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when chain errors."""\n\n    def on_tool_start(\n        self, serialized: Dict[str, Any], input_str: str, **kwargs: Any\n    ) -> Any:\n        """Run when tool starts running."""\n\n    def on_tool_end(self, output: str, **kwargs: Any) -> Any:\n        """Run when tool ends running."""\n\n    def on_tool_error(\n        self, error: Union[Exception, KeyboardInterrupt], **kwargs: Any\n    ) -> Any:\n        """Run when tool errors."""\n\n    def on_text(self, text: str, **kwargs: Any) -> Any:\n        """Run on arbitrary text."""\n\n    def on_agent_action(self, action: AgentAction, **kwargs: Any) -> Any:\n        """Run on agent action."""\n\n    def on_agent_finish(self, finish: AgentFinish, **kwargs: Any) -> Any:\n        """Run on agent end."""\n')),(0,r.kt)("h2",{id:"get-started"},"Get started"),(0,r.kt)("p",null,"LangChain provides a few built-in handlers that you can use to get started. These are available in the ",(0,r.kt)("inlineCode",{parentName:"p"},"langchain/callbacks")," module. The most basic handler is the ",(0,r.kt)("inlineCode",{parentName:"p"},"StdOutCallbackHandler"),", which simply logs all events to ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": when the ",(0,r.kt)("inlineCode",{parentName:"p"},"verbose")," flag on the object is set to true, the ",(0,r.kt)("inlineCode",{parentName:"p"},"StdOutCallbackHandler")," will be invoked even without being explicitly passed in."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.callbacks import StdOutCallbackHandler\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\n\nhandler = StdOutCallbackHandler()\nllm = OpenAI()\nprompt = PromptTemplate.from_template(\"1 + {number} = \")\n\n# Constructor callback: First, let's explicitly set the StdOutCallbackHandler when initializing our chain\nchain = LLMChain(llm=llm, prompt=prompt, callbacks=[handler])\nchain.run(number=2)\n\n# Use verbose flag: Then, let's use the `verbose` flag to achieve the same result\nchain = LLMChain(llm=llm, prompt=prompt, verbose=True)\nchain.run(number=2)\n\n# Request callbacks: Finally, let's use the request `callbacks` to achieve the same result\nchain = LLMChain(llm=llm, prompt=prompt)\nchain.run(number=2, callbacks=[handler])\n")),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n    \n    > Finished chain.\n\n\n    '\\n\\n3'\n"))),(0,r.kt)("h2",{id:"where-to-pass-in-callbacks"},"Where to pass in callbacks"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"callbacks")," argument is available on most objects throughout the API (Chains, Models, Tools, Agents, etc.) in two different places:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Constructor callbacks"),": defined in the constructor, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"LLMChain(callbacks=[handler], tags=['a-tag'])"),", which will be used for all calls made on that object, and will be scoped to that object only, e.g. if you pass a handler to the ",(0,r.kt)("inlineCode",{parentName:"li"},"LLMChain")," constructor, it will not be used by the Model attached to that chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Request callbacks"),": defined in the ",(0,r.kt)("inlineCode",{parentName:"li"},"run()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"apply()")," methods used for issuing a request, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"chain.run(input, callbacks=[handler])"),", which will be used for that specific request only, and all sub-requests that it contains (e.g. a call to an LLMChain triggers a call to a Model, which uses the same handler passed in the ",(0,r.kt)("inlineCode",{parentName:"li"},"call()")," method).")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"verbose")," argument is available on most objects throughout the API (Chains, Models, Tools, Agents, etc.) as a constructor argument, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"LLMChain(verbose=True)"),", and it is equivalent to passing a ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsoleCallbackHandler")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"callbacks")," argument of that object and all child objects. This is useful for debugging, as it will log all events to the console."),(0,r.kt)("h3",{id:"when-do-you-want-to-use-each-of-these"},"When do you want to use each of these?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Constructor callbacks are most useful for use cases such as logging, monitoring, etc., which are ",(0,r.kt)("em",{parentName:"li"},"not specific to a single request"),", but rather to the entire chain. For example, if you want to log all the requests made to an ",(0,r.kt)("inlineCode",{parentName:"li"},"LLMChain"),", you would pass a handler to the constructor."),(0,r.kt)("li",{parentName:"ul"},"Request callbacks are most useful for use cases such as streaming, where you want to stream the output of a single request to a specific websocket connection, or other similar use cases. For example, if you want to stream the output of a single request to a websocket, you would pass a handler to the ",(0,r.kt)("inlineCode",{parentName:"li"},"call()")," method")))}c.isMDXComponent=!0;const u={sidebar_position:5},d="Callbacks",p={unversionedId:"modules/callbacks/index",id:"modules/callbacks/index",title:"Callbacks",description:"Head to Integrations for documentation on built-in callbacks integrations with 3rd-party tools.",source:"@site/docs/modules/callbacks/index.mdx",sourceDirName:"modules/callbacks",slug:"/modules/callbacks/",permalink:"/langchain/docs/modules/callbacks/",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Toolkits",permalink:"/langchain/docs/modules/agents/toolkits/"},next:{title:"Async callbacks",permalink:"/langchain/docs/modules/callbacks/async_callbacks"}},h={},m=[],k={toc:m},b="wrapper";function g(e){let{components:n,...t}=e;return(0,r.kt)(b,(0,a.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"callbacks"},"Callbacks"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Head to ",(0,r.kt)("a",{parentName:"p",href:"/docs/integrations/callbacks/"},"Integrations")," for documentation on built-in callbacks integrations with 3rd-party tools.")),(0,r.kt)("p",null,"LangChain provides a callbacks system that allows you to hook into the various stages of your LLM application. This is useful for logging, monitoring, streaming, and other tasks."),(0,r.kt)(c,{mdxType:"GetStarted"}))}g.isMDXComponent=!0}}]);