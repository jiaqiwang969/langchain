"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[76717],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(h,s(s({ref:t},m),{},{components:n})):a.createElement(h,s({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},46902:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},s="LangChain Decorators \u2728",i={unversionedId:"integrations/providers/langchain_decorators",id:"integrations/providers/langchain_decorators",title:"LangChain Decorators \u2728",description:"lanchchain decorators is a layer on the top of LangChain that provides syntactic sugar \ud83c\udf6d for writing custom langchain prompts and chains",source:"@site/docs/integrations/providers/langchain_decorators.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/langchain_decorators",permalink:"/langchain/docs/integrations/providers/langchain_decorators",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"LanceDB",permalink:"/langchain/docs/integrations/providers/lancedb"},next:{title:"Llama.cpp",permalink:"/langchain/docs/integrations/providers/llamacpp"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Examples",id:"examples",level:2},{value:"Passing a memory and/or callbacks:",id:"passing-a-memory-andor-callbacks",level:2},{value:"Documenting your prompt",id:"documenting-your-prompt",level:2},{value:"Chat messages prompt",id:"chat-messages-prompt",level:2},{value:"More complex structures",id:"more-complex-structures",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"langchain-decorators-"},"LangChain Decorators \u2728"),(0,r.kt)("p",null,"lanchchain decorators is a layer on the top of LangChain that provides syntactic sugar \ud83c\udf6d for writing custom langchain prompts and chains"),(0,r.kt)("p",null,"For Feedback, Issues, Contributions - please raise an issue here:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ju-bezdek/langchain-decorators"},"ju-bezdek/langchain-decorators")),(0,r.kt)("p",null,"Main principles and benefits:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"more ",(0,r.kt)("inlineCode",{parentName:"li"},"pythonic")," way of writing code"),(0,r.kt)("li",{parentName:"ul"},"write multiline prompts that won't break your code flow with indentation"),(0,r.kt)("li",{parentName:"ul"},"making use of IDE in-built support for ",(0,r.kt)("strong",{parentName:"li"},"hinting"),", ",(0,r.kt)("strong",{parentName:"li"},"type checking")," and ",(0,r.kt)("strong",{parentName:"li"},"popup with docs")," to quickly peek in the function to see the prompt, parameters it consumes etc."),(0,r.kt)("li",{parentName:"ul"},"leverage all the power of \ud83e\udd9c\ud83d\udd17 LangChain ecosystem"),(0,r.kt)("li",{parentName:"ul"},"adding support for ",(0,r.kt)("strong",{parentName:"li"},"optional parameters")),(0,r.kt)("li",{parentName:"ul"},"easily share parameters between the prompts by binding them to one class")),(0,r.kt)("p",null,"Here is a simple example of a code written with ",(0,r.kt)("strong",{parentName:"p"},"LangChain Decorators \u2728")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\n@llm_prompt\ndef write_me_short_post(topic:str, platform:str="twitter", audience:str = "developers")->str:\n    """\n    Write me a short header for my post about {topic} for {platform} platform. \n    It should be for {audience} audience.\n    (Max 15 words)\n    """\n    return\n\n# run it naturally\nwrite_me_short_post(topic="starwars")\n# or\nwrite_me_short_post(topic="starwars", platform="redit")\n')),(0,r.kt)("h1",{id:"quick-start"},"Quick start"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install langchain_decorators\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Good idea on how to start is to review the examples here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ju-bezdek/langchain-decorators/blob/main/example_notebook.ipynb"},"jupyter notebook")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://colab.research.google.com/drive/1no-8WfeP6JaLD9yUtkPgym6x0G9ZYZOG#scrollTo=N4cf__D0E2Yk"},"colab notebook"))),(0,r.kt)("h1",{id:"defining-other-parameters"},"Defining other parameters"),(0,r.kt)("p",null,"Here we are just marking a function as a prompt with ",(0,r.kt)("inlineCode",{parentName:"p"},"llm_prompt")," decorator, turning it effectively into a LLMChain. Instead of running it "),(0,r.kt)("p",null,"Standard LLMchain takes much more init parameter than just inputs_variables and prompt... here is this implementation detail hidden in the decorator.\nHere is how it works:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Using ",(0,r.kt)("strong",{parentName:"li"},"Global settings"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# define global settings for all prompty (if not set - chatGPT is the current default)\nfrom langchain_decorators import GlobalSettings\n\nGlobalSettings.define_settings(\n    default_llm=ChatOpenAI(temperature=0.0), this is default... can change it here globally\n    default_streaming_llm=ChatOpenAI(temperature=0.0,streaming=True), this is default... can change it here for all ... will be used for streaming\n)\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Using predefined ",(0,r.kt)("strong",{parentName:"li"},"prompt types"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#You can change the default prompt types\nfrom langchain_decorators import PromptTypes, PromptTypeSettings\n\nPromptTypes.AGENT_REASONING.llm = ChatOpenAI()\n\n# Or you can just define your own ones:\nclass MyCustomPromptTypes(PromptTypes):\n    GPT4=PromptTypeSettings(llm=ChatOpenAI(model="gpt-4"))\n\n@llm_prompt(prompt_type=MyCustomPromptTypes.GPT4) \ndef write_a_complicated_code(app_idea:str)->str:\n    ...\n\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Define the settings ",(0,r.kt)("strong",{parentName:"li"},"directly in the decorator"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.llms import OpenAI\n\n@llm_prompt(\n    llm=OpenAI(temperature=0.7),\n    stop_tokens=["\\nObservation"],\n    ...\n    )\ndef creative_writer(book_title:str)->str:\n    ...\n')),(0,r.kt)("h2",{id:"passing-a-memory-andor-callbacks"},"Passing a memory and/or callbacks:"),(0,r.kt)("p",null,"To pass any of these, just declare them in the function (or use kwargs to pass anything)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\n@llm_prompt()\nasync def write_me_short_post(topic:str, platform:str="twitter", memory:SimpleMemory = None):\n    """\n    {history_key}\n    Write me a short header for my post about {topic} for {platform} platform. \n    It should be for {audience} audience.\n    (Max 15 words)\n    """\n    pass\n\nawait write_me_short_post(topic="old movies")\n\n')),(0,r.kt)("h1",{id:"simplified-streaming"},"Simplified streaming"),(0,r.kt)("p",null,"If we want to leverage streaming:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"we need to define prompt as async function "),(0,r.kt)("li",{parentName:"ul"},"turn on the streaming on the decorator, or we can define PromptType with streaming on"),(0,r.kt)("li",{parentName:"ul"},"capture the stream using StreamingContext")),(0,r.kt)("p",null,"This way we just mark which prompt should be streamed, not needing to tinker with what LLM should we use, passing around the creating and distribute streaming handler into particular part of our chain... just turn the streaming on/off on prompt/prompt type..."),(0,r.kt)("p",null,"The streaming will happen only if we call it in streaming context ... there we can define a simple function to handle the stream"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# this code example is complete and should run as it is\n\nfrom langchain_decorators import StreamingContext, llm_prompt\n\n# this will mark the prompt for streaming (useful if we want stream just some prompts in our app... but don\'t want to pass distribute the callback handlers)\n# note that only async functions can be streamed (will get an error if it\'s not)\n@llm_prompt(capture_stream=True) \nasync def write_me_short_post(topic:str, platform:str="twitter", audience:str = "developers"):\n    """\n    Write me a short header for my post about {topic} for {platform} platform. \n    It should be for {audience} audience.\n    (Max 15 words)\n    """\n    pass\n\n\n\n# just an arbitrary  function to demonstrate the streaming... will be some websockets code in the real world\ntokens=[]\ndef capture_stream_func(new_token:str):\n    tokens.append(new_token)\n\n# if we want to capture the stream, we need to wrap the execution into StreamingContext... \n# this will allow us to capture the stream even if the prompt call is hidden inside higher level method\n# only the prompts marked with capture_stream will be captured here\nwith StreamingContext(stream_to_stdout=True, callback=capture_stream_func):\n    result = await run_prompt()\n    print("Stream finished ... we can distinguish tokens thanks to alternating colors")\n\n\nprint("\\nWe\'ve captured",len(tokens),"tokens\ud83c\udf89\\n")\nprint("Here is the result:")\nprint(result)\n')),(0,r.kt)("h1",{id:"prompt-declarations"},"Prompt declarations"),(0,r.kt)("p",null,"By default the prompt is is the whole function docs, unless you mark your prompt "),(0,r.kt)("h2",{id:"documenting-your-prompt"},"Documenting your prompt"),(0,r.kt)("p",null,"We can specify what part of our docs is the prompt definition, by specifying a code block with ",(0,r.kt)("inlineCode",{parentName:"p"},"<prompt>")," language tag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@llm_prompt\ndef write_me_short_post(topic:str, platform:str="twitter", audience:str = "developers"):\n    """\n    Here is a good way to write a prompt as part of a function docstring, with additional documentation for devs.\n\n    It needs to be a code block, marked as a `<prompt>` language\n    ```<prompt>\n    Write me a short header for my post about {topic} for {platform} platform. \n    It should be for {audience} audience.\n    (Max 15 words)\n    ```\n\n    Now only to code block above will be used as a prompt, and the rest of the docstring will be used as a description for developers.\n    (It has also a nice benefit that IDE (like VS code) will display the prompt properly (not trying to parse it as markdown, and thus not showing new lines properly))\n    """\n    return \n')),(0,r.kt)("h2",{id:"chat-messages-prompt"},"Chat messages prompt"),(0,r.kt)("p",null,"For chat models is very useful to define prompt as a set of message templates... here is how to do it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@llm_prompt\ndef simulate_conversation(human_input:str, agent_role:str="a pirate"):\n    """\n    ## System message\n     - note the `:system` sufix inside the <prompt:_role_> tag\n     \n\n    ```<prompt:system>\n    You are a {agent_role} hacker. You mus act like one.\n    You reply always in code, using python or javascript code block...\n    for example:\n    \n    ... do not reply with anything else.. just with code - respecting your role.\n    ```\n\n    # human message \n    (we are using the real role that are enforced by the LLM - GPT supports system, assistant, user)\n    ``` <prompt:user>\n    Helo, who are you\n    ```\n    a reply:\n    \n\n    ``` <prompt:assistant>\n    \\``` python <<- escaping inner code block with \\ that should be part of the prompt\n    def hello():\n        print("Argh... hello you pesky pirate")\n    \\```\n    ```\n    \n    we can also add some history using placeholder\n    ```<prompt:placeholder>\n    {history}\n    ```\n    ```<prompt:user>\n    {human_input}\n    ```\n\n    Now only to code block above will be used as a prompt, and the rest of the docstring will be used as a description for developers.\n    (It has also a nice benefit that IDE (like VS code) will display the prompt properly (not trying to parse it as markdown, and thus not showing new lines properly))\n    """\n    pass\n\n')),(0,r.kt)("p",null,"the roles here are model native roles (assistant, user, system for chatGPT)"),(0,r.kt)("h1",{id:"optional-sections"},"Optional sections"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"you can define a whole sections of your prompt that should be optional"),(0,r.kt)("li",{parentName:"ul"},"if any input in the section is missing, the whole section won't be rendered")),(0,r.kt)("p",null,"the syntax for this is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'@llm_prompt\ndef prompt_with_optional_partials():\n    """\n    this text will be rendered always, but\n\n    {? anything inside this block will be rendered only if all the {value}s parameters are not empty (None | "")   ?}\n\n    you can also place it in between the words\n    this too will be rendered{? , but\n        this  block will be rendered only if {this_value} and {this_value}\n        is not empty?} !\n    """\n')),(0,r.kt)("h1",{id:"output-parsers"},"Output parsers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"llm_prompt decorator natively tries to detect the best output parser based on the output type. (if not set, it returns the raw string)"),(0,r.kt)("li",{parentName:"ul"},"list, dict and pydantic outputs are also supported natively (automatically)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# this code example is complete and should run as it is\n\nfrom langchain_decorators import llm_prompt\n\n@llm_prompt\ndef write_name_suggestions(company_business:str, count:int)->list:\n    """ Write me {count} good name suggestions for company that {company_business}\n    """\n    pass\n\nwrite_name_suggestions(company_business="sells cookies", count=5)\n')),(0,r.kt)("h2",{id:"more-complex-structures"},"More complex structures"),(0,r.kt)("p",null,"for dict / pydantic you need to specify the formatting instructions...\nthis can be tedious, that's why you can let the output parser gegnerate you the instructions based on the model (pydantic)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain_decorators import llm_prompt\nfrom pydantic import BaseModel, Field\n\n\nclass TheOutputStructureWeExpect(BaseModel):\n    name:str = Field (description="The name of the company")\n    headline:str = Field( description="The description of the company (for landing page)")\n    employees:list[str] = Field(description="5-8 fake employee names with their positions")\n\n@llm_prompt()\ndef fake_company_generator(company_business:str)->TheOutputStructureWeExpect:\n    """ Generate a fake company that {company_business}\n    {FORMAT_INSTRUCTIONS}\n    """\n    return\n\ncompany = fake_company_generator(company_business="sells cookies")\n\n# print the result nicely formatted\nprint("Company name: ",company.name)\nprint("company headline: ",company.headline)\nprint("company employees: ",company.employees)\n\n')),(0,r.kt)("h1",{id:"binding-the-prompt-to-an-object"},"Binding the prompt to an object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from pydantic import BaseModel\nfrom langchain_decorators import llm_prompt\n\nclass AssistantPersonality(BaseModel):\n    assistant_name:str\n    assistant_role:str\n    field:str\n\n    @property\n    def a_property(self):\n        return "whatever"\n\n    def hello_world(self, function_kwarg:str=None):\n        """\n        We can reference any {field} or {a_property} inside our prompt... and combine it with {function_kwarg} in the method\n        """\n\n    \n    @llm_prompt\n    def introduce_your_self(self)->str:\n        """\n        ```\xa0<prompt:system>\n        You are an assistant named {assistant_name}. \n        Your role is to act as {assistant_role}\n        ```\n        ```<prompt:user>\n        Introduce your self (in less than 20 words)\n        ```\n        """\n\n    \n\npersonality = AssistantPersonality(assistant_name="John", assistant_role="a pirate")\n\nprint(personality.introduce_your_self(personality))\n')),(0,r.kt)("h1",{id:"more-examples"},"More examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"these and few more examples are also available in the ",(0,r.kt)("a",{parentName:"li",href:"https://colab.research.google.com/drive/1no-8WfeP6JaLD9yUtkPgym6x0G9ZYZOG#scrollTo=N4cf__D0E2Yk"},"colab notebook here")),(0,r.kt)("li",{parentName:"ul"},"including the ",(0,r.kt)("a",{parentName:"li",href:"https://colab.research.google.com/drive/1no-8WfeP6JaLD9yUtkPgym6x0G9ZYZOG#scrollTo=3bID5fryE2Yp"},"ReAct Agent re-implementation")," using purely langchain decorators")))}u.isMDXComponent=!0}}]);