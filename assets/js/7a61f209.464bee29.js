"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[89061],{3905:(e,n,a)=>{a.d(n,{Zo:()=>l,kt:()=>d});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function p(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=t.createContext({}),h=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):p(p({},n),e)),a},l=function(e){var n=h(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=h(a),m=r,d=u["".concat(c,".").concat(m)]||u[m]||s[m]||o;return a?t.createElement(d,p(p({ref:n},l),{},{components:a})):t.createElement(d,p({ref:n},l))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,p=new Array(o);p[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:r,p[1]=i;for(var h=2;h<o;h++)p[h]=a[h];return t.createElement.apply(null,p)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},34007:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>h});var t=a(87462),r=(a(67294),a(3905));const o={},p="KuzuQAChain",i={unversionedId:"use_cases/more/graph/graph_kuzu_qa",id:"use_cases/more/graph/graph_kuzu_qa",title:"KuzuQAChain",description:"This notebook shows how to use LLMs to provide a natural language interface to K\xf9zu database.",source:"@site/docs/use_cases/more/graph/graph_kuzu_qa.md",sourceDirName:"use_cases/more/graph",slug:"/use_cases/more/graph/graph_kuzu_qa",permalink:"/langchain/docs/use_cases/more/graph/graph_kuzu_qa",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"HugeGraph QA Chain",permalink:"/langchain/docs/use_cases/more/graph/graph_hugegraph_qa"},next:{title:"Memgraph QA chain",permalink:"/langchain/docs/use_cases/more/graph/graph_memgraph_qa"}},c={},h=[{value:"Creating <code>KuzuQAChain</code>",id:"creating-kuzuqachain",level:2},{value:"Refresh graph schema information",id:"refresh-graph-schema-information",level:2},{value:"Querying the graph",id:"querying-the-graph",level:2}],l=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const s={toc:h},m="wrapper";function d(e){let{components:n,...a}=e;return(0,r.kt)(m,(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"kuzuqachain"},"KuzuQAChain"),(0,r.kt)("p",null,"This notebook shows how to use LLMs to provide a natural language interface to ",(0,r.kt)("a",{parentName:"p",href:"https://kuzudb.com"},"K\xf9zu")," database."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://kuzudb.com"},"K\xf9zu")," is an in-process property graph database management system. You can simply install it with ",(0,r.kt)("inlineCode",{parentName:"p"},"pip"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install kuzu\n")),(0,r.kt)("p",null,"Once installed, you can simply import it and start creating a database on the local machine and connect to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import kuzu\n\ndb = kuzu.Database("test_db")\nconn = kuzu.Connection(db)\n')),(0,r.kt)("p",null,"First, we create the schema for a simple movie database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'conn.execute("CREATE NODE TABLE Movie (name STRING, PRIMARY KEY(name))")\nconn.execute(\n    "CREATE NODE TABLE Person (name STRING, birthDate STRING, PRIMARY KEY(name))"\n)\nconn.execute("CREATE REL TABLE ActedIn (FROM Person TO Movie)")\n')),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    <kuzu.query_result.QueryResult at 0x1066ff410>\n"))),(0,r.kt)("p",null,"Then we can insert some data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"conn.execute(\"CREATE (:Person {name: 'Al Pacino', birthDate: '1940-04-25'})\")\nconn.execute(\"CREATE (:Person {name: 'Robert De Niro', birthDate: '1943-08-17'})\")\nconn.execute(\"CREATE (:Movie {name: 'The Godfather'})\")\nconn.execute(\"CREATE (:Movie {name: 'The Godfather: Part II'})\")\nconn.execute(\n    \"CREATE (:Movie {name: 'The Godfather Coda: The Death of Michael Corleone'})\"\n)\nconn.execute(\n    \"MATCH (p:Person), (m:Movie) WHERE p.name = 'Al Pacino' AND m.name = 'The Godfather' CREATE (p)-[:ActedIn]->(m)\"\n)\nconn.execute(\n    \"MATCH (p:Person), (m:Movie) WHERE p.name = 'Al Pacino' AND m.name = 'The Godfather: Part II' CREATE (p)-[:ActedIn]->(m)\"\n)\nconn.execute(\n    \"MATCH (p:Person), (m:Movie) WHERE p.name = 'Al Pacino' AND m.name = 'The Godfather Coda: The Death of Michael Corleone' CREATE (p)-[:ActedIn]->(m)\"\n)\nconn.execute(\n    \"MATCH (p:Person), (m:Movie) WHERE p.name = 'Robert De Niro' AND m.name = 'The Godfather: Part II' CREATE (p)-[:ActedIn]->(m)\"\n)\n")),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    <kuzu.query_result.QueryResult at 0x107016210>\n"))),(0,r.kt)("h2",{id:"creating-kuzuqachain"},"Creating ",(0,r.kt)("inlineCode",{parentName:"h2"},"KuzuQAChain")),(0,r.kt)("p",null,"We can now create the ",(0,r.kt)("inlineCode",{parentName:"p"},"KuzuGraph")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"KuzuQAChain"),". To create the ",(0,r.kt)("inlineCode",{parentName:"p"},"KuzuGraph")," we simply need to pass the database object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"KuzuGraph")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "KuzuQAChain"}, {"imported": "KuzuGraph", "source": "langchain.graphs", "docs": "https://api.python.langchain.com/en/latest/graphs/langchain.graphs.kuzu_graph.KuzuGraph.html", "title": "KuzuQAChain"}, {"imported": "KuzuQAChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.graph_qa.kuzu.KuzuQAChain.html", "title": "KuzuQAChain"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.graphs import KuzuGraph\nfrom langchain.chains import KuzuQAChain\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"graph = KuzuGraph(db)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = KuzuQAChain.from_llm(ChatOpenAI(temperature=0), graph=graph, verbose=True)\n")),(0,r.kt)("h2",{id:"refresh-graph-schema-information"},"Refresh graph schema information"),(0,r.kt)("p",null,"If the schema of database changes, you can refresh the schema information needed to generate Cypher statements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# graph.refresh_schema()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(graph.get_schema)\n")),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Node properties: [{'properties': [('name', 'STRING')], 'label': 'Movie'}, {'properties': [('name', 'STRING'), ('birthDate', 'STRING')], 'label': 'Person'}]\n    Relationships properties: [{'properties': [], 'label': 'ActedIn'}]\n    Relationships: ['(:Person)-[:ActedIn]->(:Movie)']\n    \n"))),(0,r.kt)("h2",{id:"querying-the-graph"},"Querying the graph"),(0,r.kt)("p",null,"We can now use the ",(0,r.kt)("inlineCode",{parentName:"p"},"KuzuQAChain")," to ask question of the graph"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Who played in The Godfather: Part II?")\n')),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Generated Cypher:\n    MATCH (p:Person)-[:ActedIn]->(m:Movie {name: 'The Godfather: Part II'}) RETURN p.name\n    Full Context:\n    [{'p.name': 'Al Pacino'}, {'p.name': 'Robert De Niro'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Al Pacino and Robert De Niro both played in The Godfather: Part II.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Robert De Niro played in which movies?")\n')),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Generated Cypher:\n    MATCH (p:Person {name: 'Robert De Niro'})-[:ActedIn]->(m:Movie)\n    RETURN m.name\n    Full Context:\n    [{'m.name': 'The Godfather: Part II'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Robert De Niro played in The Godfather: Part II.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Robert De Niro is born in which year?")\n')),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Generated Cypher:\n    MATCH (p:Person {name: 'Robert De Niro'})-[:ActedIn]->(m:Movie)\n    RETURN p.birthDate\n    Full Context:\n    [{'p.birthDate': '1943-08-17'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Robert De Niro was born on August 17, 1943.'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Who is the oldest actor who played in The Godfather: Part II?")\n')),(0,r.kt)(l,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Generated Cypher:\n    MATCH (p:Person)-[:ActedIn]->(m:Movie{name:'The Godfather: Part II'})\n    WITH p, m, p.birthDate AS birthDate\n    ORDER BY birthDate ASC\n    LIMIT 1\n    RETURN p.name\n    Full Context:\n    [{'p.name': 'Al Pacino'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'The oldest actor who played in The Godfather: Part II is Al Pacino.'\n"))))}d.isMDXComponent=!0}}]);