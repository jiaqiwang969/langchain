"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[92635],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),l=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=l(a),g=n,y=h["".concat(m,".").concat(g)]||h[g]||c[g]||s;return a?r.createElement(y,i(i({ref:t},p),{},{components:a})):r.createElement(y,i({ref:t},p))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=g;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[h]="string"==typeof e?e:n,i[1]=o;for(var l=2;l<s;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},4467:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=a(87462),n=(a(67294),a(3905));const s={},i="Streamlit Chat Message History",o={unversionedId:"integrations/memory/streamlit_chat_message_history",id:"integrations/memory/streamlit_chat_message_history",title:"Streamlit Chat Message History",description:"This notebook goes over how to store and use chat message history in a Streamlit app. StreamlitChatMessageHistory will store messages in",source:"@site/docs/integrations/memory/streamlit_chat_message_history.md",sourceDirName:"integrations/memory",slug:"/integrations/memory/streamlit_chat_message_history",permalink:"/langchain/docs/integrations/memory/streamlit_chat_message_history",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"SQL Chat Message History",permalink:"/langchain/docs/integrations/memory/sql_chat_message_history"},next:{title:"Xata chat memory",permalink:"/langchain/docs/integrations/memory/xata_chat_message_history"}},m={},l=[],p={toc:l},h="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(h,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"streamlit-chat-message-history"},"Streamlit Chat Message History"),(0,n.kt)("p",null,"This notebook goes over how to store and use chat message history in a Streamlit app. StreamlitChatMessageHistory will store messages in\n",(0,n.kt)("a",{parentName:"p",href:"https://docs.streamlit.io/library/api-reference/session-state"},"Streamlit session state"),"\nat the specified ",(0,n.kt)("inlineCode",{parentName:"p"},"key="),". The default key is ",(0,n.kt)("inlineCode",{parentName:"p"},'"langchain_messages"'),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Note, StreamlitChatMessageHistory only works when run in a Streamlit app."),(0,n.kt)("li",{parentName:"ul"},"You may also be interested in ",(0,n.kt)("a",{parentName:"li",href:"/docs/integrations/callbacks/streamlit"},"StreamlitCallbackHandler")," for LangChain."),(0,n.kt)("li",{parentName:"ul"},"For more on Streamlit check out their\n",(0,n.kt)("a",{parentName:"li",href:"https://docs.streamlit.io/library/get-started"},"getting started documentation"),".")),(0,n.kt)("p",null,"You can see the ",(0,n.kt)("a",{parentName:"p",href:"https://langchain-st-memory.streamlit.app/"},"full app example running here"),", and more examples in\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/langchain-ai/streamlit-agent"},"github.com/langchain-ai/streamlit-agent"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "StreamlitChatMessageHistory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.streamlit.StreamlitChatMessageHistory.html", "title": "Streamlit Chat Message History"}]--\x3e\nfrom langchain.memory import StreamlitChatMessageHistory\n\nhistory = StreamlitChatMessageHistory(key="chat_messages")\n\nhistory.add_user_message("hi!")\nhistory.add_ai_message("whats up?")\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"history.messages\n")),(0,n.kt)("p",null,"You can integrate StreamlitChatMessageHistory into ConversationBufferMemory and chains or agents as usual. The history will be persisted across re-runs of the Streamlit app within a given user session. A given StreamlitChatMessageHistory will NOT be persisted or shared across user sessions."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ConversationBufferMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.buffer.ConversationBufferMemory.html", "title": "Streamlit Chat Message History"}, {"imported": "StreamlitChatMessageHistory", "source": "langchain.memory.chat_message_histories", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.streamlit.StreamlitChatMessageHistory.html", "title": "Streamlit Chat Message History"}]--\x3e\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.memory.chat_message_histories import StreamlitChatMessageHistory\n\n# Optionally, specify your own session_state key for storing messages\nmsgs = StreamlitChatMessageHistory(key="special_app_key")\n\nmemory = ConversationBufferMemory(memory_key="history", chat_memory=msgs)\nif len(msgs.messages) == 0:\n    msgs.add_ai_message("How can I help you?")\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "LLMChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "Streamlit Chat Message History"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Streamlit Chat Message History"}, {"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Streamlit Chat Message History"}]--\x3e\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\ntemplate = """You are an AI chatbot having a conversation with a human.\n\n{history}\nHuman: {human_input}\nAI: """\nprompt = PromptTemplate(input_variables=["history", "human_input"], template=template)\n\n# Add the memory to an LLMChain as usual\nllm_chain = LLMChain(llm=OpenAI(), prompt=prompt, memory=memory)\n')),(0,n.kt)("p",null,"Conversational Streamlit apps will often re-draw each previous chat message on every re-run. This is easy to do by iterating through ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamlitChatMessageHistory.messages"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import streamlit as st\n\nfor msg in msgs.messages:\n    st.chat_message(msg.type).write(msg.content)\n\nif prompt := st.chat_input():\n    st.chat_message("human").write(prompt)\n\n    # As usual, new messages are added to StreamlitChatMessageHistory when the Chain is called.\n    response = llm_chain.run(prompt)\n    st.chat_message("ai").write(response)\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://langchain-st-memory.streamlit.app/"},"View the final app"),".")))}c.isMDXComponent=!0}}]);