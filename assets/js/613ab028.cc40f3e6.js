"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[17092],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,g=p["".concat(i,".").concat(d)]||p[d]||h[d]||o;return a?n.createElement(g,s(s({ref:t},m),{},{components:a})):n.createElement(g,s({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},32783:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={},s="Telegram",l={unversionedId:"integrations/chat_loaders/telegram",id:"integrations/chat_loaders/telegram",title:"Telegram",description:"This notebook shows how to use the Telegram chat loader. This class helps map exported Telegram conversations to LangChain chat messages.",source:"@site/docs/integrations/chat_loaders/telegram.md",sourceDirName:"integrations/chat_loaders",slug:"/integrations/chat_loaders/telegram",permalink:"/langchain/docs/integrations/chat_loaders/telegram",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Slack",permalink:"/langchain/docs/integrations/chat_loaders/slack"},next:{title:"Twitter (via Apify)",permalink:"/langchain/docs/integrations/chat_loaders/twitter"}},i={},c=[{value:"1. Creat message dump",id:"1-creat-message-dump",level:2},{value:"2. Create the Chat Loader",id:"2-create-the-chat-loader",level:2},{value:"3. Load messages",id:"3-load-messages",level:2},{value:"Next Steps",id:"next-steps",level:3}],m=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const h={toc:c},d="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"telegram"},"Telegram"),(0,r.kt)("p",null,"This notebook shows how to use the Telegram chat loader. This class helps map exported Telegram conversations to LangChain chat messages."),(0,r.kt)("p",null,"The process has three steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Export  the chat .txt file by copying chats from the Discord app and pasting them in a file on your local computer"),(0,r.kt)("li",{parentName:"ol"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"TelegramChatLoader")," with the file path pointed to the json file or directory of JSON files"),(0,r.kt)("li",{parentName:"ol"},"Call ",(0,r.kt)("inlineCode",{parentName:"li"},"loader.load()")," (or ",(0,r.kt)("inlineCode",{parentName:"li"},"loader.lazy_load()"),") to perform the conversion. Optionally use ",(0,r.kt)("inlineCode",{parentName:"li"},"merge_chat_runs")," to combine message from the same sender in sequence, and/or ",(0,r.kt)("inlineCode",{parentName:"li"},"map_ai_messages"),' to convert messages from the specified sender to the "AIMessage" class.')),(0,r.kt)("h2",{id:"1-creat-message-dump"},"1. Creat message dump"),(0,r.kt)("p",null,"Currently (2023/08/23) this loader best supports json files in the format generated by exporting your chat history from the ",(0,r.kt)("a",{parentName:"p",href:"https://desktop.telegram.org/"},"Telegram Desktop App"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important:")," There are 'lite' versions of telegram such as \"Telegram for MacOS\" that lack the export functionality. Please make sure you use the correct app to export the file."),(0,r.kt)("p",null,"To make the export:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Download and open telegram desktop"),(0,r.kt)("li",{parentName:"ol"},"Select a conversation"),(0,r.kt)("li",{parentName:"ol"},"Navigate to the conversation settings (currently the three dots in the top right corner)"),(0,r.kt)("li",{parentName:"ol"},'Click "Export Chat History"'),(0,r.kt)("li",{parentName:"ol"},'Unselect photos and other media. Select "Machine-readable JSON" format to export.')),(0,r.kt)("p",null,"An example is below: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="telegram_conversation.json"',title:'"telegram_conversation.json"'},'{\n "name": "Jiminy",\n "type": "personal_chat",\n "id": 5965280513,\n "messages": [\n  {\n   "id": 1,\n   "type": "message",\n   "date": "2023-08-23T13:11:23",\n   "date_unixtime": "1692821483",\n   "from": "Jiminy Cricket",\n   "from_id": "user123450513",\n   "text": "You better trust your conscience",\n   "text_entities": [\n    {\n     "type": "plain",\n     "text": "You better trust your conscience"\n    }\n   ]\n  },\n  {\n   "id": 2,\n   "type": "message",\n   "date": "2023-08-23T13:13:20",\n   "date_unixtime": "1692821600",\n   "from": "Batman & Robin",\n   "from_id": "user6565661032",\n   "text": "What did you just say?",\n   "text_entities": [\n    {\n     "type": "plain",\n     "text": "What did you just say?"\n    }\n   ]\n  }\n ]\n}\n')),(0,r.kt)("h2",{id:"2-create-the-chat-loader"},"2. Create the Chat Loader"),(0,r.kt)("p",null,"All that's required is the file path. You can optionally specify the user name that maps to an ai message as well an configure whether to merge message runs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TelegramChatLoader", "source": "langchain.chat_loaders.telegram", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.telegram.TelegramChatLoader.html", "title": "Telegram"}]--\x3e\nfrom langchain.chat_loaders.telegram import TelegramChatLoader\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'loader = TelegramChatLoader(\n    path="./telegram_conversation.json", \n)\n')),(0,r.kt)("h2",{id:"3-load-messages"},"3. Load messages"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"load()")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy_load"),') methods return a list of "ChatSessions" that currently just contain a list of messages per loaded conversation.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatSession", "source": "langchain.chat_loaders.base", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.base.ChatSession.html", "title": "Telegram"}, {"imported": "map_ai_messages", "source": "langchain.chat_loaders.utils", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.utils.map_ai_messages.html", "title": "Telegram"}, {"imported": "merge_chat_runs", "source": "langchain.chat_loaders.utils", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.utils.merge_chat_runs.html", "title": "Telegram"}]--\x3e\nfrom typing import List\nfrom langchain.chat_loaders.base import ChatSession\nfrom langchain.chat_loaders.utils import (\n    map_ai_messages,\n    merge_chat_runs,\n)\n\nraw_messages = loader.lazy_load()\n# Merge consecutive messages from the same sender into a single message\nmerged_messages = merge_chat_runs(raw_messages)\n# Convert messages from "Jiminy Cricket" to AI messages\nmessages: List[ChatSession] = list(map_ai_messages(merged_messages, sender="Jiminy Cricket"))\n')),(0,r.kt)("h3",{id:"next-steps"},"Next Steps"),(0,r.kt)("p",null,"You can then use these messages how you see fit, such as finetuning a model, few-shot example selection, or directly make predictions for the next message  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Telegram"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI()\n\nfor chunk in llm.stream(messages[0][\'messages\']):\n    print(chunk.content, end="", flush=True)\n')),(0,r.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    I said, "You better trust your conscience."\n'))))}g.isMDXComponent=!0}}]);