"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[25094],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>m});var t=a(67294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function c(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?c(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=t.createContext({}),i=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=i(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,c=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=i(a),h=l,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||c;return a?t.createElement(m,o(o({ref:n},d),{},{components:a})):t.createElement(m,o({ref:n},d))}));function m(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var c=a.length,o=new Array(c);o[0]=h;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[u]="string"==typeof e?e:l,o[1]=r;for(var i=2;i<c;i++)o[i]=a[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},35934:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>i});var t=a(87462),l=(a(67294),a(3905));const c={},o="Async callbacks",r={unversionedId:"modules/callbacks/async_callbacks",id:"modules/callbacks/async_callbacks",title:"Async callbacks",description:"If you are planning to use the async API, it is recommended to use AsyncCallbackHandler to avoid blocking the runloop.",source:"@site/docs/modules/callbacks/async_callbacks.md",sourceDirName:"modules/callbacks",slug:"/modules/callbacks/async_callbacks",permalink:"/langchain/docs/modules/callbacks/async_callbacks",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Callbacks",permalink:"/langchain/docs/modules/callbacks/"},next:{title:"Custom callback handlers",permalink:"/langchain/docs/modules/callbacks/custom_callbacks"}},s={},i=[],d=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var u;const p={toc:i},h="wrapper";function m(e){let{components:n,...a}=e;return(0,l.kt)(h,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"async-callbacks"},"Async callbacks"),(0,l.kt)("p",null,"If you are planning to use the async API, it is recommended to use ",(0,l.kt)("inlineCode",{parentName:"p"},"AsyncCallbackHandler")," to avoid blocking the runloop. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Advanced")," if you use a sync ",(0,l.kt)("inlineCode",{parentName:"p"},"CallbackHandler")," while using an async method to run your LLM / Chain / Tool / Agent, it will still work. However, under the hood, it will be called with ",(0,l.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor"},(0,l.kt)("inlineCode",{parentName:"a"},"run_in_executor"))," which can cause issues if your ",(0,l.kt)("inlineCode",{parentName:"p"},"CallbackHandler")," is not thread-safe."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Async callbacks"}, {"imported": "LLMResult", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.output.LLMResult.html", "title": "Async callbacks"}, {"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "Async callbacks"}, {"imported": "AsyncCallbackHandler", "source": "langchain.callbacks.base", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.base.AsyncCallbackHandler.html", "title": "Async callbacks"}, {"imported": "BaseCallbackHandler", "source": "langchain.callbacks.base", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.base.BaseCallbackHandler.html", "title": "Async callbacks"}]--\x3e\nimport asyncio\nfrom typing import Any, Dict, List\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.schema import LLMResult, HumanMessage\nfrom langchain.callbacks.base import AsyncCallbackHandler, BaseCallbackHandler\n\n\nclass MyCustomSyncHandler(BaseCallbackHandler):\n    def on_llm_new_token(self, token: str, **kwargs) -> None:\n        print(f"Sync handler being called in a `thread_pool_executor`: token: {token}")\n\n\nclass MyCustomAsyncHandler(AsyncCallbackHandler):\n    """Async callback handler that can be used to handle callbacks from langchain."""\n\n    async def on_llm_start(\n        self, serialized: Dict[str, Any], prompts: List[str], **kwargs: Any\n    ) -> None:\n        """Run when chain starts running."""\n        print("zzzz....")\n        await asyncio.sleep(0.3)\n        class_name = serialized["name"]\n        print("Hi! I just woke up. Your llm is starting")\n\n    async def on_llm_end(self, response: LLMResult, **kwargs: Any) -> None:\n        """Run when chain ends running."""\n        print("zzzz....")\n        await asyncio.sleep(0.3)\n        print("Hi! I just woke up. Your llm is ending")\n\n\n# To enable streaming, we pass in `streaming=True` to the ChatModel constructor\n# Additionally, we pass in a list with our custom handler\nchat = ChatOpenAI(\n    max_tokens=25,\n    streaming=True,\n    callbacks=[MyCustomSyncHandler(), MyCustomAsyncHandler()],\n)\n\nawait chat.agenerate([[HumanMessage(content="Tell me a joke")]])\n')),(0,l.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    zzzz....\n    Hi! I just woke up. Your llm is starting\n    Sync handler being called in a `thread_pool_executor`: token: \n    Sync handler being called in a `thread_pool_executor`: token: Why\n    Sync handler being called in a `thread_pool_executor`: token:  don\n    Sync handler being called in a `thread_pool_executor`: token: 't\n    Sync handler being called in a `thread_pool_executor`: token:  scientists\n    Sync handler being called in a `thread_pool_executor`: token:  trust\n    Sync handler being called in a `thread_pool_executor`: token:  atoms\n    Sync handler being called in a `thread_pool_executor`: token: ?\n    Sync handler being called in a `thread_pool_executor`: token:  \n    \n    \n    Sync handler being called in a `thread_pool_executor`: token: Because\n    Sync handler being called in a `thread_pool_executor`: token:  they\n    Sync handler being called in a `thread_pool_executor`: token:  make\n    Sync handler being called in a `thread_pool_executor`: token:  up\n    Sync handler being called in a `thread_pool_executor`: token:  everything\n    Sync handler being called in a `thread_pool_executor`: token: .\n    Sync handler being called in a `thread_pool_executor`: token: \n    zzzz....\n    Hi! I just woke up. Your llm is ending\n\n\n\n\n\n    LLMResult(generations=[[ChatGeneration(text=\"Why don't scientists trust atoms? \\n\\nBecause they make up everything.\", generation_info=None, message=AIMessage(content=\"Why don't scientists trust atoms? \\n\\nBecause they make up everything.\", additional_kwargs={}, example=False))]], llm_output={'token_usage': {}, 'model_name': 'gpt-3.5-turbo'})\n"))))}m.isMDXComponent=!0}}]);