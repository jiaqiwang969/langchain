"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[17141],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,g=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i="Qdrant self-querying",s={unversionedId:"modules/data_connection/retrievers/self_query/qdrant_self_query",id:"modules/data_connection/retrievers/self_query/qdrant_self_query",title:"Qdrant self-querying",description:"Qdrant (read: quadrant) is a vector similarity search engine. It provides a production-ready service with a convenient API to store, search, and manage points - vectors with an additional payload. Qdrant is tailored to extended filtering support.",source:"@site/docs/modules/data_connection/retrievers/self_query/qdrant_self_query.md",sourceDirName:"modules/data_connection/retrievers/self_query",slug:"/modules/data_connection/retrievers/self_query/qdrant_self_query",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/qdrant_self_query",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Self-querying with Pinecone",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/pinecone"},next:{title:"Weaviate self-querying",permalink:"/langchain/docs/modules/data_connection/retrievers/self_query/weaviate_self_query"}},l={},c=[{value:"Creating a Qdrant vector store",id:"creating-a-qdrant-vector-store",level:2},{value:"Creating our self-querying retriever",id:"creating-our-self-querying-retriever",level:2},{value:"Testing it out",id:"testing-it-out",level:2},{value:"Filter k",id:"filter-k",level:2}],d=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const p={toc:c},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"qdrant-self-querying"},"Qdrant self-querying"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://qdrant.tech/documentation/"},"Qdrant")," (read: quadrant) is a vector similarity search engine. It provides a production-ready service with a convenient API to store, search, and manage points - vectors with an additional payload. ",(0,a.kt)("inlineCode",{parentName:"p"},"Qdrant")," is tailored to extended filtering support.")),(0,a.kt)("p",null,"In the notebook we'll demo the ",(0,a.kt)("inlineCode",{parentName:"p"},"SelfQueryRetriever")," wrapped around a Qdrant vector store. "),(0,a.kt)("h2",{id:"creating-a-qdrant-vector-store"},"Creating a Qdrant vector store"),(0,a.kt)("p",null,"First we'll want to create a Qdrant vector store and seed it with some data. We've created a small demo set of documents that contain summaries of movies."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," The self-query retriever requires you to have ",(0,a.kt)("inlineCode",{parentName:"p"},"lark")," installed (",(0,a.kt)("inlineCode",{parentName:"p"},"pip install lark"),"). We also need the ",(0,a.kt)("inlineCode",{parentName:"p"},"qdrant-client")," package."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"#!pip install lark qdrant-client\n")),(0,a.kt)("p",null,"We want to use ",(0,a.kt)("inlineCode",{parentName:"p"},"OpenAIEmbeddings")," so we have to get the OpenAI API Key."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# import os\n# import getpass\n\n# os.environ['OPENAI_API_KEY'] = getpass.getpass('OpenAI API Key:')\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Document", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Qdrant self-querying "}, {"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Qdrant self-querying "}, {"imported": "Qdrant", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.qdrant.Qdrant.html", "title": "Qdrant self-querying "}]--\x3e\nfrom langchain.schema import Document\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores import Qdrant\n\nembeddings = OpenAIEmbeddings()\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'docs = [\n    Document(\n        page_content="A bunch of scientists bring back dinosaurs and mayhem breaks loose",\n        metadata={"year": 1993, "rating": 7.7, "genre": "science fiction"},\n    ),\n    Document(\n        page_content="Leo DiCaprio gets lost in a dream within a dream within a dream within a ...",\n        metadata={"year": 2010, "director": "Christopher Nolan", "rating": 8.2},\n    ),\n    Document(\n        page_content="A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea",\n        metadata={"year": 2006, "director": "Satoshi Kon", "rating": 8.6},\n    ),\n    Document(\n        page_content="A bunch of normal-sized women are supremely wholesome and some men pine after them",\n        metadata={"year": 2019, "director": "Greta Gerwig", "rating": 8.3},\n    ),\n    Document(\n        page_content="Toys come alive and have a blast doing so",\n        metadata={"year": 1995, "genre": "animated"},\n    ),\n    Document(\n        page_content="Three men walk into the Zone, three men walk out of the Zone",\n        metadata={\n            "year": 1979,\n            "rating": 9.9,\n            "director": "Andrei Tarkovsky",\n            "genre": "science fiction",\n        },\n    ),\n]\nvectorstore = Qdrant.from_documents(\n    docs,\n    embeddings,\n    location=":memory:",  # Local mode with in-memory storage only\n    collection_name="my_documents",\n)\n')),(0,a.kt)("h2",{id:"creating-our-self-querying-retriever"},"Creating our self-querying retriever"),(0,a.kt)("p",null,"Now we can instantiate our retriever. To do this we'll need to provide some information upfront about the metadata fields that our documents support and a short description of the document contents."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Qdrant self-querying "}, {"imported": "SelfQueryRetriever", "source": "langchain.retrievers.self_query.base", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.self_query.base.SelfQueryRetriever.html", "title": "Qdrant self-querying "}, {"imported": "AttributeInfo", "source": "langchain.chains.query_constructor.base", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.query_constructor.schema.AttributeInfo.html", "title": "Qdrant self-querying "}]--\x3e\nfrom langchain.llms import OpenAI\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\nfrom langchain.chains.query_constructor.base import AttributeInfo\n\nmetadata_field_info = [\n    AttributeInfo(\n        name="genre",\n        description="The genre of the movie",\n        type="string or list[string]",\n    ),\n    AttributeInfo(\n        name="year",\n        description="The year the movie was released",\n        type="integer",\n    ),\n    AttributeInfo(\n        name="director",\n        description="The name of the movie director",\n        type="string",\n    ),\n    AttributeInfo(\n        name="rating", description="A 1-10 rating for the movie", type="float"\n    ),\n]\ndocument_content_description = "Brief summary of a movie"\nllm = OpenAI(temperature=0)\nretriever = SelfQueryRetriever.from_llm(\n    llm, vectorstore, document_content_description, metadata_field_info, verbose=True\n)\n')),(0,a.kt)("h2",{id:"testing-it-out"},"Testing it out"),(0,a.kt)("p",null,"And now we can try actually using our retriever!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a relevant query\nretriever.get_relevant_documents("What are some movies about dinosaurs")\n')),(0,a.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query='dinosaur' filter=None limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'rating': 7.7, 'genre': 'science fiction'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'genre': 'animated'}),\n     Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'rating': 9.9, 'director': 'Andrei Tarkovsky', 'genre': 'science fiction'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'year': 2006, 'director': 'Satoshi Kon', 'rating': 8.6})]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a filter\nretriever.get_relevant_documents("I want to watch a movie rated higher than 8.5")\n')),(0,a.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query=' ' filter=Comparison(comparator=<Comparator.GT: 'gt'>, attribute='rating', value=8.5) limit=None\n\n\n\n\n\n    [Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'rating': 9.9, 'director': 'Andrei Tarkovsky', 'genre': 'science fiction'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'year': 2006, 'director': 'Satoshi Kon', 'rating': 8.6})]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example specifies a query and a filter\nretriever.get_relevant_documents("Has Greta Gerwig directed any movies about women")\n')),(0,a.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query='women' filter=Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='director', value='Greta Gerwig') limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of normal-sized women are supremely wholesome and some men pine after them', metadata={'year': 2019, 'director': 'Greta Gerwig', 'rating': 8.3})]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example specifies a composite filter\nretriever.get_relevant_documents(\n    "What\'s a highly rated (above 8.5) science fiction film?"\n)\n')),(0,a.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query=' ' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.GT: 'gt'>, attribute='rating', value=8.5), Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='genre', value='science fiction')]) limit=None\n\n\n\n\n\n    [Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'rating': 9.9, 'director': 'Andrei Tarkovsky', 'genre': 'science fiction'})]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# This example specifies a query and composite filter\nretriever.get_relevant_documents(\n    \"What's a movie after 1990 but before 2005 that's all about toys, and preferably is animated\"\n)\n")),(0,a.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query='toys' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.GT: 'gt'>, attribute='year', value=1990), Comparison(comparator=<Comparator.LT: 'lt'>, attribute='year', value=2005), Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='genre', value='animated')]) limit=None\n\n\n\n\n\n    [Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'genre': 'animated'})]\n"))),(0,a.kt)("h2",{id:"filter-k"},"Filter k"),(0,a.kt)("p",null,"We can also use the self query retriever to specify ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),": the number of documents to fetch."),(0,a.kt)("p",null,"We can do this by passing ",(0,a.kt)("inlineCode",{parentName:"p"},"enable_limit=True")," to the constructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"retriever = SelfQueryRetriever.from_llm(\n    llm,\n    vectorstore,\n    document_content_description,\n    metadata_field_info,\n    enable_limit=True,\n    verbose=True,\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# This example only specifies a relevant query\nretriever.get_relevant_documents("what are two movies about dinosaurs")\n')),(0,a.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    query='dinosaur' filter=None limit=2\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'rating': 7.7, 'genre': 'science fiction'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'genre': 'animated'})]\n"))))}g.isMDXComponent=!0}}]);