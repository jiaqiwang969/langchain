"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[86578],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=i(a),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(g,l(l({ref:t},p),{},{components:a})):n.createElement(g,l({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var i=2;i<o;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},23852:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const o={},l="BagelDB",s={unversionedId:"integrations/vectorstores/bageldb",id:"integrations/vectorstores/bageldb",title:"BagelDB",description:"BagelDB (Open Vector Database for AI), is like GitHub for AI data.",source:"@site/docs/integrations/vectorstores/bageldb.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/bageldb",permalink:"/langchain/docs/integrations/vectorstores/bageldb",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Azure Cognitive Search",permalink:"/langchain/docs/integrations/vectorstores/azuresearch"},next:{title:"Cassandra",permalink:"/langchain/docs/integrations/vectorstores/cassandra"}},c={},i=[{value:"Installation and Setup",id:"installation-and-setup",level:3},{value:"Create VectorStore from texts",id:"create-vectorstore-from-texts",level:2},{value:"Create VectorStore from docs",id:"create-vectorstore-from-docs",level:2},{value:"Get all text/doc from Cluster",id:"get-all-textdoc-from-cluster",level:2},{value:"Create cluster with metadata &amp; filter using metadata",id:"create-cluster-with-metadata--filter-using-metadata",level:2}],p=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const u={toc:i},m="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bageldb"},"BagelDB"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://www.bageldb.ai/"},"BagelDB")," (",(0,r.kt)("inlineCode",{parentName:"p"},"Open Vector Database for AI"),"), is like GitHub for AI data.\nIt is a collaborative platform where users can create,\nshare, and manage vector datasets. It can support private projects for independent developers,\ninternal collaborations for enterprises, and public contributions for data DAOs.")),(0,r.kt)("h3",{id:"installation-and-setup"},"Installation and Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install betabageldb\n")),(0,r.kt)("h2",{id:"create-vectorstore-from-texts"},"Create VectorStore from texts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Bagel", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.bageldb.Bagel.html", "title": "BagelDB"}]--\x3e\nfrom langchain.vectorstores import Bagel\n\ntexts = ["hello bagel", "hello langchain", "I love salad", "my car", "a dog"]\n# create cluster and add texts\ncluster = Bagel.from_texts(cluster_name="testing", texts=texts)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# similarity search\ncluster.similarity_search("bagel", k=3)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content='hello bagel', metadata={}),\n     Document(page_content='my car', metadata={}),\n     Document(page_content='I love salad', metadata={})]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# the score is a distance metric, so lower is better\ncluster.similarity_search_with_score("bagel", k=3)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [(Document(page_content='hello bagel', metadata={}), 0.27392977476119995),\n     (Document(page_content='my car', metadata={}), 1.4783176183700562),\n     (Document(page_content='I love salad', metadata={}), 1.5342965126037598)]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# delete the cluster\ncluster.delete_cluster()\n")),(0,r.kt)("h2",{id:"create-vectorstore-from-docs"},"Create VectorStore from docs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "BagelDB"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "BagelDB"}]--\x3e\nfrom langchain.document_loaders import TextLoader\nfrom langchain.text_splitter import CharacterTextSplitter\n\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)[:10]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# create cluster with docs\ncluster = Bagel.from_documents(cluster_name="testing_with_docs", documents=docs)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# similarity search\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = cluster.similarity_search(query)\nprint(docs[0].page_content[:102])\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the \n"))),(0,r.kt)("h2",{id:"get-all-textdoc-from-cluster"},"Get all text/doc from Cluster"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'texts = ["hello bagel", "this is langchain"]\ncluster = Bagel.from_texts(cluster_name="testing", texts=texts)\ncluster_data = cluster.get()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# all keys\ncluster_data.keys()\n")),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    dict_keys(['ids', 'embeddings', 'metadatas', 'documents'])\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# all values and keys\ncluster_data\n")),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'ids': ['578c6d24-3763-11ee-a8ab-b7b7b34f99ba',\n      '578c6d25-3763-11ee-a8ab-b7b7b34f99ba',\n      'fb2fc7d8-3762-11ee-a8ab-b7b7b34f99ba',\n      'fb2fc7d9-3762-11ee-a8ab-b7b7b34f99ba',\n      '6b40881a-3762-11ee-a8ab-b7b7b34f99ba',\n      '6b40881b-3762-11ee-a8ab-b7b7b34f99ba',\n      '581e691e-3762-11ee-a8ab-b7b7b34f99ba',\n      '581e691f-3762-11ee-a8ab-b7b7b34f99ba'],\n     'embeddings': None,\n     'metadatas': [{}, {}, {}, {}, {}, {}, {}, {}],\n     'documents': ['hello bagel',\n      'this is langchain',\n      'hello bagel',\n      'this is langchain',\n      'hello bagel',\n      'this is langchain',\n      'hello bagel',\n      'this is langchain']}\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"cluster.delete_cluster()\n")),(0,r.kt)("h2",{id:"create-cluster-with-metadata--filter-using-metadata"},"Create cluster with metadata & filter using metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'texts = ["hello bagel", "this is langchain"]\nmetadatas = [{"source": "notion"}, {"source": "google"}]\n\ncluster = Bagel.from_texts(cluster_name="testing", texts=texts, metadatas=metadatas)\ncluster.similarity_search_with_score("hello bagel", where={"source": "notion"})\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [(Document(page_content='hello bagel', metadata={'source': 'notion'}), 0.0)]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# delete the cluster\ncluster.delete_cluster()\n")))}g.isMDXComponent=!0}}]);