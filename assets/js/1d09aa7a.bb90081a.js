"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[10136],{3905:(e,a,n)=>{n.d(a,{Zo:()=>s,kt:()=>g});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),h=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):p(p({},a),e)),n},s=function(e){var a=h(e.components);return t.createElement(i.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=h(n),m=r,g=c["".concat(i,".").concat(m)]||c[m]||u[m]||o;return n?t.createElement(g,p(p({ref:a},s),{},{components:n})):t.createElement(g,p({ref:a},s))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[c]="string"==typeof e?e:r,p[1]=l;for(var h=2;h<o;h++)p[h]=n[h];return t.createElement.apply(null,p)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},72204:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var t=n(87462),r=(n(67294),n(3905));const o={},p="NebulaGraphQAChain",l={unversionedId:"use_cases/more/graph/graph_nebula_qa",id:"use_cases/more/graph/graph_nebula_qa",title:"NebulaGraphQAChain",description:"This notebook shows how to use LLMs to provide a natural language interface to NebulaGraph database.",source:"@site/docs/use_cases/more/graph/graph_nebula_qa.md",sourceDirName:"use_cases/more/graph",slug:"/use_cases/more/graph/graph_nebula_qa",permalink:"/langchain/docs/use_cases/more/graph/graph_nebula_qa",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Memgraph QA chain",permalink:"/langchain/docs/use_cases/more/graph/graph_memgraph_qa"},next:{title:"Graph QA",permalink:"/langchain/docs/use_cases/more/graph/graph_qa"}},i={},h=[{value:"Refresh graph schema information",id:"refresh-graph-schema-information",level:2},{value:"Querying the graph",id:"querying-the-graph",level:2}],s=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const u={toc:h},m="wrapper";function g(e){let{components:a,...n}=e;return(0,r.kt)(m,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nebulagraphqachain"},"NebulaGraphQAChain"),(0,r.kt)("p",null,"This notebook shows how to use LLMs to provide a natural language interface to NebulaGraph database."),(0,r.kt)("p",null,"You will need to have a running NebulaGraph cluster, for which you can run a containerized cluster by running the following script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -fsSL nebula-up.siwei.io/install.sh | bash\n")),(0,r.kt)("p",null,"Other options are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install as a ",(0,r.kt)("a",{parentName:"li",href:"https://www.docker.com/blog/distributed-cloud-native-graph-database-nebulagraph-docker-extension/"},"Docker Desktop Extension"),". See ",(0,r.kt)("a",{parentName:"li",href:"https://docs.nebula-graph.io/3.5.0/2.quick-start/1.quick-start-workflow/"},"here")),(0,r.kt)("li",{parentName:"ul"},"NebulaGraph Cloud Service. See ",(0,r.kt)("a",{parentName:"li",href:"https://www.nebula-graph.io/cloud"},"here")),(0,r.kt)("li",{parentName:"ul"},"Deploy from package, source code, or via Kubernetes. See ",(0,r.kt)("a",{parentName:"li",href:"https://docs.nebula-graph.io/"},"here"))),(0,r.kt)("p",null,"Once the cluster is running, we could create the SPACE and SCHEMA for the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# connect ngql jupyter extension to nebulagraph\n# create a new space\n%ngql CREATE SPACE IF NOT EXISTS langchain(partition_num=1, replica_factor=1, vid_type=fixed_string(128));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Wait for a few seconds for the space to be created.\n%ngql USE langchain;\n")),(0,r.kt)("p",null,"Create the schema, for full dataset, refer ",(0,r.kt)("a",{parentName:"p",href:"https://www.siwei.io/en/nebulagraph-etl-dbt/"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"CREATE TAG IF NOT EXISTS movie(name string);\nCREATE TAG IF NOT EXISTS person(name string, birthdate string);\nCREATE EDGE IF NOT EXISTS acted_in();\nCREATE TAG INDEX IF NOT EXISTS person_index ON person(name(128));\nCREATE TAG INDEX IF NOT EXISTS movie_index ON movie(name(128));\n")),(0,r.kt)("p",null,"Wait for schema creation to complete, then we can insert some data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'INSERT VERTEX person(name, birthdate) VALUES "Al Pacino":("Al Pacino", "1940-04-25");\nINSERT VERTEX movie(name) VALUES "The Godfather II":("The Godfather II");\nINSERT VERTEX movie(name) VALUES "The Godfather Coda: The Death of Michael Corleone":("The Godfather Coda: The Death of Michael Corleone");\nINSERT EDGE acted_in() VALUES "Al Pacino"->"The Godfather II":();\nINSERT EDGE acted_in() VALUES "Al Pacino"->"The Godfather Coda: The Death of Michael Corleone":();\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    UsageError: Cell magic `%%ngql` not found.\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "NebulaGraphQAChain"}, {"imported": "NebulaGraphQAChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.graph_qa.nebulagraph.NebulaGraphQAChain.html", "title": "NebulaGraphQAChain"}, {"imported": "NebulaGraph", "source": "langchain.graphs", "docs": "https://api.python.langchain.com/en/latest/graphs/langchain.graphs.nebula_graph.NebulaGraph.html", "title": "NebulaGraphQAChain"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import NebulaGraphQAChain\nfrom langchain.graphs import NebulaGraph\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'graph = NebulaGraph(\n    space="langchain",\n    username="root",\n    password="nebula",\n    address="127.0.0.1",\n    port=9669,\n    session_pool_size=30,\n)\n')),(0,r.kt)("h2",{id:"refresh-graph-schema-information"},"Refresh graph schema information"),(0,r.kt)("p",null,"If the schema of database changes, you can refresh the schema information needed to generate nGQL statements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# graph.refresh_schema()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(graph.get_schema)\n")),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Node properties: [{'tag': 'movie', 'properties': [('name', 'string')]}, {'tag': 'person', 'properties': [('name', 'string'), ('birthdate', 'string')]}]\n    Edge properties: [{'edge': 'acted_in', 'properties': []}]\n    Relationships: ['(:person)-[:acted_in]->(:movie)']\n    \n"))),(0,r.kt)("h2",{id:"querying-the-graph"},"Querying the graph"),(0,r.kt)("p",null,"We can now use the graph cypher QA chain to ask question of the graph"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = NebulaGraphQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True\n)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Who played in The Godfather II?")\n')),(0,r.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new NebulaGraphQAChain chain...\n    Generated nGQL:\n    MATCH (p:`person`)-[:acted_in]->(m:`movie`) WHERE m.`movie`.`name` == 'The Godfather II'\n    RETURN p.`person`.`name`\n    Full Context:\n    {'p.person.name': ['Al Pacino']}\n    \n    > Finished chain.\n\n\n\n\n\n    'Al Pacino played in The Godfather II.'\n"))))}g.isMDXComponent=!0}}]);