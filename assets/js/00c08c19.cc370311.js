"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9816],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>m});var r=a(67294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=r.createContext({}),c=function(e){var n=r.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(a),u=t,m=h["".concat(s,".").concat(u)]||h[u]||d[u]||o;return a?r.createElement(m,i(i({ref:n},p),{},{components:a})):r.createElement(m,i({ref:n},p))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[h]="string"==typeof e?e:t,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},37146:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=a(87462),t=(a(67294),a(3905));const o={},i="ArangoDB QA chain",l={unversionedId:"use_cases/more/graph/graph_arangodb_qa",id:"use_cases/more/graph/graph_arangodb_qa",title:"ArangoDB QA chain",description:"Open In Collab",source:"@site/docs/use_cases/more/graph/graph_arangodb_qa.md",sourceDirName:"use_cases/more/graph",slug:"/use_cases/more/graph/graph_arangodb_qa",permalink:"/langchain/docs/use_cases/more/graph/graph_arangodb_qa",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Diffbot Graph Transformer",permalink:"/langchain/docs/use_cases/more/graph/diffbot_graphtransformer"},next:{title:"Neo4j DB QA chain",permalink:"/langchain/docs/use_cases/more/graph/graph_cypher_qa"}},s={},c=[{value:"Populating the Database",id:"populating-the-database",level:2},{value:"Getting &amp; Setting the ArangoDB Schema",id:"getting--setting-the-arangodb-schema",level:2},{value:"Querying the ArangoDB Database",id:"querying-the-arangodb-database",level:2},{value:"Chain Modifiers",id:"chain-modifiers",level:2}],p=(h="CodeOutputBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.kt)("div",e)});var h;const d={toc:c},u="wrapper";function m(e){let{components:n,...a}=e;return(0,t.kt)(u,(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"arangodb-qa-chain"},"ArangoDB QA chain"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/arangodb/interactive_tutorials/blob/master/notebooks/Langchain.ipynb"},(0,t.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Collab"}))),(0,t.kt)("p",null,"This notebook shows how to use LLMs to provide a natural language interface to an ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/arangodb/arangodb#readme"},"ArangoDB")," database."),(0,t.kt)("p",null,"You can get a local ArangoDB instance running via the ",(0,t.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/arangodb"},"ArangoDB Docker image"),":  "),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"docker run -p 8529:8529 -e ARANGO_ROOT_PASSWORD= arangodb/arangodb\n")),(0,t.kt)("p",null,"An alternative is to use the ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/arangodb/adb-cloud-connector#readme"},"ArangoDB Cloud Connector package")," to get a temporary cloud instance running:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"pip install python-arango # The ArangoDB Python Driver\npip install adb-cloud-connector # The ArangoDB Cloud Instance provisioner\npip install openai\npip install langchain\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Instantiate ArangoDB Database\nimport json\nfrom arango import ArangoClient\nfrom adb_cloud_connector import get_temp_credentials\n\ncon = get_temp_credentials()\n\ndb = ArangoClient(hosts=con["url"]).db(\n    con["dbName"], con["username"], con["password"], verify=True\n)\n\nprint(json.dumps(con, indent=2))\n')),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'    Log: requesting new credentials...\n    Succcess: new credentials acquired\n    {\n      "dbName": "TUT3sp29s3pjf1io0h4cfdsq",\n      "username": "TUTo6nkwgzkizej3kysgdyeo8",\n      "password": "TUT9vx0qjqt42i9bq8uik4v9",\n      "hostname": "tutorials.arangodb.cloud",\n      "port": 8529,\n      "url": "https://tutorials.arangodb.cloud:8529"\n    }\n'))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"# Instantiate the ArangoDB-LangChain Graph\nfrom langchain.graphs import ArangoGraph\n\ngraph = ArangoGraph(db)\n")),(0,t.kt)("h2",{id:"populating-the-database"},"Populating the Database"),(0,t.kt)("p",null,"We will rely on the Python Driver to import our ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/arangodb/example-datasets/tree/master/GameOfThrones"},"GameOfThrones")," data into our database."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'if db.has_graph("GameOfThrones"):\n    db.delete_graph("GameOfThrones", drop_collections=True)\n\ndb.create_graph(\n    "GameOfThrones",\n    edge_definitions=[\n        {\n            "edge_collection": "ChildOf",\n            "from_vertex_collections": ["Characters"],\n            "to_vertex_collections": ["Characters"],\n        },\n    ],\n)\n\ndocuments = [\n    {\n        "_key": "NedStark",\n        "name": "Ned",\n        "surname": "Stark",\n        "alive": True,\n        "age": 41,\n        "gender": "male",\n    },\n    {\n        "_key": "CatelynStark",\n        "name": "Catelyn",\n        "surname": "Stark",\n        "alive": False,\n        "age": 40,\n        "gender": "female",\n    },\n    {\n        "_key": "AryaStark",\n        "name": "Arya",\n        "surname": "Stark",\n        "alive": True,\n        "age": 11,\n        "gender": "female",\n    },\n    {\n        "_key": "BranStark",\n        "name": "Bran",\n        "surname": "Stark",\n        "alive": True,\n        "age": 10,\n        "gender": "male",\n    },\n]\n\nedges = [\n    {"_to": "Characters/NedStark", "_from": "Characters/AryaStark"},\n    {"_to": "Characters/NedStark", "_from": "Characters/BranStark"},\n    {"_to": "Characters/CatelynStark", "_from": "Characters/AryaStark"},\n    {"_to": "Characters/CatelynStark", "_from": "Characters/BranStark"},\n]\n\ndb.collection("Characters").import_bulk(documents)\ndb.collection("ChildOf").import_bulk(edges)\n')),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    {'error': False,\n     'created': 4,\n     'errors': 0,\n     'empty': 0,\n     'updated': 0,\n     'ignored': 0,\n     'details': []}\n"))),(0,t.kt)("h2",{id:"getting--setting-the-arangodb-schema"},"Getting & Setting the ArangoDB Schema"),(0,t.kt)("p",null,"An initial ArangoDB Schema is generated upon instantiating the ",(0,t.kt)("inlineCode",{parentName:"p"},"ArangoDBGraph")," object. Below are the schema's getter & setter methods should you be interested in viewing or modifying the schema:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"# The schema should be empty here,\n# since `graph` was initialized prior to ArangoDB Data ingestion (see above).\n\nimport json\n\nprint(json.dumps(graph.schema, indent=4))\n")),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'    {\n        "Graph Schema": [],\n        "Collection Schema": []\n    }\n'))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"graph.set_schema()\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"# We can now view the generated schema\n\nimport json\n\nprint(json.dumps(graph.schema, indent=4))\n")),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'    {\n        "Graph Schema": [\n            {\n                "graph_name": "GameOfThrones",\n                "edge_definitions": [\n                    {\n                        "edge_collection": "ChildOf",\n                        "from_vertex_collections": [\n                            "Characters"\n                        ],\n                        "to_vertex_collections": [\n                            "Characters"\n                        ]\n                    }\n                ]\n            }\n        ],\n        "Collection Schema": [\n            {\n                "collection_name": "ChildOf",\n                "collection_type": "edge",\n                "edge_properties": [\n                    {\n                        "name": "_key",\n                        "type": "str"\n                    },\n                    {\n                        "name": "_id",\n                        "type": "str"\n                    },\n                    {\n                        "name": "_from",\n                        "type": "str"\n                    },\n                    {\n                        "name": "_to",\n                        "type": "str"\n                    },\n                    {\n                        "name": "_rev",\n                        "type": "str"\n                    }\n                ],\n                "example_edge": {\n                    "_key": "266218884025",\n                    "_id": "ChildOf/266218884025",\n                    "_from": "Characters/AryaStark",\n                    "_to": "Characters/NedStark",\n                    "_rev": "_gVPKGSq---"\n                }\n            },\n            {\n                "collection_name": "Characters",\n                "collection_type": "document",\n                "document_properties": [\n                    {\n                        "name": "_key",\n                        "type": "str"\n                    },\n                    {\n                        "name": "_id",\n                        "type": "str"\n                    },\n                    {\n                        "name": "_rev",\n                        "type": "str"\n                    },\n                    {\n                        "name": "name",\n                        "type": "str"\n                    },\n                    {\n                        "name": "surname",\n                        "type": "str"\n                    },\n                    {\n                        "name": "alive",\n                        "type": "bool"\n                    },\n                    {\n                        "name": "age",\n                        "type": "int"\n                    },\n                    {\n                        "name": "gender",\n                        "type": "str"\n                    }\n                ],\n                "example_document": {\n                    "_key": "NedStark",\n                    "_id": "Characters/NedStark",\n                    "_rev": "_gVPKGPi---",\n                    "name": "Ned",\n                    "surname": "Stark",\n                    "alive": true,\n                    "age": 41,\n                    "gender": "male"\n                }\n            }\n        ]\n    }\n'))),(0,t.kt)("h2",{id:"querying-the-arangodb-database"},"Querying the ArangoDB Database"),(0,t.kt)("p",null,"We can now use the ArangoDB Graph QA Chain to inquire about our data"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nos.environ["OPENAI_API_KEY"] = "your-key-here"\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chat_models import ChatOpenAI\nfrom langchain.chains import ArangoGraphQAChain\n\nchain = ArangoGraphQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True\n)\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Is Ned Stark alive?")\n')),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    WITH Characters\n    FOR character IN Characters\n    FILTER character.name == "Ned" AND character.surname == "Stark"\n    RETURN character.alive\n    \n    AQL Result:\n    [True]\n    \n    > Finished chain.\n\n\n\n\n\n    \'Yes, Ned Stark is alive.\'\n'))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("How old is Arya Stark?")\n')),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    WITH Characters\n    FOR character IN Characters\n    FILTER character.name == "Arya" && character.surname == "Stark"\n    RETURN character.age\n    \n    AQL Result:\n    [11]\n    \n    > Finished chain.\n\n\n\n\n\n    \'Arya Stark is 11 years old.\'\n'))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Are Arya Stark and Ned Stark related?")\n')),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    WITH Characters, ChildOf\n    FOR v, e, p IN 1..1 OUTBOUND 'Characters/AryaStark' ChildOf\n        FILTER p.vertices[-1]._key == 'NedStark'\n        RETURN p\n    \n    AQL Result:\n    [{'vertices': [{'_key': 'AryaStark', '_id': 'Characters/AryaStark', '_rev': '_gVPKGPi--B', 'name': 'Arya', 'surname': 'Stark', 'alive': True, 'age': 11, 'gender': 'female'}, {'_key': 'NedStark', '_id': 'Characters/NedStark', '_rev': '_gVPKGPi---', 'name': 'Ned', 'surname': 'Stark', 'alive': True, 'age': 41, 'gender': 'male'}], 'edges': [{'_key': '266218884025', '_id': 'ChildOf/266218884025', '_from': 'Characters/AryaStark', '_to': 'Characters/NedStark', '_rev': '_gVPKGSq---'}], 'weights': [0, 1]}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, Arya Stark and Ned Stark are related. According to the information retrieved from the database, there is a relationship between them. Arya Stark is the child of Ned Stark.'\n"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Does Arya Stark have a dead parent?")\n')),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    WITH Characters, ChildOf\n    FOR v, e IN 1..1 OUTBOUND 'Characters/AryaStark' ChildOf\n    FILTER v.alive == false\n    RETURN e\n    \n    AQL Result:\n    [{'_key': '266218884027', '_id': 'ChildOf/266218884027', '_from': 'Characters/AryaStark', '_to': 'Characters/CatelynStark', '_rev': '_gVPKGSu---'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, Arya Stark has a dead parent. The parent is Catelyn Stark.'\n"))),(0,t.kt)("h2",{id:"chain-modifiers"},"Chain Modifiers"),(0,t.kt)("p",null,"You can alter the values of the following ",(0,t.kt)("inlineCode",{parentName:"p"},"ArangoDBGraphQAChain")," class variables to modify the behaviour of your chain results"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Specify the maximum number of AQL Query Results to return\nchain.top_k = 10\n\n# Specify whether or not to return the AQL Query in the output dictionary\nchain.return_aql_query = True\n\n# Specify whether or not to return the AQL JSON Result in the output dictionary\nchain.return_aql_result = True\n\n# Specify the maximum amount of AQL Generation attempts that should be made\nchain.max_aql_generation_attempts = 5\n\n# Specify a set of AQL Query Examples, which are passed to\n# the AQL Generation Prompt Template to promote few-shot-learning.\n# Defaults to an empty string.\nchain.aql_examples = """\n# Is Ned Stark alive?\nRETURN DOCUMENT(\'Characters/NedStark\').alive\n\n# Is Arya Stark the child of Ned Stark?\nFOR e IN ChildOf\n    FILTER e._from == "Characters/AryaStark" AND e._to == "Characters/NedStark"\n    RETURN e\n"""\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Is Ned Stark alive?")\n\n# chain("Is Ned Stark alive?") # Returns a dictionary with the AQL Query & AQL Result\n')),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    RETURN DOCUMENT('Characters/NedStark').alive\n    \n    AQL Result:\n    [True]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, according to the information in the database, Ned Stark is alive.'\n"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("Is Bran Stark the child of Ned Stark?")\n')),(0,t.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    FOR e IN ChildOf\n        FILTER e._from == \"Characters/BranStark\" AND e._to == \"Characters/NedStark\"\n        RETURN e\n    \n    AQL Result:\n    [{'_key': '266218884026', '_id': 'ChildOf/266218884026', '_from': 'Characters/BranStark', '_to': 'Characters/NedStark', '_rev': '_gVPKGSq--_'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, according to the information in the ArangoDB database, Bran Stark is indeed the child of Ned Stark.'\n"))))}m.isMDXComponent=!0}}]);