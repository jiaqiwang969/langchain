"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9185],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>h});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function c(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),l=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=l(e.components);return t.createElement(i.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),u=r,h=p["".concat(i,".").concat(u)]||p[u]||m[u]||o;return n?t.createElement(h,s(s({ref:a},d),{},{components:n})):t.createElement(h,s({ref:a},d))}));function h(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var c={};for(var i in a)hasOwnProperty.call(a,i)&&(c[i]=a[i]);c.originalType=e,c[p]="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},13797:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=n(87462),r=(n(67294),n(3905));const o={},s="Cassandra",c={unversionedId:"integrations/vectorstores/cassandra",id:"integrations/vectorstores/cassandra",title:"Cassandra",description:"Apache Cassandra\xae is a NoSQL, row-oriented, highly scalable and highly available database.",source:"@site/docs/integrations/vectorstores/cassandra.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/cassandra",permalink:"/langchain/docs/integrations/vectorstores/cassandra",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"BagelDB",permalink:"/langchain/docs/integrations/vectorstores/bageldb"},next:{title:"Chroma",permalink:"/langchain/docs/integrations/vectorstores/chroma"}},i={},l=[{value:"Please provide database connection parameters and secrets:",id:"please-provide-database-connection-parameters-and-secrets",level:3},{value:"depending on whether local or cloud-based Astra DB, create the corresponding database connection &quot;Session&quot; object",id:"depending-on-whether-local-or-cloud-based-astra-db-create-the-corresponding-database-connection-session-object",level:4},{value:"Please provide OpenAI access key",id:"please-provide-openai-access-key",level:3},{value:"Creation and usage of the Vector Store",id:"creation-and-usage-of-the-vector-store",level:3},{value:"Maximal Marginal Relevance Searches",id:"maximal-marginal-relevance-searches",level:3}],d={toc:l},p="wrapper";function m(e){let{components:a,...n}=e;return(0,r.kt)(p,(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cassandra"},"Cassandra"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://cassandra.apache.org"},"Apache Cassandra\xae")," is a NoSQL, row-oriented, highly scalable and highly available database.")),(0,r.kt)("p",null,"Newest Cassandra releases natively ",(0,r.kt)("a",{parentName:"p",href:"https://cwiki.apache.org/confluence/display/CASSANDRA/CEP-30%3A+Approximate+Nearest+Neighbor(ANN)+Vector+Search+via+Storage-Attached+Indexes"},"support")," Vector Similarity Search."),(0,r.kt)("p",null,"To run this notebook you need either a running Cassandra cluster equipped with Vector Search capabilities (in pre-release at the time of writing) or a DataStax Astra DB instance running in the cloud (you can get one for free at ",(0,r.kt)("a",{parentName:"p",href:"https://astra.datastax.com"},"datastax.com"),"). Check ",(0,r.kt)("a",{parentName:"p",href:"https://cassio.org/start_here/"},"cassio.org")," for more information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pip install "cassio>=0.0.7"\n')),(0,r.kt)("h3",{id:"please-provide-database-connection-parameters-and-secrets"},"Please provide database connection parameters and secrets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\ndatabase_mode = (input("\\n(C)assandra or (A)stra DB? ")).upper()\n\nkeyspace_name = input("\\nKeyspace name? ")\n\nif database_mode == "A":\n    ASTRA_DB_APPLICATION_TOKEN = getpass.getpass(\'\\nAstra DB Token ("AstraCS:...") \')\n    #\n    ASTRA_DB_SECURE_BUNDLE_PATH = input("Full path to your Secure Connect Bundle? ")\nelif database_mode == "C":\n    CASSANDRA_CONTACT_POINTS = input(\n        "Contact points? (comma-separated, empty for localhost) "\n    ).strip()\n')),(0,r.kt)("h4",{id:"depending-on-whether-local-or-cloud-based-astra-db-create-the-corresponding-database-connection-session-object"},'depending on whether local or cloud-based Astra DB, create the corresponding database connection "Session" object'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cassandra.cluster import Cluster\nfrom cassandra.auth import PlainTextAuthProvider\n\nif database_mode == "C":\n    if CASSANDRA_CONTACT_POINTS:\n        cluster = Cluster(\n            [cp.strip() for cp in CASSANDRA_CONTACT_POINTS.split(",") if cp.strip()]\n        )\n    else:\n        cluster = Cluster()\n    session = cluster.connect()\nelif database_mode == "A":\n    ASTRA_DB_CLIENT_ID = "token"\n    cluster = Cluster(\n        cloud={\n            "secure_connect_bundle": ASTRA_DB_SECURE_BUNDLE_PATH,\n        },\n        auth_provider=PlainTextAuthProvider(\n            ASTRA_DB_CLIENT_ID,\n            ASTRA_DB_APPLICATION_TOKEN,\n        ),\n    )\n    session = cluster.connect()\nelse:\n    raise NotImplementedError\n')),(0,r.kt)("h3",{id:"please-provide-openai-access-key"},"Please provide OpenAI access key"),(0,r.kt)("p",null,"We want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAIEmbeddings")," so we have to get the OpenAI API Key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,r.kt)("h3",{id:"creation-and-usage-of-the-vector-store"},"Creation and usage of the Vector Store"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Cassandra"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Cassandra"}, {"imported": "Cassandra", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.cassandra.Cassandra.html", "title": "Cassandra"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Cassandra"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Cassandra\nfrom langchain.document_loaders import TextLoader\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Cassandra"}]--\x3e\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembedding_function = OpenAIEmbeddings()\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'table_name = "my_vector_db_table"\n\ndocsearch = Cassandra.from_documents(\n    documents=docs,\n    embedding=embedding_function,\n    session=session,\n    keyspace=keyspace_name,\n    table_name=table_name,\n)\n\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(query)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"## if you already have an index, you can load it and use it like this:\n\n# docsearch_preexisting = Cassandra(\n#     embedding=embedding_function,\n#     session=session,\n#     keyspace=keyspace_name,\n#     table_name=table_name,\n# )\n\n# docsearch_preexisting.similarity_search(query, k=2)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(docs[0].page_content)\n")),(0,r.kt)("h3",{id:"maximal-marginal-relevance-searches"},"Maximal Marginal Relevance Searches"),(0,r.kt)("p",null,"In addition to using similarity search in the retriever object, you can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"mmr")," as retriever."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'retriever = docsearch.as_retriever(search_type="mmr")\nmatched_docs = retriever.get_relevant_documents(query)\nfor i, d in enumerate(matched_docs):\n    print(f"\\n## Document {i}\\n")\n    print(d.page_content)\n')),(0,r.kt)("p",null,"Or use ",(0,r.kt)("inlineCode",{parentName:"p"},"max_marginal_relevance_search")," directly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'found_docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10)\nfor i, doc in enumerate(found_docs):\n    print(f"{i + 1}.", doc.page_content, "\\n")\n')))}m.isMDXComponent=!0}}]);