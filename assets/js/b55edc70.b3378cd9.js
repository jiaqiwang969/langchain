"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[91078],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),g=r,m=u["".concat(s,".").concat(g)]||u[g]||h[g]||i;return t?a.createElement(m,o(o({ref:n},p),{},{components:t})):a.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},59983:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const i={},o="Anthropic Functions",c={unversionedId:"integrations/chat/anthropic_functions",id:"integrations/chat/anthropic_functions",title:"Anthropic Functions",description:"This notebook shows how to use an experimental wrapper around Anthropic that gives it the same API as OpenAI Functions.",source:"@site/docs/integrations/chat/anthropic_functions.md",sourceDirName:"integrations/chat",slug:"/integrations/chat/anthropic_functions",permalink:"/langchain/docs/integrations/chat/anthropic_functions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Anthropic",permalink:"/langchain/docs/integrations/chat/anthropic"},next:{title:"Anyscale",permalink:"/langchain/docs/integrations/chat/anyscale"}},s={},l=[{value:"Initialize Model",id:"initialize-model",level:2},{value:"Passing in functions",id:"passing-in-functions",level:2},{value:"Using for extraction",id:"using-for-extraction",level:2},{value:"Using for tagging",id:"using-for-tagging",level:2}],p=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const h={toc:l},g="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(g,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"anthropic-functions"},"Anthropic Functions"),(0,r.kt)("p",null,"This notebook shows how to use an experimental wrapper around Anthropic that gives it the same API as OpenAI Functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain_experimental.llms.anthropic_functions import AnthropicFunctions\n")),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    /Users/harrisonchase/.pyenv/versions/3.9.1/envs/langchain/lib/python3.9/site-packages/deeplake/util/check_latest_version.py:32: UserWarning: A newer version of deeplake (3.6.14) is available. It's recommended that you update to the latest version using `pip install -U deeplake`.\n      warnings.warn(\n"))),(0,r.kt)("h2",{id:"initialize-model"},"Initialize Model"),(0,r.kt)("p",null,"You can initialize this wrapper the same way you'd initialize ChatAnthropic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"model = AnthropicFunctions(model='claude-2')\n")),(0,r.kt)("h2",{id:"passing-in-functions"},"Passing in functions"),(0,r.kt)("p",null,"You can now pass in functions in a similar way"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'functions=[\n    {\n      "name": "get_current_weather",\n      "description": "Get the current weather in a given location",\n      "parameters": {\n        "type": "object",\n        "properties": {\n          "location": {\n            "type": "string",\n            "description": "The city and state, e.g. San Francisco, CA"\n          },\n          "unit": {\n            "type": "string",\n            "enum": ["celsius", "fahrenheit"]\n          }\n        },\n        "required": ["location"]\n      }\n    }\n  ]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "Anthropic Functions"}]--\x3e\nfrom langchain.schema import HumanMessage\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'response = model.predict_messages(\n    [HumanMessage(content="whats the weater in boston?")], \n    functions=functions\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"response\n")),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    AIMessage(content=' ', additional_kwargs={'function_call': {'name': 'get_current_weather', 'arguments': '{\"location\": \"Boston, MA\", \"unit\": \"fahrenheit\"}'}}, example=False)\n"))),(0,r.kt)("h2",{id:"using-for-extraction"},"Using for extraction"),(0,r.kt)("p",null,"You can now use this for extraction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_extraction_chain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.openai_functions.extraction.create_extraction_chain.html", "title": "Anthropic Functions"}]--\x3e\nfrom langchain.chains import create_extraction_chain\nschema = {\n    "properties": {\n        "name": {"type": "string"},\n        "height": {"type": "integer"},\n        "hair_color": {"type": "string"},\n    },\n    "required": ["name", "height"],\n}\ninp = """\nAlex is 5 feet tall. Claudia is 1 feet taller Alex and jumps higher than him. Claudia is a brunette and Alex is blonde.\n        """\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = create_extraction_chain(schema, model)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain.run(inp)\n")),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [{'name': 'Alex', 'height': '5', 'hair_color': 'blonde'},\n     {'name': 'Claudia', 'height': '6', 'hair_color': 'brunette'}]\n"))),(0,r.kt)("h2",{id:"using-for-tagging"},"Using for tagging"),(0,r.kt)("p",null,"You can now use this for tagging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_tagging_chain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.openai_functions.tagging.create_tagging_chain.html", "title": "Anthropic Functions"}]--\x3e\nfrom langchain.chains import create_tagging_chain\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'schema = {\n    "properties": {\n        "sentiment": {"type": "string"},\n        "aggressiveness": {"type": "integer"},\n        "language": {"type": "string"},\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = create_tagging_chain(schema, model)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("this is really cool")\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'sentiment': 'positive', 'aggressiveness': '0', 'language': 'english'}\n"))))}m.isMDXComponent=!0}}]);