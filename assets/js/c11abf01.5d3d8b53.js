"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[11772],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function g(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):g(g({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=l(t),u=a,m=d["".concat(c,".").concat(u)]||d[u]||p[u]||i;return t?r.createElement(m,g(g({ref:n},s),{},{components:t})):r.createElement(m,g({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,g=new Array(i);g[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[d]="string"==typeof e?e:a,g[1]=o;for(var l=2;l<i;l++)g[l]=t[l];return r.createElement.apply(null,g)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},14464:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>g,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const i={},g="Hugging Face",o={unversionedId:"integrations/text_embedding/huggingfacehub",id:"integrations/text_embedding/huggingfacehub",title:"Hugging Face",description:"Let's load the Hugging Face Embedding class.",source:"@site/docs/integrations/text_embedding/huggingfacehub.md",sourceDirName:"integrations/text_embedding",slug:"/integrations/text_embedding/huggingfacehub",permalink:"/langchain/docs/integrations/text_embedding/huggingfacehub",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"GPT4All",permalink:"/langchain/docs/integrations/text_embedding/gpt4all"},next:{title:"InstructEmbeddings",permalink:"/langchain/docs/integrations/text_embedding/instruct_embeddings"}},c={},l=[{value:"Hugging Face Inference API",id:"hugging-face-inference-api",level:2}],s=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const p={toc:l},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hugging-face"},"Hugging Face"),(0,a.kt)("p",null,"Let's load the Hugging Face Embedding class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install langchain sentence_transformers\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HuggingFaceEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.HuggingFaceEmbeddings.html", "title": "Hugging Face"}]--\x3e\nfrom langchain.embeddings import HuggingFaceEmbeddings\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"embeddings = HuggingFaceEmbeddings()\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'text = "This is a test document."\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"query_result = embeddings.embed_query(text)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"query_result[:3]\n")),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    [-0.04895168915390968, -0.03986193612217903, -0.021562768146395683]\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"doc_result = embeddings.embed_documents([text])\n")),(0,a.kt)("h2",{id:"hugging-face-inference-api"},"Hugging Face Inference API"),(0,a.kt)("p",null,"We can also access embedding models via the Hugging Face Inference API, which does not require us to install ",(0,a.kt)("inlineCode",{parentName:"p"},"sentence_transformers")," and download models locally."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import getpass\n\ninference_api_key = getpass.getpass("Enter your HF Inference API Key:\\n\\n")\n')),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    Enter your HF Inference API Key:\n    \n     \xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HuggingFaceInferenceAPIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.HuggingFaceInferenceAPIEmbeddings.html", "title": "Hugging Face"}]--\x3e\nfrom langchain.embeddings import HuggingFaceInferenceAPIEmbeddings\n\nembeddings = HuggingFaceInferenceAPIEmbeddings(\n    api_key=inference_api_key,\n    model_name="sentence-transformers/all-MiniLM-l6-v2"\n)\n\nquery_result = embeddings.embed_query(text)\nquery_result[:3]\n')),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    [-0.038338541984558105, 0.1234646737575531, -0.028642963618040085]\n"))))}m.isMDXComponent=!0}}]);