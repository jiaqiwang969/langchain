"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[36179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,d=u["".concat(l,".").concat(m)]||u[m]||h[m]||s;return n?o.createElement(d,i(i({ref:t},c),{},{components:n})):o.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[u]="string"==typeof e?e:a,i[1]=r;for(var p=2;p<s;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},26999:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const s={},i="JSON",r={unversionedId:"integrations/toolkits/json",id:"integrations/toolkits/json",title:"JSON",description:"This notebook showcases an agent interacting with large JSON/dict objects.",source:"@site/docs/integrations/toolkits/json.md",sourceDirName:"integrations/toolkits",slug:"/integrations/toolkits/json",permalink:"/langchain/docs/integrations/toolkits/json",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Jira",permalink:"/langchain/docs/integrations/toolkits/jira"},next:{title:"MultiOn",permalink:"/langchain/docs/integrations/toolkits/multion"}},l={},p=[{value:"Initialization",id:"initialization",level:2},{value:"Example: getting the required POST parameters for a request",id:"example-getting-the-required-post-parameters-for-a-request",level:2}],c=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const h={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"json"},"JSON"),(0,a.kt)("p",null,"This notebook showcases an agent interacting with large ",(0,a.kt)("inlineCode",{parentName:"p"},"JSON/dict")," objects.\nThis is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question."),(0,a.kt)("p",null,"In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/openai/openai-openapi/blob/master/openapi.yaml"},"here"),"."),(0,a.kt)("p",null,"We will use the JSON agent to answer some questions about the API spec."),(0,a.kt)("h2",{id:"initialization"},"Initialization"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "create_json_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.json.base.create_json_agent.html", "title": "JSON"}, {"imported": "AgentExecutor", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.AgentExecutor.html", "title": "JSON"}, {"imported": "JsonToolkit", "source": "langchain.agents.agent_toolkits", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.json.toolkit.JsonToolkit.html", "title": "JSON"}, {"imported": "LLMChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "JSON"}, {"imported": "OpenAI", "source": "langchain.llms.openai", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "JSON"}, {"imported": "TextRequestsWrapper", "source": "langchain.requests", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.requests.TextRequestsWrapper.html", "title": "JSON"}, {"imported": "JsonSpec", "source": "langchain.tools.json.tool", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.json.tool.JsonSpec.html", "title": "JSON"}]--\x3e\nimport os\nimport yaml\n\nfrom langchain.agents import create_json_agent, AgentExecutor\nfrom langchain.agents.agent_toolkits import JsonToolkit\nfrom langchain.chains import LLMChain\nfrom langchain.llms.openai import OpenAI\nfrom langchain.requests import TextRequestsWrapper\nfrom langchain.tools.json.tool import JsonSpec\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'with open("openai_openapi.yml") as f:\n    data = yaml.load(f, Loader=yaml.FullLoader)\njson_spec = JsonSpec(dict_=data, max_value_length=4000)\njson_toolkit = JsonToolkit(spec=json_spec)\n\njson_agent_executor = create_json_agent(\n    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True\n)\n')),(0,a.kt)("h2",{id:"example-getting-the-required-post-parameters-for-a-request"},"Example: getting the required POST parameters for a request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'json_agent_executor.run(\n    "What are the required parameters in the request body to the /completions endpoint?"\n)\n')),(0,a.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new AgentExecutor chain...\n    Action: json_spec_list_keys\n    Action Input: data\n    Observation: [\'openapi\', \'info\', \'servers\', \'tags\', \'paths\', \'components\', \'x-oaiMeta\']\n    Thought: I should look at the paths key to see what endpoints exist\n    Action: json_spec_list_keys\n    Action Input: data["paths"]\n    Observation: [\'/engines\', \'/engines/{engine_id}\', \'/completions\', \'/edits\', \'/images/generations\', \'/images/edits\', \'/images/variations\', \'/embeddings\', \'/engines/{engine_id}/search\', \'/files\', \'/files/{file_id}\', \'/files/{file_id}/content\', \'/answers\', \'/classifications\', \'/fine-tunes\', \'/fine-tunes/{fine_tune_id}\', \'/fine-tunes/{fine_tune_id}/cancel\', \'/fine-tunes/{fine_tune_id}/events\', \'/models\', \'/models/{model}\', \'/moderations\']\n    Thought: I should look at the /completions endpoint to see what parameters are required\n    Action: json_spec_list_keys\n    Action Input: data["paths"]["/completions"]\n    Observation: [\'post\']\n    Thought: I should look at the post key to see what parameters are required\n    Action: json_spec_list_keys\n    Action Input: data["paths"]["/completions"]["post"]\n    Observation: [\'operationId\', \'tags\', \'summary\', \'requestBody\', \'responses\', \'x-oaiMeta\']\n    Thought: I should look at the requestBody key to see what parameters are required\n    Action: json_spec_list_keys\n    Action Input: data["paths"]["/completions"]["post"]["requestBody"]\n    Observation: [\'required\', \'content\']\n    Thought: I should look at the required key to see what parameters are required\n    Action: json_spec_get_value\n    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]\n    Observation: True\n    Thought: I should look at the content key to see what parameters are required\n    Action: json_spec_list_keys\n    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]\n    Observation: [\'application/json\']\n    Thought: I should look at the application/json key to see what parameters are required\n    Action: json_spec_list_keys\n    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]\n    Observation: [\'schema\']\n    Thought: I should look at the schema key to see what parameters are required\n    Action: json_spec_list_keys\n    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]\n    Observation: [\'$ref\']\n    Thought: I should look at the $ref key to see what parameters are required\n    Action: json_spec_get_value\n    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]\n    Observation: #/components/schemas/CreateCompletionRequest\n    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required\n    Action: json_spec_list_keys\n    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]\n    Observation: [\'type\', \'properties\', \'required\']\n    Thought: I should look at the required key to see what parameters are required\n    Action: json_spec_get_value\n    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]\n    Observation: [\'model\']\n    Thought: I now know the final answer\n    Final Answer: The required parameters in the request body to the /completions endpoint are \'model\'.\n    \n    > Finished chain.\n\n\n\n\n\n    "The required parameters in the request body to the /completions endpoint are \'model\'."\n'))))}d.isMDXComponent=!0}}]);