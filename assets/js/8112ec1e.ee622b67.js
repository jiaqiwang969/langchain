"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[83095],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),g=o,m=c["".concat(s,".").concat(g)]||c[g]||d[g]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},44290:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},i="Golden",l={unversionedId:"integrations/providers/golden",id:"integrations/providers/golden",title:"Golden",description:"Golden provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: Products from OpenAI, Generative ai companies with series a funding, and rappers who invest can be used to retrieve structured data about relevant entities.",source:"@site/docs/integrations/providers/golden.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/golden",permalink:"/langchain/docs/integrations/providers/golden",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"GitBook",permalink:"/langchain/docs/integrations/providers/gitbook"},next:{title:"Google BigQuery",permalink:"/langchain/docs/integrations/providers/google_bigquery"}},s={},p=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Wrappers",id:"wrappers",level:2},{value:"Utility",id:"utility",level:3},{value:"Tool",id:"tool",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"golden"},"Golden"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://golden.com"},"Golden")," provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: ",(0,o.kt)("inlineCode",{parentName:"p"},"Products from OpenAI"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Generative ai companies with series a funding"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"rappers who invest")," can be used to retrieve structured data about relevant entities."),(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"golden-query")," langchain tool is a wrapper on top of the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.golden.com/reference/query-api"},"Golden Query API")," which enables programmatic access to these results.\nSee the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.golden.com/reference/query-api"},"Golden Query API docs")," for more information.")),(0,o.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Go to the ",(0,o.kt)("a",{parentName:"li",href:"https://docs.golden.com/"},"Golden API docs")," to get an overview about the Golden API."),(0,o.kt)("li",{parentName:"ul"},"Get your API key from the ",(0,o.kt)("a",{parentName:"li",href:"https://golden.com/settings/api"},"Golden API Settings")," page."),(0,o.kt)("li",{parentName:"ul"},"Save your API key into GOLDEN_API_KEY env variable")),(0,o.kt)("h2",{id:"wrappers"},"Wrappers"),(0,o.kt)("h3",{id:"utility"},"Utility"),(0,o.kt)("p",null,"There exists a GoldenQueryAPIWrapper utility which wraps this API. To import this utility:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GoldenQueryAPIWrapper", "source": "langchain.utilities.golden_query", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.golden_query.GoldenQueryAPIWrapper.html", "title": "Golden"}]--\x3e\nfrom langchain.utilities.golden_query import GoldenQueryAPIWrapper\n')),(0,o.kt)("p",null,"For a more detailed walkthrough of this wrapper, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/integrations/tools/golden_query.html"},"this notebook"),"."),(0,o.kt)("h3",{id:"tool"},"Tool"),(0,o.kt)("p",null,"You can also easily load this wrapper as a Tool (to use with an Agent).\nYou can do this with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "load_tools", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.load_tools.load_tools.html", "title": "Golden"}]--\x3e\nfrom langchain.agents import load_tools\ntools = load_tools(["golden-query"])\n')),(0,o.kt)("p",null,"For more information on tools, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/modules/agents/tools/"},"this page"),"."))}d.isMDXComponent=!0}}]);