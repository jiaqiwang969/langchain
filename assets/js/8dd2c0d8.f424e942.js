"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[93733],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=s,g=p["".concat(l,".").concat(h)]||p[h]||m[h]||r;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},50639:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),s=(n(67294),n(3905));const r={},o="Discord",i={unversionedId:"integrations/chat_loaders/discord",id:"integrations/chat_loaders/discord",title:"Discord",description:"This notebook shows how to create your own chat loader that works on copy-pasted messages (from dms) to a list of LangChain messages.",source:"@site/docs/integrations/chat_loaders/discord.md",sourceDirName:"integrations/chat_loaders",slug:"/integrations/chat_loaders/discord",permalink:"/langchain/docs/integrations/chat_loaders/discord",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Chat loaders",permalink:"/langchain/docs/integrations/chat_loaders/"},next:{title:"Facebook Messenger",permalink:"/langchain/docs/integrations/chat_loaders/facebook"}},l={},c=[{value:"1. Creat message dump",id:"1-creat-message-dump",level:2},{value:"2. Define chat loader",id:"2-define-chat-loader",level:2},{value:"2. Create loader",id:"2-create-loader",level:2},{value:"3. Load Messages",id:"3-load-messages",level:2},{value:"Next Steps",id:"next-steps",level:3}],d=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)});var p;const m={toc:c},h="wrapper";function g(e){let{components:t,...n}=e;return(0,s.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"discord"},"Discord"),(0,s.kt)("p",null,"This notebook shows how to create your own chat loader that works on copy-pasted messages (from dms) to a list of LangChain messages."),(0,s.kt)("p",null,"The process has four steps:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create the chat .txt file by copying chats from the Discord app and pasting them in a file on your local computer"),(0,s.kt)("li",{parentName:"ol"},"Copy the chat loader definition from below to a local file."),(0,s.kt)("li",{parentName:"ol"},"Initialize the ",(0,s.kt)("inlineCode",{parentName:"li"},"DiscordChatLoader")," with the file path pointed to the text file."),(0,s.kt)("li",{parentName:"ol"},"Call ",(0,s.kt)("inlineCode",{parentName:"li"},"loader.load()")," (or ",(0,s.kt)("inlineCode",{parentName:"li"},"loader.lazy_load()"),") to perform the conversion.")),(0,s.kt)("h2",{id:"1-creat-message-dump"},"1. Creat message dump"),(0,s.kt)("p",null,"Currently (2023/08/23) this loader only supports .txt files in the format generated by copying messages in the app to your clipboard and pasting in a file. Below is an example."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-txt",metastring:'title="discord_chats.txt"',title:'"discord_chats.txt"'},"talkingtower \u2014 08/15/2023 11:10 AM\nLove music! Do you like jazz?\nreporterbob \u2014 08/15/2023 9:27 PM\nYes! Jazz is fantastic. Ever heard this one?\nWebsite\nListen to classic jazz track...\n\ntalkingtower \u2014 Yesterday at 5:03 AM\nIndeed! Great choice. \ud83c\udfb7\nreporterbob \u2014 Yesterday at 5:23 AM\nThanks! How about some virtual sightseeing?\nWebsite\nVirtual tour of famous landmarks...\n\ntalkingtower \u2014 Today at 2:38 PM\nSounds fun! Let's explore.\nreporterbob \u2014 Today at 2:56 PM\nEnjoy the tour! See you around.\ntalkingtower \u2014 Today at 3:00 PM\nThank you! Goodbye! \ud83d\udc4b\nreporterbob \u2014 Today at 3:02 PM\nFarewell! Happy exploring.\n")),(0,s.kt)("h2",{id:"2-define-chat-loader"},"2. Define chat loader"),(0,s.kt)("p",null,"LangChain currently does not support "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "base", "source": "langchain.chat_loaders", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.base.base.html", "title": "Discord"}]--\x3e\nimport logging\nimport re\nfrom typing import Iterator, List\n\nfrom langchain import schema\nfrom langchain.chat_loaders import base as chat_loaders\n\nlogger = logging.getLogger()\n\n\nclass DiscordChatLoader(chat_loaders.BaseChatLoader):\n    \n    def __init__(self, path: str):\n        """\n        Initialize the Discord chat loader.\n\n        Args:\n            path: Path to the exported Discord chat text file.\n        """\n        self.path = path\n        self._message_line_regex = re.compile(\n            r"(.+?) \u2014 (\\w{3,9} \\d{1,2}(?:st|nd|rd|th)?(?:, \\d{4})? \\d{1,2}:\\d{2} (?:AM|PM)|Today at \\d{1,2}:\\d{2} (?:AM|PM)|Yesterday at \\d{1,2}:\\d{2} (?:AM|PM))",  # noqa\n            flags=re.DOTALL,\n        )\n\n    def _load_single_chat_session_from_txt(\n        self, file_path: str\n    ) -> chat_loaders.ChatSession:\n        """\n        Load a single chat session from a text file.\n\n        Args:\n            file_path: Path to the text file containing the chat messages.\n\n        Returns:\n            A `ChatSession` object containing the loaded chat messages.\n        """\n        with open(file_path, "r", encoding="utf-8") as file:\n            lines = file.readlines()\n\n        results: List[schema.BaseMessage] = []\n        current_sender = None\n        current_timestamp = None\n        current_content = []\n        for line in lines:\n            if re.match(\n                r".+? \u2014 (\\d{2}/\\d{2}/\\d{4} \\d{1,2}:\\d{2} (?:AM|PM)|Today at \\d{1,2}:\\d{2} (?:AM|PM)|Yesterday at \\d{1,2}:\\d{2} (?:AM|PM))",  # noqa\n                line,\n            ):\n                if current_sender and current_content:\n                    results.append(\n                        schema.HumanMessage(\n                            content="".join(current_content).strip(),\n                            additional_kwargs={\n                                "sender": current_sender,\n                                "events": [{"message_time": current_timestamp}],\n                            },\n                        )\n                    )\n                current_sender, current_timestamp = line.split(" \u2014 ")[:2]\n                current_content = [\n                    line[len(current_sender) + len(current_timestamp) + 4 :].strip()\n                ]\n            elif re.match(r"\\[\\d{1,2}:\\d{2} (?:AM|PM)\\]", line.strip()):\n                results.append(\n                    schema.HumanMessage(\n                        content="".join(current_content).strip(),\n                        additional_kwargs={\n                            "sender": current_sender,\n                            "events": [{"message_time": current_timestamp}],\n                        },\n                    )\n                )\n                current_timestamp = line.strip()[1:-1]\n                current_content = []\n            else:\n                current_content.append("\\n" + line.strip())\n\n        if current_sender and current_content:\n            results.append(\n                schema.HumanMessage(\n                    content="".join(current_content).strip(),\n                    additional_kwargs={\n                        "sender": current_sender,\n                        "events": [{"message_time": current_timestamp}],\n                    },\n                )\n            )\n\n        return chat_loaders.ChatSession(messages=results)\n\n    def lazy_load(self) -> Iterator[chat_loaders.ChatSession]:\n        """\n        Lazy load the messages from the chat file and yield them in the required format.\n\n        Yields:\n            A `ChatSession` object containing the loaded chat messages.\n        """\n        yield self._load_single_chat_session_from_txt(self.path)\n')),(0,s.kt)("h2",{id:"2-create-loader"},"2. Create loader"),(0,s.kt)("p",null,"We will point to the file we just wrote to disk."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'loader = DiscordChatLoader(\n    path="./discord_chats.txt",\n)\n')),(0,s.kt)("h2",{id:"3-load-messages"},"3. Load Messages"),(0,s.kt)("p",null,"Assuming the format is correct, the loader will convert the chats to langchain messages."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatSession", "source": "langchain.chat_loaders.base", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.base.ChatSession.html", "title": "Discord"}, {"imported": "map_ai_messages", "source": "langchain.chat_loaders.utils", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.utils.map_ai_messages.html", "title": "Discord"}, {"imported": "merge_chat_runs", "source": "langchain.chat_loaders.utils", "docs": "https://api.python.langchain.com/en/latest/chat_loaders/langchain.chat_loaders.utils.merge_chat_runs.html", "title": "Discord"}]--\x3e\nfrom typing import List\nfrom langchain.chat_loaders.base import ChatSession\nfrom langchain.chat_loaders.utils import (\n    map_ai_messages,\n    merge_chat_runs,\n)\n\nraw_messages = loader.lazy_load()\n# Merge consecutive messages from the same sender into a single message\nmerged_messages = merge_chat_runs(raw_messages)\n# Convert messages from "talkingtower" to AI messages\nmessages: List[ChatSession] = list(map_ai_messages(merged_messages, sender="talkingtower"))\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"messages\n")),(0,s.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"    [{'messages': [AIMessage(content='Love music! Do you like jazz?', additional_kwargs={'sender': 'talkingtower', 'events': [{'message_time': '08/15/2023 11:10 AM\\n'}]}, example=False),\n       HumanMessage(content='Yes! Jazz is fantastic. Ever heard this one?\\nWebsite\\nListen to classic jazz track...', additional_kwargs={'sender': 'reporterbob', 'events': [{'message_time': '08/15/2023 9:27 PM\\n'}]}, example=False),\n       AIMessage(content='Indeed! Great choice. \ud83c\udfb7', additional_kwargs={'sender': 'talkingtower', 'events': [{'message_time': 'Yesterday at 5:03 AM\\n'}]}, example=False),\n       HumanMessage(content='Thanks! How about some virtual sightseeing?\\nWebsite\\nVirtual tour of famous landmarks...', additional_kwargs={'sender': 'reporterbob', 'events': [{'message_time': 'Yesterday at 5:23 AM\\n'}]}, example=False),\n       AIMessage(content=\"Sounds fun! Let's explore.\", additional_kwargs={'sender': 'talkingtower', 'events': [{'message_time': 'Today at 2:38 PM\\n'}]}, example=False),\n       HumanMessage(content='Enjoy the tour! See you around.', additional_kwargs={'sender': 'reporterbob', 'events': [{'message_time': 'Today at 2:56 PM\\n'}]}, example=False),\n       AIMessage(content='Thank you! Goodbye! \ud83d\udc4b', additional_kwargs={'sender': 'talkingtower', 'events': [{'message_time': 'Today at 3:00 PM\\n'}]}, example=False),\n       HumanMessage(content='Farewell! Happy exploring.', additional_kwargs={'sender': 'reporterbob', 'events': [{'message_time': 'Today at 3:02 PM\\n'}]}, example=False)]}]\n"))),(0,s.kt)("h3",{id:"next-steps"},"Next Steps"),(0,s.kt)("p",null,"You can then use these messages how you see fit, such as finetuning a model, few-shot example selection, or directly make predictions for the next message  "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Discord"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI()\n\nfor chunk in llm.stream(messages[0][\'messages\']):\n    print(chunk.content, end="", flush=True)\n')),(0,s.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"    Thank you! Have a wonderful day! \ud83c\udf1f\n"))))}g.isMDXComponent=!0}}]);