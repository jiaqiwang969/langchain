"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63342],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),g=o,d=m["".concat(s,".").concat(g)]||m[g]||c[g]||r;return n?a.createElement(d,l(l({ref:t},p),{},{components:n})):a.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},46414:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const r={},l="Multi-modal outputs: Image & Text",i={unversionedId:"use_cases/more/agents/multi_modal/multi_modal_output_agent",id:"use_cases/more/agents/multi_modal/multi_modal_output_agent",title:"Multi-modal outputs: Image & Text",description:"This notebook shows how non-text producing tools can be used to create multi-modal agents.",source:"@site/docs/use_cases/more/agents/multi_modal/multi_modal_output_agent.md",sourceDirName:"use_cases/more/agents/multi_modal",slug:"/use_cases/more/agents/multi_modal/multi_modal_output_agent",permalink:"/langchain/docs/use_cases/more/agents/multi_modal/multi_modal_output_agent",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Meta-Prompt",permalink:"/langchain/docs/use_cases/more/agents/autonomous_agents/meta_prompt"},next:{title:"Code writing",permalink:"/langchain/docs/use_cases/more/code_writing/"}},s={},u=[{value:"Dall-E",id:"dall-e",level:2},{value:"StableDiffusion",id:"stablediffusion",level:2}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"multi-modal-outputs-image--text"},"Multi-modal outputs: Image & Text"),(0,o.kt)("p",null,"This notebook shows how non-text producing tools can be used to create multi-modal agents."),(0,o.kt)("p",null,"This example is limited to text and image outputs and uses UUIDs to transfer content across tools and agents. "),(0,o.kt)("p",null,"This example uses Steamship to generate and store generated images. Generated are auth protected by default. "),(0,o.kt)("p",null,"You can get your Steamship api key here: ",(0,o.kt)("a",{parentName:"p",href:"https://steamship.com/account/api"},"https://steamship.com/account/api")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from steamship import Block, Steamship\nimport re\nfrom IPython.display import Image\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Multi-modal outputs: Image & Text"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Multi-modal outputs: Image & Text"}, {"imported": "SteamshipImageGenerationTool", "source": "langchain.tools", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.steamship_image_generation.tool.SteamshipImageGenerationTool.html", "title": "Multi-modal outputs: Image & Text"}]--\x3e\nfrom langchain import OpenAI\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\nfrom langchain.tools import SteamshipImageGenerationTool\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"llm = OpenAI(temperature=0)\n")),(0,o.kt)("h2",{id:"dall-e"},"Dall-E"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'tools = [SteamshipImageGenerationTool(model_name="dall-e")]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"mrkl = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'output = mrkl.run("How would you visualize a parot playing soccer?")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def show_output(output):\n    """Display the multi-modal output from the agent."""\n    UUID_PATTERN = re.compile(\n        r"([0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12})"\n    )\n\n    outputs = UUID_PATTERN.split(output)\n    outputs = [\n        re.sub(r"^\\W+", "", el) for el in outputs\n    ]  # Clean trailing and leading non-word characters\n\n    for output in outputs:\n        maybe_block_id = UUID_PATTERN.search(output)\n        if maybe_block_id:\n            display(Image(Block.get(Steamship(), _id=maybe_block_id.group()).raw()))\n        else:\n            print(output, end="\\n\\n")\n')),(0,o.kt)("h2",{id:"stablediffusion"},"StableDiffusion"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'tools = [SteamshipImageGenerationTool(model_name="stable-diffusion")]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"mrkl = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'output = mrkl.run("How would you visualize a parot playing soccer?")\n')))}c.isMDXComponent=!0}}]);