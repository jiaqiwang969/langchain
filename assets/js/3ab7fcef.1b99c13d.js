"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[37968],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},h=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,p=e.originalType,s=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),u=i(t),m=a,g=u["".concat(s,".").concat(m)]||u[m]||l[m]||p;return t?r.createElement(g,o(o({ref:n},h),{},{components:t})):r.createElement(g,o({ref:n},h))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var p=t.length,o=new Array(p);o[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var i=2;i<p;i++)o[i]=t[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},79346:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>p,metadata:()=>c,toc:()=>i});var r=t(87462),a=(t(67294),t(3905));const p={},o="Neptune Open Cypher QA Chain",c={unversionedId:"use_cases/more/graph/neptune_cypher_qa",id:"use_cases/more/graph/neptune_cypher_qa",title:"Neptune Open Cypher QA Chain",description:"This QA chain queries Neptune graph database using openCypher and returns human readable response",source:"@site/docs/use_cases/more/graph/neptune_cypher_qa.md",sourceDirName:"use_cases/more/graph",slug:"/use_cases/more/graph/neptune_cypher_qa",permalink:"/langchain/docs/use_cases/more/graph/neptune_cypher_qa",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"GraphSparqlQAChain",permalink:"/langchain/docs/use_cases/more/graph/graph_sparql_qa"},next:{title:"Tree of Thought (ToT) example",permalink:"/langchain/docs/use_cases/more/graph/tot"}},s={},i=[],h=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const l={toc:i},m="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"neptune-open-cypher-qa-chain"},"Neptune Open Cypher QA Chain"),(0,a.kt)("p",null,"This QA chain queries Neptune graph database using openCypher and returns human readable response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "NeptuneGraph", "source": "langchain.graphs", "docs": "https://api.python.langchain.com/en/latest/graphs/langchain.graphs.neptune_graph.NeptuneGraph.html", "title": "Neptune Open Cypher QA Chain"}]--\x3e\nfrom langchain.graphs import NeptuneGraph\n\n\nhost = "<neptune-host>"\nport = 8182\nuse_https = True\n\ngraph = NeptuneGraph(host=host, port=port, use_https=use_https)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Neptune Open Cypher QA Chain"}, {"imported": "NeptuneOpenCypherQAChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.graph_qa.neptune_cypher.NeptuneOpenCypherQAChain.html", "title": "Neptune Open Cypher QA Chain"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.chains import NeptuneOpenCypherQAChain\n\nllm = ChatOpenAI(temperature=0, model="gpt-4")\n\nchain = NeptuneOpenCypherQAChain.from_llm(llm=llm, graph=graph)\n\nchain.run("how many outgoing routes does the Austin airport have?")\n')),(0,a.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    'The Austin airport has 98 outgoing routes.'\n"))))}g.isMDXComponent=!0}}]);