"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[36421],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(n),g=r,d=c["".concat(p,".").concat(g)]||c[g]||u[g]||l;return n?a.createElement(d,o(o({ref:t},m),{},{components:n})):a.createElement(d,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=g;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},53571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={},o="TextGen",i={unversionedId:"integrations/llms/textgen",id:"integrations/llms/textgen",title:"TextGen",description:"GitHub:oobabooga/text-generation-webui A gradio web UI for running Large Language Models like LLaMA, llama.cpp, GPT-J, Pythia, OPT, and GALACTICA.",source:"@site/docs/integrations/llms/textgen.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/textgen",permalink:"/langchain/docs/integrations/llms/textgen",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Nebula (Symbl.ai)",permalink:"/langchain/docs/integrations/llms/symblai_nebula"},next:{title:"Titan Takeoff",permalink:"/langchain/docs/integrations/llms/titan_takeoff"}},p={},s=[{value:"Set model_url and run the example",id:"set-model_url-and-run-the-example",level:2},{value:"Streaming Version",id:"streaming-version",level:3}],m={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"textgen"},"TextGen"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/oobabooga/text-generation-webui"},"GitHub:oobabooga/text-generation-webui")," A gradio web UI for running Large Language Models like LLaMA, llama.cpp, GPT-J, Pythia, OPT, and GALACTICA."),(0,r.kt)("p",null,"This example goes over how to use LangChain to interact with LLM models via the ",(0,r.kt)("inlineCode",{parentName:"p"},"text-generation-webui")," API integration."),(0,r.kt)("p",null,"Please ensure that you have ",(0,r.kt)("inlineCode",{parentName:"p"},"text-generation-webui")," configured and an LLM installed.  Recommended installation via the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/oobabooga/text-generation-webui#one-click-installers"},"one-click installer appropriate")," for your OS."),(0,r.kt)("p",null,"Once ",(0,r.kt)("inlineCode",{parentName:"p"},"text-generation-webui")," is installed and confirmed working via the web interface, please enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," option either through the web model configuration tab, or by adding the run-time arg ",(0,r.kt)("inlineCode",{parentName:"p"},"--api")," to your start command."),(0,r.kt)("h2",{id:"set-model_url-and-run-the-example"},"Set model_url and run the example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'model_url = "http://localhost:5000"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextGen", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.textgen.TextGen.html", "title": "TextGen"}]--\x3e\nimport langchain\nfrom langchain import PromptTemplate, LLMChain\nfrom langchain.llms import TextGen\n\nlangchain.debug = True\n\ntemplate = """Question: {question}\n\nAnswer: Let\'s think step by step."""\n\n\nprompt = PromptTemplate(template=template, input_variables=["question"])\nllm = TextGen(model_url=model_url)\nllm_chain = LLMChain(prompt=prompt, llm=llm)\nquestion = "What NFL team won the Super Bowl in the year Justin Bieber was born?"\n\nllm_chain.run(question)\n')),(0,r.kt)("h3",{id:"streaming-version"},"Streaming Version"),(0,r.kt)("p",null,"You should install websocket-client to use this feature.\n",(0,r.kt)("inlineCode",{parentName:"p"},"pip install websocket-client")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'model_url = "ws://localhost:5005"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TextGen", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.textgen.TextGen.html", "title": "TextGen"}, {"imported": "StreamingStdOutCallbackHandler", "source": "langchain.callbacks.streaming_stdout", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streaming_stdout.StreamingStdOutCallbackHandler.html", "title": "TextGen"}]--\x3e\nimport langchain\nfrom langchain import PromptTemplate, LLMChain\nfrom langchain.llms import TextGen\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n\nlangchain.debug = True\n\ntemplate = """Question: {question}\n\nAnswer: Let\'s think step by step."""\n\n\nprompt = PromptTemplate(template=template, input_variables=["question"])\nllm = TextGen(model_url=model_url, streaming=True, callbacks=[StreamingStdOutCallbackHandler()])\nllm_chain = LLMChain(prompt=prompt, llm=llm)\nquestion = "What NFL team won the Super Bowl in the year Justin Bieber was born?"\n\nllm_chain.run(question)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"llm = TextGen(\n    model_url = model_url,\n    streaming=True\n)\nfor chunk in llm.stream(\"Ask 'Hi, how are you?' like a pirate:'\",\n        stop=[\"'\",\"\\n\"]):\n    print(chunk, end='', flush=True)\n")))}u.isMDXComponent=!0}}]);