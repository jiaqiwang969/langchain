"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[34605],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,h=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},65003:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={},s="Redis",o={unversionedId:"integrations/vectorstores/redis",id:"integrations/vectorstores/redis",title:"Redis",description:"Redis vector database introduction and langchain integration guide.",source:"@site/docs/integrations/vectorstores/redis.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/redis",permalink:"/langchain/docs/integrations/vectorstores/redis",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Qdrant",permalink:"/langchain/docs/integrations/vectorstores/qdrant"},next:{title:"Rockset",permalink:"/langchain/docs/integrations/vectorstores/rockset"}},l={},d=[{value:"What is Redis?",id:"what-is-redis",level:2},{value:"Redis as a Vector Database",id:"redis-as-a-vector-database",level:2},{value:"Clients",id:"clients",level:2},{value:"Deployment Options",id:"deployment-options",level:2},{value:"Examples",id:"examples",level:2},{value:"More Resources",id:"more-resources",level:2},{value:"Install Redis Python Client",id:"install-redis-python-client",level:2},{value:"Sample Data",id:"sample-data",level:2},{value:"Initializing Redis",id:"initializing-redis",level:2},{value:"Inspecting the Created Index",id:"inspecting-the-created-index",level:2},{value:"Querying",id:"querying",level:2},{value:"Connect to an Existing Index",id:"connect-to-an-existing-index",level:2},{value:"Custom Metadata Indexing",id:"custom-metadata-indexing",level:2},{value:"Hybrid Filtering",id:"hybrid-filtering",level:2},{value:"Redis as Retriever",id:"redis-as-retriever",level:2},{value:"Redis connection Url examples",id:"redis-connection-url-examples",level:3}],c=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const m={toc:d},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"redis"},"Redis"),(0,r.kt)("p",null,"Redis vector database introduction and langchain integration guide."),(0,r.kt)("h2",{id:"what-is-redis"},"What is Redis?"),(0,r.kt)("p",null,"Most developers from a web services background are probably familiar with Redis. At it's core, Redis is an open-source key-value store that can be used as a cache, message broker, and database. Developers choice Redis because it is fast, has a large ecosystem of client libraries, and has been deployed by major enterprises for years."),(0,r.kt)("p",null,"In addition to the traditional uses of Redis. Redis also provides capabilities built directly into Redis. These capabilities include the Search and Query capability that allows users to create secondary index structures within Redis. This allows Redis to be a Vector Database, at the speed of a cache. "),(0,r.kt)("h2",{id:"redis-as-a-vector-database"},"Redis as a Vector Database"),(0,r.kt)("p",null,"Redis uses compressed, inverted indexes for fast indexing with a low memory footprint. It also supports a number of advanced features such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Indexing of multiple fields in Redis hashes and JSON"),(0,r.kt)("li",{parentName:"ul"},"Vector similarity search (with HNSW (ANN) or FLAT (KNN))"),(0,r.kt)("li",{parentName:"ul"},"Vector Range Search (e.g. find all vectors within a radius of a query vector)"),(0,r.kt)("li",{parentName:"ul"},"Incremental indexing without performance loss"),(0,r.kt)("li",{parentName:"ul"},"Document ranking (using ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Tf%E2%80%93idf"},"tf-idf"),", with optional user-provided weights)"),(0,r.kt)("li",{parentName:"ul"},"Field weighting"),(0,r.kt)("li",{parentName:"ul"},"Complex boolean queries with AND, OR, and NOT operators"),(0,r.kt)("li",{parentName:"ul"},"Prefix matching, fuzzy matching, and exact-phrase queries"),(0,r.kt)("li",{parentName:"ul"},"Support for ",(0,r.kt)("a",{parentName:"li",href:"https://redis.io/docs/stack/search/reference/phonetic_matching/"},"double-metaphone phonetic matching")),(0,r.kt)("li",{parentName:"ul"},"Auto-complete suggestions (with fuzzy prefix suggestions)"),(0,r.kt)("li",{parentName:"ul"},"Stemming-based query expansion in ",(0,r.kt)("a",{parentName:"li",href:"https://redis.io/docs/stack/search/reference/stemming/"},"many languages")," (using ",(0,r.kt)("a",{parentName:"li",href:"http://snowballstem.org/"},"Snowball"),")"),(0,r.kt)("li",{parentName:"ul"},"Support for Chinese-language tokenization and querying (using ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/lionsoul2014/friso"},"Friso"),")"),(0,r.kt)("li",{parentName:"ul"},"Numeric filters and ranges"),(0,r.kt)("li",{parentName:"ul"},"Geospatial searches using ",(0,r.kt)("a",{parentName:"li",href:"/commands/georadius"},"Redis geospatial indexing")),(0,r.kt)("li",{parentName:"ul"},"A powerful aggregations engine"),(0,r.kt)("li",{parentName:"ul"},"Supports for all utf-8 encoded text"),(0,r.kt)("li",{parentName:"ul"},"Retrieve full documents, selected fields, or only the document IDs"),(0,r.kt)("li",{parentName:"ul"},"Sorting results (for example, by creation date)")),(0,r.kt)("h2",{id:"clients"},"Clients"),(0,r.kt)("p",null,"Since redis is much more than just a vector database, there are often use cases that demand usage of a Redis client besides just the langchain integration. You can use any standard Redis client library to run Search and Query commands, but it's easiest to use a library that wraps the Search and Query API. Below are a few examples, but you can find more client libraries ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/resources/clients/"},"here"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Project"),(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"License"),(0,r.kt)("th",{parentName:"tr",align:null},"Author"),(0,r.kt)("th",{parentName:"tr",align:null},"Stars"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/redis/jedis"},"jedis")),(0,r.kt)("td",{parentName:"tr",align:null},"Java"),(0,r.kt)("td",{parentName:"tr",align:null},"MIT"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://redis.com"},"Redis")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://img.shields.io/github/stars/redis/jedis.svg?style=social&label=Star&maxAge=2592000",alt:"Stars"}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/RedisVentures/redisvl"},"redisvl")),(0,r.kt)("td",{parentName:"tr",align:null},"Python"),(0,r.kt)("td",{parentName:"tr",align:null},"MIT"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://redis.com"},"Redis")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://img.shields.io/github/stars/RedisVentures/redisvl.svg?style=social&label=Star&maxAge=2592000",alt:"Stars"}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/redis/redis-py"},"redis-py")),(0,r.kt)("td",{parentName:"tr",align:null},"Python"),(0,r.kt)("td",{parentName:"tr",align:null},"MIT"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://redis.com"},"Redis")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://img.shields.io/github/stars/redis/redis-py.svg?style=social&label=Star&maxAge=2592000",alt:"Stars"}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/redis/node-redis"},"node-redis")),(0,r.kt)("td",{parentName:"tr",align:null},"Node.js"),(0,r.kt)("td",{parentName:"tr",align:null},"MIT"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://redis.com"},"Redis")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://img.shields.io/github/stars/redis/node-redis.svg?style=social&label=Star&maxAge=2592000",alt:"Stars"}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/redis/nredisstack"},"nredisstack")),(0,r.kt)("td",{parentName:"tr",align:null},".NET"),(0,r.kt)("td",{parentName:"tr",align:null},"MIT"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://redis.com"},"Redis")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("img",{parentName:"td",src:"https://img.shields.io/github/stars/redis/nredisstack.svg?style=social&label=Star&maxAge=2592000",alt:"Stars"}))))),(0,r.kt)("h2",{id:"deployment-options"},"Deployment Options"),(0,r.kt)("p",null,"There are many ways to deploy Redis with RediSearch. The easiest way to get started is to use Docker, but there are are many potential options for deployment such as"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://redis.com/redis-enterprise-cloud/overview/"},"Redis Cloud")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/redis/redis-stack"},"Docker (Redis Stack)")),(0,r.kt)("li",{parentName:"ul"},"Cloud marketplaces: ",(0,r.kt)("a",{parentName:"li",href:"https://aws.amazon.com/marketplace/pp/prodview-e6y7ork67pjwg?sr=0-2&ref_=beagle&applicationId=AWSMPContessa"},"AWS Marketplace"),", ",(0,r.kt)("a",{parentName:"li",href:"https://console.cloud.google.com/marketplace/details/redislabs-public/redis-enterprise?pli=1"},"Google Marketplace"),", or ",(0,r.kt)("a",{parentName:"li",href:"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/garantiadata.redis_enterprise_1sp_public_preview?tab=Overview"},"Azure Marketplace")),(0,r.kt)("li",{parentName:"ul"},"On-premise: ",(0,r.kt)("a",{parentName:"li",href:"https://redis.com/redis-enterprise-software/overview/"},"Redis Enterprise Software")),(0,r.kt)("li",{parentName:"ul"},"Kubernetes: ",(0,r.kt)("a",{parentName:"li",href:"https://docs.redis.com/latest/kubernetes/"},"Redis Enterprise Software on Kubernetes"))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Many examples can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/RedisVentures/"},"Redis AI team's GitHub")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/RedisVentures/redis-ai-resources"},"Awesome Redis AI Resources")," - List of examples of using Redis in AI workloads"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ruoccofabrizio/azure-open-ai-embeddings-qna"},"Azure OpenAI Embeddings Q&A")," - OpenAI and Redis as a Q&A service on Azure."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/RedisVentures/redis-arXiv-search"},"ArXiv Paper Search")," - Semantic search over arXiv scholarly papers")),(0,r.kt)("h2",{id:"more-resources"},"More Resources"),(0,r.kt)("p",null,"For more information on how to use Redis as a vector database, check out the following resources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://redisvl.com"},"RedisVL Documentation")," - Documentation for the Redis Vector Library Client"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://redis.io/docs/stack/search/reference/vectors/"},"Redis Vector Similarity Docs")," - Redis official docs for Vector Search."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://redis.readthedocs.io/en/latest/redismodules.html#redisearch-commands"},"Redis-py Search Docs")," - Documentation for redis-py client library"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://mlops.community/vector-similarity-search-from-basics-to-production/"},"Vector Similarity Search: From Basics to Production")," - Introductory blog post to VSS and Redis as a VectorDB.")),(0,r.kt)("h2",{id:"install-redis-python-client"},"Install Redis Python Client"),(0,r.kt)("p",null,"Redis-py is the officially supported client by Redis. Recently released is the RedisVL client which is purpose built for the Vector Database use cases. Both can be installed with pip."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install redis redisvl openai tiktoken\n")),(0,r.kt)("p",null,"We want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenAIEmbeddings")," so we have to get the OpenAI API Key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Redis"}]--\x3e\nimport os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n\nfrom langchain.embeddings import OpenAIEmbeddings\nembeddings = OpenAIEmbeddings()\n')),(0,r.kt)("h2",{id:"sample-data"},"Sample Data"),(0,r.kt)("p",null,"First we will describe some sample data so that the various attributes of the Redis vector store can be demonstrated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'metadata = [\n    {\n        "user": "john",\n        "age": 18,\n        "job": "engineer",\n        "credit_score": "high",\n    },\n    {\n        "user": "derrick",\n        "age": 45,\n        "job": "doctor",\n        "credit_score": "low",\n    },\n    {\n        "user": "nancy",\n        "age": 94,\n        "job": "doctor",\n        "credit_score": "high",\n    },\n    {\n        "user": "tyler",\n        "age": 100,\n        "job": "engineer",\n        "credit_score": "high",\n    },\n    {\n        "user": "joe",\n        "age": 35,\n        "job": "dentist",\n        "credit_score": "medium",\n    },\n]\ntexts = ["foo", "foo", "foo", "bar", "bar"]\n')),(0,r.kt)("h2",{id:"initializing-redis"},"Initializing Redis"),(0,r.kt)("p",null,"The Redis VectorStore instance can be initialized in a number of ways. There are multiple class methods that can be used to initialize a Redis VectorStore instance."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Redis.__init__")," - Initialize directly"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Redis.from_documents")," - Initialize from a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"Langchain.docstore.Document")," objects"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Redis.from_texts")," - Initialize from a list of texts (optionally with metadata)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Redis.from_texts_return_keys")," - Initialize from a list of texts (optionally with metadata) and return the keys"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Redis.from_existing_index")," - Initialize from an existing Redis index")),(0,r.kt)("p",null,"Below we will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Redis.from_documents")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Redis", "source": "langchain.vectorstores.redis", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.base.Redis.html", "title": "Redis"}]--\x3e\nfrom langchain.vectorstores.redis import Redis\n')),(0,r.kt)("p",null,"If you're not interested in the keys of your entries you can also create your redis instance from the documents."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Document", "source": "langchain.docstore.document", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Redis"}]--\x3e\nfrom langchain.docstore.document import Document\n\ndocuments = [Document(page_content=t, metadata=m) for t, m in zip(texts, metadata)]\nrds = Redis.from_documents(\n    documents,\n    embeddings,\n    redis_url="redis://localhost:6379",\n    index_name="users"\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"rds.index_name\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    'users'\n"))),(0,r.kt)("h2",{id:"inspecting-the-created-index"},"Inspecting the Created Index"),(0,r.kt)("p",null,"Once the ",(0,r.kt)("inlineCode",{parentName:"p"},"Redis")," VectorStore object has been constructed, an index will have been created in Redis if it did not already exist. The index can be inspected with both the ",(0,r.kt)("inlineCode",{parentName:"p"},"rvl"),"and the ",(0,r.kt)("inlineCode",{parentName:"p"},"redis-cli")," command line tool. If you installed ",(0,r.kt)("inlineCode",{parentName:"p"},"redisvl")," above, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"rvl")," command line tool to inspect the index."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# assumes you're running Redis locally (use --host, --port, --password, --username, to change this)\nrvl index listall\n")),(0,r.kt)(c,{lang:"bash",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    16:58:26 [RedisVL] INFO   Indices:\n    16:58:26 [RedisVL] INFO   1. users\n"))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Redis")," VectorStore implementation will attempt to generate index schema (fields for filtering) for any metadata passed through the ",(0,r.kt)("inlineCode",{parentName:"p"},"from_texts"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"from_texts_return_keys"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"from_documents")," methods. This way, whatever metadata is passed will be indexed into the Redis search index allowing\nfor filtering on those fields."),(0,r.kt)("p",null,"Below we show what fields were created from the metadata we defined above"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rvl index info -i users\n")),(0,r.kt)(c,{lang:"bash",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    Index Information:\n    \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 Index Name   \u2502 Storage Type   \u2502 Prefixes      \u2502 Index Options   \u2502   Indexing \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 users        \u2502 HASH           \u2502 ['doc:users'] \u2502 []              \u2502          0 \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n    Index Fields:\n    \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 Name           \u2502 Attribute      \u2502 Type    \u2502 Field Option   \u2502   Option Value \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 user           \u2502 user           \u2502 TEXT    \u2502 WEIGHT         \u2502              1 \u2502\n    \u2502 job            \u2502 job            \u2502 TEXT    \u2502 WEIGHT         \u2502              1 \u2502\n    \u2502 credit_score   \u2502 credit_score   \u2502 TEXT    \u2502 WEIGHT         \u2502              1 \u2502\n    \u2502 content        \u2502 content        \u2502 TEXT    \u2502 WEIGHT         \u2502              1 \u2502\n    \u2502 age            \u2502 age            \u2502 NUMERIC \u2502                \u2502                \u2502\n    \u2502 content_vector \u2502 content_vector \u2502 VECTOR  \u2502                \u2502                \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rvl stats -i users\n")),(0,r.kt)(c,{lang:"bash",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    Statistics:\n    \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n    \u2502 Stat Key                    \u2502 Value       \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 num_docs                    \u2502 5           \u2502\n    \u2502 num_terms                   \u2502 15          \u2502\n    \u2502 max_doc_id                  \u2502 5           \u2502\n    \u2502 num_records                 \u2502 33          \u2502\n    \u2502 percent_indexed             \u2502 1           \u2502\n    \u2502 hash_indexing_failures      \u2502 0           \u2502\n    \u2502 number_of_uses              \u2502 4           \u2502\n    \u2502 bytes_per_record_avg        \u2502 4.60606     \u2502\n    \u2502 doc_table_size_mb           \u2502 0.000524521 \u2502\n    \u2502 inverted_sz_mb              \u2502 0.000144958 \u2502\n    \u2502 key_table_size_mb           \u2502 0.000193596 \u2502\n    \u2502 offset_bits_per_record_avg  \u2502 8           \u2502\n    \u2502 offset_vectors_sz_mb        \u2502 2.19345e-05 \u2502\n    \u2502 offsets_per_term_avg        \u2502 0.69697     \u2502\n    \u2502 records_per_doc_avg         \u2502 6.6         \u2502\n    \u2502 sortable_values_size_mb     \u2502 0           \u2502\n    \u2502 total_indexing_time         \u2502 0.32        \u2502\n    \u2502 total_inverted_index_blocks \u2502 16          \u2502\n    \u2502 vector_index_sz_mb          \u2502 6.0126      \u2502\n    \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n"))),(0,r.kt)("p",null,"It's important to note that we have not specified that the ",(0,r.kt)("inlineCode",{parentName:"p"},"user"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"job"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"credit_score")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," in the metadata should be fields within the index, this is because the ",(0,r.kt)("inlineCode",{parentName:"p"},"Redis")," VectorStore object automatically generate the index schema from the passed metadata. For more information on the generation of index fields, see the API documentation."),(0,r.kt)("h2",{id:"querying"},"Querying"),(0,r.kt)("p",null,"There are multiple ways to query the ",(0,r.kt)("inlineCode",{parentName:"p"},"Redis")," VectorStore implementation based on what use case you have:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"similarity_search"),": Find the most similar vectors to a given vector."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"similarity_search_with_score"),": Find the most similar vectors to a given vector and return the vector distance"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"similarity_search_limit_score"),": Find the most similar vectors to a given vector and limit the number of results to the ",(0,r.kt)("inlineCode",{parentName:"li"},"score_threshold")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"similarity_search_with_relevance_scores"),": Find the most similar vectors to a given vector and return the vector similarities")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'results = rds.similarity_search("foo")\nprint(results[0].page_content)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    foo\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# return metadata\nresults = rds.similarity_search("foo", k=3)\nmeta = results[1].metadata\nprint("Key of the document in Redis: ", meta.pop("id"))\nprint("Metadata of the document: ", meta)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Key of the document in Redis:  doc:users:a70ca43b3a4e4168bae57c78753a200f\n    Metadata of the document:  {'user': 'derrick', 'job': 'doctor', 'credit_score': 'low', 'age': '45'}\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# with scores (distances)\nresults = rds.similarity_search_with_score("foo", k=5)\nfor result in results:\n    print(f"Content: {result[0].page_content} --- Score: {result[1]}")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Content: foo --- Score: 0.0\n    Content: foo --- Score: 0.0\n    Content: foo --- Score: 0.0\n    Content: bar --- Score: 0.1566\n    Content: bar --- Score: 0.1566\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# limit the vector distance that can be returned\nresults = rds.similarity_search_with_score("foo", k=5, distance_threshold=0.1)\nfor result in results:\n    print(f"Content: {result[0].page_content} --- Score: {result[1]}")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Content: foo --- Score: 0.0\n    Content: foo --- Score: 0.0\n    Content: foo --- Score: 0.0\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# with scores\nresults = rds.similarity_search_with_relevance_scores("foo", k=5)\nfor result in results:\n    print(f"Content: {result[0].page_content} --- Similiarity: {result[1]}")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Content: foo --- Similiarity: 1.0\n    Content: foo --- Similiarity: 1.0\n    Content: foo --- Similiarity: 1.0\n    Content: bar --- Similiarity: 0.8434\n    Content: bar --- Similiarity: 0.8434\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# limit scores (similarities have to be over .9)\nresults = rds.similarity_search_with_relevance_scores("foo", k=5, score_threshold=0.9)\nfor result in results:\n    print(f"Content: {result[0].page_content} --- Similarity: {result[1]}")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Content: foo --- Similarity: 1.0\n    Content: foo --- Similarity: 1.0\n    Content: foo --- Similarity: 1.0\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# you can also add new documents as follows\nnew_document = ["baz"]\nnew_metadata = [{\n    "user": "sam",\n    "age": 50,\n    "job": "janitor",\n    "credit_score": "high"\n}]\n# both the document and metadata must be lists\nrds.add_texts(new_document, new_metadata)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    ['doc:users:b9c71d62a0a34241a37950b448dafd38']\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# now query the new document\nresults = rds.similarity_search("baz", k=3)\nprint(results[0].metadata)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'id': 'doc:users:b9c71d62a0a34241a37950b448dafd38', 'user': 'sam', 'job': 'janitor', 'credit_score': 'high', 'age': '50'}\n"))),(0,r.kt)("h2",{id:"connect-to-an-existing-index"},"Connect to an Existing Index"),(0,r.kt)("p",null,"In order to have the same metadata indexed when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Redis")," VectorStore. You will need to have the same ",(0,r.kt)("inlineCode",{parentName:"p"},"index_schema")," passed in either as a path to a yaml file or as a dictionary. The following shows how to obtain the schema from an index and connect to an existing index."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# write the schema to a yaml file\nrds.write_schema("redis_schema.yaml")\n')),(0,r.kt)("p",null,"The schema file for this example should look something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"numeric:\n- name: age\n  no_index: false\n  sortable: false\ntext:\n- name: user\n  no_index: false\n  no_stem: false\n  sortable: false\n  weight: 1\n  withsuffixtrie: false\n- name: job\n  no_index: false\n  no_stem: false\n  sortable: false\n  weight: 1\n  withsuffixtrie: false\n- name: credit_score\n  no_index: false\n  no_stem: false\n  sortable: false\n  weight: 1\n  withsuffixtrie: false\n- name: content\n  no_index: false\n  no_stem: false\n  sortable: false\n  weight: 1\n  withsuffixtrie: false\nvector:\n- algorithm: FLAT\n  block_size: 1000\n  datatype: FLOAT32\n  dims: 1536\n  distance_metric: COSINE\n  initial_cap: 20000\n  name: content_vector\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notice"),", this include ",(0,r.kt)("strong",{parentName:"p"},"all")," possible fields for the schema. You can remove any fields that you don't need."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# now we can connect to our existing index as follows\n\nnew_rds = Redis.from_existing_index(\n    embeddings,\n    index_name="users",\n    redis_url="redis://localhost:6379",\n    schema="redis_schema.yaml"\n)\nresults = new_rds.similarity_search("foo", k=3)\nprint(results[0].metadata)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'id': 'doc:users:8484c48a032d4c4cbe3cc2ed6845fabb', 'user': 'john', 'job': 'engineer', 'credit_score': 'high', 'age': '18'}\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# see the schemas are the same\nnew_rds.schema == rds.schema\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    True\n"))),(0,r.kt)("h2",{id:"custom-metadata-indexing"},"Custom Metadata Indexing"),(0,r.kt)("p",null,"In some cases, you may want to control what fields the metadata maps to. For example, you may want the ",(0,r.kt)("inlineCode",{parentName:"p"},"credit_score")," field to be a categorical field instead of a text field (which is the default behavior for all string fields). In this case, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"index_schema")," parameter in each of the initialization methods above to specify the schema for the index. Custom index schema can either be passed as a dictionary or as a path to a yaml file."),(0,r.kt)("p",null,"All arguments in the schema have defaults besides the name, so you can specify only the fields you want to change. All the names correspond to the snake/lowercase versions of the arguments you would use on the command line with ",(0,r.kt)("inlineCode",{parentName:"p"},"redis-cli")," or in ",(0,r.kt)("inlineCode",{parentName:"p"},"redis-py"),". For more on the arguments for each field, see the ",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/docs/interact/search-and-query/basic-constructs/field-and-type-options/"},"documentation")),(0,r.kt)("p",null,"The below example shows how to specify the schema for the ",(0,r.kt)("inlineCode",{parentName:"p"},"credit_score")," field as a Tag (categorical) field instead of a text field. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# index_schema.yml\ntag:\n    - name: credit_score\ntext:\n    - name: user\n    - name: job\nnumeric:\n    - name: age\n")),(0,r.kt)("p",null,"In Python this would look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nindex_schema = {\n    "tag": [{"name": "credit_score"}],\n    "text": [{"name": "user"}, {"name": "job"}],\n    "numeric": [{"name": "age"}],\n}\n\n')),(0,r.kt)("p",null,"Notice that only the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field needs to be specified. All other fields have defaults."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# create a new index with the new schema defined above\nindex_schema = {\n    "tag": [{"name": "credit_score"}],\n    "text": [{"name": "user"}, {"name": "job"}],\n    "numeric": [{"name": "age"}],\n}\n\nrds, keys = Redis.from_texts_return_keys(\n    texts,\n    embeddings,\n    metadatas=metadata,\n    redis_url="redis://localhost:6379",\n    index_name="users_modified",\n    index_schema=index_schema, # pass in the new index schema\n)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    `index_schema` does not match generated metadata schema.\n    If you meant to manually override the schema, please ignore this message.\n    index_schema: {'tag': [{'name': 'credit_score'}], 'text': [{'name': 'user'}, {'name': 'job'}], 'numeric': [{'name': 'age'}]}\n    generated_schema: {'text': [{'name': 'user'}, {'name': 'job'}, {'name': 'credit_score'}], 'numeric': [{'name': 'age'}], 'tag': []}\n    \n"))),(0,r.kt)("p",null,"The above warning is meant to notify users when they are overriding the default behavior. Ignore it if you are intentionally overriding the behavior."),(0,r.kt)("h2",{id:"hybrid-filtering"},"Hybrid Filtering"),(0,r.kt)("p",null,"With the Redis Filter Expression language built into langchain, you can create arbitrarily long chains of hybrid filters\nthat can be used to filter your search results. The expression language is derived from the ",(0,r.kt)("a",{parentName:"p",href:"https://redisvl.com"},"RedisVL Expression Syntax"),"\nand is designed to be easy to use and understand."),(0,r.kt)("p",null,"The following are the available filter types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RedisText"),": Filter by full-text search against metadata fields. Supports exact, fuzzy, and wildcard matching."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RedisNum"),": Filter by numeric range against metadata fields."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"RedisTag"),': Filter by exact match against string based categorical metadata fields. Multiple tags can be specified like "tag1,tag2,tag3".')),(0,r.kt)("p",null,"The following are examples of utilizing these filters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RedisText", "source": "langchain.vectorstores.redis", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.filters.RedisText.html", "title": "Redis"}, {"imported": "RedisNum", "source": "langchain.vectorstores.redis", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.filters.RedisNum.html", "title": "Redis"}, {"imported": "RedisTag", "source": "langchain.vectorstores.redis", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.filters.RedisTag.html", "title": "Redis"}]--\x3e\n\nfrom langchain.vectorstores.redis import RedisText, RedisNum, RedisTag\n\n# exact matching\nhas_high_credit = RedisTag("credit_score") == "high"\ndoes_not_have_high_credit = RedisTag("credit_score") != "low"\n\n# fuzzy matching\njob_starts_with_eng = RedisText("job") % "eng*"\njob_is_engineer = RedisText("job") == "engineer"\njob_is_not_engineer = RedisText("job") != "engineer"\n\n# numeric filtering\nage_is_18 = RedisNum("age") == 18\nage_is_not_18 = RedisNum("age") != 18\nage_is_greater_than_18 = RedisNum("age") > 18\nage_is_less_than_18 = RedisNum("age") < 18\nage_is_greater_than_or_equal_to_18 = RedisNum("age") >= 18\nage_is_less_than_or_equal_to_18 = RedisNum("age") <= 18\n\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RedisFilter")," class can be used to simplify the import of these filters as follows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RedisFilter", "source": "langchain.vectorstores.redis", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.filters.RedisFilter.html", "title": "Redis"}]--\x3e\n\nfrom langchain.vectorstores.redis import RedisFilter\n\n# same examples as above\nhas_high_credit = RedisFilter.tag("credit_score") == "high"\ndoes_not_have_high_credit = RedisFilter.num("age") > 8\njob_starts_with_eng = RedisFilter.text("job") % "eng*"\n')),(0,r.kt)("p",null,"The following are examples of using hybrid filter for search"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RedisText", "source": "langchain.vectorstores.redis", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.filters.RedisText.html", "title": "Redis"}]--\x3e\nfrom langchain.vectorstores.redis import RedisText\n\nis_engineer = RedisText("job") == "engineer"\nresults = rds.similarity_search("foo", k=3, filter=is_engineer)\n\nprint("Job:", results[0].metadata["job"])\nprint("Engineers in the dataset:", len(results))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Job: engineer\n    Engineers in the dataset: 2\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# fuzzy match\nstarts_with_doc = RedisText("job") % "doc*"\nresults = rds.similarity_search("foo", k=3, filter=starts_with_doc)\n\nfor result in results:\n    print("Job:", result.metadata["job"])\nprint("Jobs in dataset that start with \'doc\':", len(results))\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Job: doctor\n    Job: doctor\n    Jobs in dataset that start with 'doc': 2\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RedisNum", "source": "langchain.vectorstores.redis", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.redis.filters.RedisNum.html", "title": "Redis"}]--\x3e\nfrom langchain.vectorstores.redis import RedisNum\n\nis_over_18 = RedisNum("age") > 18\nis_under_99 = RedisNum("age") < 99\nage_range = is_over_18 & is_under_99\nresults = rds.similarity_search("foo", filter=age_range)\n\nfor result in results:\n    print("User:", result.metadata["user"], "is", result.metadata["age"])\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    User: derrick is 45\n    User: nancy is 94\n    User: joe is 35\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# make sure to use parenthesis around FilterExpressions\n# if initializing them while constructing them\nage_range = (RedisNum("age") > 18) & (RedisNum("age") < 99)\nresults = rds.similarity_search("foo", filter=age_range)\n\nfor result in results:\n    print("User:", result.metadata["user"], "is", result.metadata["age"])\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    User: derrick is 45\n    User: nancy is 94\n    User: joe is 35\n"))),(0,r.kt)("h2",{id:"redis-as-retriever"},"Redis as Retriever"),(0,r.kt)("p",null,"Here we go over different options for using the vector store as a retriever."),(0,r.kt)("p",null,"There are three different search methods we can use to do retrieval. By default, it will use semantic similarity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "foo"\nresults = rds.similarity_search_with_score(query, k=3, return_metadata=True)\n\nfor result in results:\n    print("Content:", result[0].page_content, " --- Score: ", result[1])\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Content: foo  --- Score:  0.0\n    Content: foo  --- Score:  0.0\n    Content: foo  --- Score:  0.0\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'retriever = rds.as_retriever(search_type="similarity", search_kwargs={"k": 4})\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"docs = retriever.get_relevant_documents(query)\ndocs\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content='foo', metadata={'id': 'doc:users_modified:988ecca7574048e396756efc0e79aeca', 'user': 'john', 'job': 'engineer', 'credit_score': 'high', 'age': '18'}),\n     Document(page_content='foo', metadata={'id': 'doc:users_modified:009b1afeb4084cc6bdef858c7a99b48e', 'user': 'derrick', 'job': 'doctor', 'credit_score': 'low', 'age': '45'}),\n     Document(page_content='foo', metadata={'id': 'doc:users_modified:7087cee9be5b4eca93c30fbdd09a2731', 'user': 'nancy', 'job': 'doctor', 'credit_score': 'high', 'age': '94'}),\n     Document(page_content='bar', metadata={'id': 'doc:users_modified:01ef6caac12b42c28ad870aefe574253', 'user': 'tyler', 'job': 'engineer', 'credit_score': 'high', 'age': '100'})]\n"))),(0,r.kt)("p",null,"There is also the ",(0,r.kt)("inlineCode",{parentName:"p"},"similarity_distance_threshold")," retriever which allows the user to specify the vector distance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'retriever = rds.as_retriever(search_type="similarity_distance_threshold", search_kwargs={"k": 4, "distance_threshold": 0.1})\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"docs = retriever.get_relevant_documents(query)\ndocs\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content='foo', metadata={'id': 'doc:users_modified:988ecca7574048e396756efc0e79aeca', 'user': 'john', 'job': 'engineer', 'credit_score': 'high', 'age': '18'}),\n     Document(page_content='foo', metadata={'id': 'doc:users_modified:009b1afeb4084cc6bdef858c7a99b48e', 'user': 'derrick', 'job': 'doctor', 'credit_score': 'low', 'age': '45'}),\n     Document(page_content='foo', metadata={'id': 'doc:users_modified:7087cee9be5b4eca93c30fbdd09a2731', 'user': 'nancy', 'job': 'doctor', 'credit_score': 'high', 'age': '94'})]\n"))),(0,r.kt)("p",null,"Lastly, the ",(0,r.kt)("inlineCode",{parentName:"p"},"similarity_score_threshold")," allows the user to define the minimum score for similar documents"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'retriever = rds.as_retriever(search_type="similarity_score_threshold",  search_kwargs={"score_threshold": 0.9, "k": 10})\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'retriever.get_relevant_documents("foo")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content='foo', metadata={'id': 'doc:users_modified:988ecca7574048e396756efc0e79aeca', 'user': 'john', 'job': 'engineer', 'credit_score': 'high', 'age': '18'}),\n     Document(page_content='foo', metadata={'id': 'doc:users_modified:009b1afeb4084cc6bdef858c7a99b48e', 'user': 'derrick', 'job': 'doctor', 'credit_score': 'low', 'age': '45'}),\n     Document(page_content='foo', metadata={'id': 'doc:users_modified:7087cee9be5b4eca93c30fbdd09a2731', 'user': 'nancy', 'job': 'doctor', 'credit_score': 'high', 'age': '94'})]\n"))),(0,r.kt)("h1",{id:"delete-keys"},"Delete keys"),(0,r.kt)("p",null,"To delete your entries you have to address them by their keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'Redis.delete(keys, redis_url="redis://localhost:6379")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    True\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# delete the indices too\nRedis.drop_index(index_name="users", delete_documents=True, redis_url="redis://localhost:6379")\nRedis.drop_index(index_name="users_modified", delete_documents=True, redis_url="redis://localhost:6379")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    True\n"))),(0,r.kt)("h3",{id:"redis-connection-url-examples"},"Redis connection Url examples"),(0,r.kt)("p",null,"Valid Redis Url scheme are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"redis://"),"  - Connection to Redis standalone, unencrypted"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"rediss://")," - Connection to Redis standalone, with TLS encryption"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"redis+sentinel://"),"  - Connection to Redis server via Redis Sentinel, unencrypted"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"rediss+sentinel://")," - Connection to Redis server via Redis Sentinel, booth connections with TLS encryption")),(0,r.kt)("p",null,"More information about additional connection parameter can be found in the redis-py documentation at ",(0,r.kt)("a",{parentName:"p",href:"https://redis-py.readthedocs.io/en/stable/connections.html"},"https://redis-py.readthedocs.io/en/stable/connections.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# connection to redis standalone at localhost, db 0, no password\nredis_url = "redis://localhost:6379"\n# connection to host "redis" port 7379 with db 2 and password "secret" (old style authentication scheme without username / pre 6.x)\nredis_url = "redis://:secret@redis:7379/2"\n# connection to host redis on default port with user "joe", pass "secret" using redis version 6+ ACLs\nredis_url = "redis://joe:secret@redis/0"\n\n# connection to sentinel at localhost with default group mymaster and db 0, no password\nredis_url = "redis+sentinel://localhost:26379"\n# connection to sentinel at host redis with default port 26379 and user "joe" with password "secret" with default group mymaster and db 0\nredis_url = "redis+sentinel://joe:secret@redis"\n# connection to sentinel, no auth with sentinel monitoring group "zone-1" and database 2\nredis_url = "redis+sentinel://redis:26379/zone-1/2"\n\n# connection to redis standalone at localhost, db 0, no password but with TLS support\nredis_url = "rediss://localhost:6379"\n# connection to redis sentinel at localhost and default port, db 0, no password\n# but with TLS support for booth Sentinel and Redis server\nredis_url = "rediss+sentinel://localhost"\n')))}h.isMDXComponent=!0}}]);