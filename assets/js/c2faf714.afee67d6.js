"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[31934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,d=p["".concat(i,".").concat(u)]||p[u]||m[u]||s;return n?a.createElement(d,o(o({ref:t},h),{},{components:n})):a.createElement(d,o({ref:t},h))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19439:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const s={},o="Bash chain",l={unversionedId:"use_cases/more/code_writing/llm_bash",id:"use_cases/more/code_writing/llm_bash",title:"Bash chain",description:"This notebook showcases using LLMs and a bash process to perform simple filesystem commands.",source:"@site/docs/use_cases/more/code_writing/llm_bash.md",sourceDirName:"use_cases/more/code_writing",slug:"/use_cases/more/code_writing/llm_bash",permalink:"/langchain/docs/use_cases/more/code_writing/llm_bash",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Causal program-aided language (CPAL) chain",permalink:"/langchain/docs/use_cases/more/code_writing/cpal"},next:{title:"Math chain",permalink:"/langchain/docs/use_cases/more/code_writing/llm_math"}},i={},c=[{value:"Customize Prompt",id:"customize-prompt",level:2},{value:"Persistent Terminal",id:"persistent-terminal",level:2}],h=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const m={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bash-chain"},"Bash chain"),(0,r.kt)("p",null,"This notebook showcases using LLMs and a bash process to perform simple filesystem commands."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "LLMBashChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm_bash.base.LLMBashChain.html", "title": "Bash chain"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Bash chain"}]--\x3e\nfrom langchain.chains import LLMBashChain\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0)\n\ntext = "Please write a bash script that prints \'Hello World\' to the console."\n\nbash_chain = LLMBashChain.from_llm(llm, verbose=True)\n\nbash_chain.run(text)\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMBashChain chain...\n    Please write a bash script that prints 'Hello World' to the console.\n    \n    ```bash\n    echo \"Hello World\"\n    ```\n    Code: ['echo \"Hello World\"']\n    Answer: Hello World\n    \n    > Finished chain.\n\n\n\n\n\n    'Hello World\\n'\n"))),(0,r.kt)("h2",{id:"customize-prompt"},"Customize Prompt"),(0,r.kt)("p",null,"You can also customize the prompt that is used. Here is an example prompting to avoid using the 'echo' utility"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts.prompt", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Bash chain"}, {"imported": "BashOutputParser", "source": "langchain.chains.llm_bash.prompt", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm_bash.prompt.BashOutputParser.html", "title": "Bash chain"}]--\x3e\nfrom langchain.prompts.prompt import PromptTemplate\nfrom langchain.chains.llm_bash.prompt import BashOutputParser\n\n_PROMPT_TEMPLATE = """If someone asks you to perform a task, your job is to come up with a series of bash commands that will perform the task. There is no need to put "#!/bin/bash" in your answer. Make sure to reason step by step, using this format:\nQuestion: "copy the files in the directory named \'target\' into a new directory at the same level as target called \'myNewDirectory\'"\nI need to take the following actions:\n- List all files in the directory\n- Create a new directory\n- Copy the files from the first directory into the second directory\n```bash\nls\nmkdir myNewDirectory\ncp -r target/* myNewDirectory\n')),(0,r.kt)("p",null,"Do not use 'echo' when writing the script."),(0,r.kt)("p",null,'That is the format. Begin!\nQuestion: {question}"""'),(0,r.kt)("p",null,"PROMPT = PromptTemplate(\ninput_variables=",'["question"]',",\ntemplate=_PROMPT_TEMPLATE,\noutput_parser=BashOutputParser(),\n)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\n\n```python\nbash_chain = LLMBashChain.from_llm(llm, prompt=PROMPT, verbose=True)\n\ntext = \"Please write a bash script that prints 'Hello World' to the console.\"\n\nbash_chain.run(text)\n")),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMBashChain chain...\n    Please write a bash script that prints 'Hello World' to the console.\n    \n    ```bash\n    printf \"Hello World\\n\"\n    ```\n    Code: ['printf \"Hello World\\\\n\"']\n    Answer: Hello World\n    \n    > Finished chain.\n\n\n\n\n\n    'Hello World\\n'\n"))),(0,r.kt)("h2",{id:"persistent-terminal"},"Persistent Terminal"),(0,r.kt)("p",null,"By default, the chain will run in a separate subprocess each time it is called. This behavior can be changed by instantiating with a persistent bash process."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "BashProcess", "source": "langchain.utilities.bash", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.bash.BashProcess.html", "title": "Bash chain"}]--\x3e\nfrom langchain.utilities.bash import BashProcess\n\n\npersistent_process = BashProcess(persistent=True)\nbash_chain = LLMBashChain.from_llm(llm, bash_process=persistent_process, verbose=True)\n\ntext = "List the current directory then move up a level."\n\nbash_chain.run(text)\n')),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMBashChain chain...\n    List the current directory then move up a level.\n    \n    ```bash\n    ls\n    cd ..\n    ```\n    Code: ['ls', 'cd ..']\n    Answer: api.html            llm_summarization_checker.html\n    constitutional_chain.html   moderation.html\n    llm_bash.html           openai_openapi.yaml\n    llm_checker.html        openapi.html\n    llm_math.html           pal.html\n    llm_requests.html       sqlite.html\n    > Finished chain.\n\n\n\n\n\n    'api.html\\t\\t\\tllm_summarization_checker.html\\r\\nconstitutional_chain.html\\tmoderation.html\\r\\nllm_bash.html\\t\\t\\topenai_openapi.yaml\\r\\nllm_checker.html\\t\\topenapi.html\\r\\nllm_math.html\\t\\t\\tpal.html\\r\\nllm_requests.html\\t\\tsqlite.html'\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Run the same command again and see that the state is maintained between calls\nbash_chain.run(text)\n")),(0,r.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMBashChain chain...\n    List the current directory then move up a level.\n    \n    ```bash\n    ls\n    cd ..\n    ```\n    Code: ['ls', 'cd ..']\n    Answer: examples        getting_started.html    index_examples\n    generic         how_to_guides.rst\n    > Finished chain.\n\n\n\n\n\n    'examples\\t\\tgetting_started.html\\tindex_examples\\r\\ngeneric\\t\\t\\thow_to_guides.rst'\n"))))}d.isMDXComponent=!0}}]);