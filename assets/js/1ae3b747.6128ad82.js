"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[83484],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=i(a),h=r,d=m["".concat(p,".").concat(h)]||m[h]||u[h]||l;return a?n.createElement(d,o(o({ref:t},c),{},{components:a})):n.createElement(d,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var i=2;i<l;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},10314:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const l={},o="Interface",s={unversionedId:"expression_language/interface",id:"expression_language/interface",title:"Interface",description:'In an effort to make it as easy as possible to create custom chains, we\'ve implemented a "Runnable" protocol that most components implement. This is a standard interface with a few different methods, which makes it easy to define custom chains as well as making it possible to invoke them in a standard way. The standard interface exposed includes:',source:"@site/docs/expression_language/interface.md",sourceDirName:"expression_language",slug:"/expression_language/interface",permalink:"/langchain/docs/expression_language/interface",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"LangChain Expression Language (LCEL)",permalink:"/langchain/docs/expression_language/"},next:{title:"Guides",permalink:"/langchain/docs/guides"}},p={},i=[{value:"Stream",id:"stream",level:2},{value:"Invoke",id:"invoke",level:2},{value:"Batch",id:"batch",level:2},{value:"Async Stream",id:"async-stream",level:2},{value:"Async Invoke",id:"async-invoke",level:2},{value:"Async Batch",id:"async-batch",level:2},{value:"Parallelism",id:"parallelism",level:2}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const u={toc:i},h="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interface"},"Interface"),(0,r.kt)("p",null,"In an effort to make it as easy as possible to create custom chains, we've implemented a ",(0,r.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.Runnable.html#langchain.schema.runnable.Runnable"},'"Runnable"')," protocol that most components implement. This is a standard interface with a few different methods, which makes it easy to define custom chains as well as making it possible to invoke them in a standard way. The standard interface exposed includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stream"),": stream back chunks of the response"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"invoke"),": call the chain on an input"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"batch"),": call the chain on a list of inputs")),(0,r.kt)("p",null,"These also have corresponding async methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"astream"),": stream back chunks of the response async"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ainvoke"),": call the chain on an input async"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"abatch"),": call the chain on a list of inputs async")),(0,r.kt)("p",null,"The type of the input varies by component:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Component"),(0,r.kt)("th",{parentName:"tr",align:null},"Input Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Prompt"),(0,r.kt)("td",{parentName:"tr",align:null},"Dictionary")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Retriever"),(0,r.kt)("td",{parentName:"tr",align:null},"Single string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Model"),(0,r.kt)("td",{parentName:"tr",align:null},"Single string, list of chat messages or a PromptValue")))),(0,r.kt)("p",null,"The output type also varies by component:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Component"),(0,r.kt)("th",{parentName:"tr",align:null},"Output Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LLM"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ChatModel"),(0,r.kt)("td",{parentName:"tr",align:null},"ChatMessage")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Prompt"),(0,r.kt)("td",{parentName:"tr",align:null},"PromptValue")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Retriever"),(0,r.kt)("td",{parentName:"tr",align:null},"List of documents")))),(0,r.kt)("p",null,"Let's take a look at these methods! To do so, we'll create a super simple PromptTemplate + ChatModel chain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatPromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "Interface"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Interface"}]--\x3e\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.chat_models import ChatOpenAI\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"model = ChatOpenAI()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'prompt = ChatPromptTemplate.from_template("tell me a joke about {topic}")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = prompt | model\n")),(0,r.kt)("h2",{id:"stream"},"Stream"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'for s in chain.stream({"topic": "bears"}):\n    print(s.content, end="", flush=True)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Sure, here's a bear-themed joke for you:\n    \n    Why don't bears wear shoes?\n    \n    Because they have bear feet!\n"))),(0,r.kt)("h2",{id:"invoke"},"Invoke"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.invoke({"topic": "bears"})\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    AIMessage(content="Why don\'t bears wear shoes?\\n\\nBecause they already have bear feet!", additional_kwargs={}, example=False)\n'))),(0,r.kt)("h2",{id:"batch"},"Batch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.batch([{"topic": "bears"}, {"topic": "cats"}])\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    [AIMessage(content="Why don\'t bears ever wear shoes?\\n\\nBecause they have bear feet!", additional_kwargs={}, example=False),\n     AIMessage(content="Why don\'t cats play poker in the wild?\\n\\nToo many cheetahs!", additional_kwargs={}, example=False)]\n'))),(0,r.kt)("p",null,"You can set the number of concurrent requests by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"max_concurrency")," parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.batch([{"topic": "bears"}, {"topic": "cats"}], config={"max_concurrency": 5})\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    [AIMessage(content="Why don\'t bears wear shoes?\\n\\nBecause they have bear feet!", additional_kwargs={}, example=False),\n     AIMessage(content="Why don\'t cats play poker in the wild?\\n\\nToo many cheetahs!", additional_kwargs={}, example=False)]\n'))),(0,r.kt)("h2",{id:"async-stream"},"Async Stream"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'async for s in chain.astream({"topic": "bears"}):\n    print(s.content, end="", flush=True)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Why don't bears wear shoes?\n    \n    Because they have bear feet!\n"))),(0,r.kt)("h2",{id:"async-invoke"},"Async Invoke"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'await chain.ainvoke({"topic": "bears"})\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    AIMessage(content="Sure, here you go:\\n\\nWhy don\'t bears wear shoes?\\n\\nBecause they have bear feet!", additional_kwargs={}, example=False)\n'))),(0,r.kt)("h2",{id:"async-batch"},"Async Batch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'await chain.abatch([{"topic": "bears"}])\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    [AIMessage(content="Why don\'t bears wear shoes?\\n\\nBecause they have bear feet!", additional_kwargs={}, example=False)]\n'))),(0,r.kt)("h2",{id:"parallelism"},"Parallelism"),(0,r.kt)("p",null,"Let's take a look at how LangChain Expression Language support parralel requests as much as possible. For example, when using a RunnableMapping (often written as a dictionary) it executes each element in parralel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RunnableMap", "source": "langchain.schema.runnable", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.runnable.base.RunnableMap.html", "title": "Interface"}]--\x3e\nfrom langchain.schema.runnable import RunnableMap\nchain1 = ChatPromptTemplate.from_template("tell me a joke about {topic}") | model\nchain2 = ChatPromptTemplate.from_template("write a short (2 line) poem about {topic}") | model\ncombined = RunnableMap({\n    "joke": chain1,\n    "poem": chain2,\n})\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain1.invoke({"topic": "bears"})\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    CPU times: user 31.7 ms, sys: 8.59 ms, total: 40.3 ms\n    Wall time: 1.05 s\n\n\n\n\n\n    AIMessage(content=\"Why don't bears like fast food?\\n\\nBecause they can't catch it!\", additional_kwargs={}, example=False)\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain2.invoke({"topic": "bears"})\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    CPU times: user 42.9 ms, sys: 10.2 ms, total: 53 ms\n    Wall time: 1.93 s\n\n\n\n\n\n    AIMessage(content=\"In forest's embrace, bears roam free,\\nSilent strength, nature's majesty.\", additional_kwargs={}, example=False)\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'combined.invoke({"topic": "bears"})\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    CPU times: user 96.3 ms, sys: 20.4 ms, total: 117 ms\n    Wall time: 1.1 s\n\n\n\n\n\n    {'joke': AIMessage(content=\"Why don't bears wear socks?\\n\\nBecause they have bear feet!\", additional_kwargs={}, example=False),\n     'poem': AIMessage(content=\"In forest's embrace,\\nMajestic bears leave their trace.\", additional_kwargs={}, example=False)}\n"))))}d.isMDXComponent=!0}}]);