"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[44888],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(a),m=r,h=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85199:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={},i="Airbyte CDK",s={unversionedId:"integrations/document_loaders/airbyte_cdk",id:"integrations/document_loaders/airbyte_cdk",title:"Airbyte CDK",description:"Airbyte is a data integration platform for ELT pipelines from APIs, databases & files to warehouses & lakes. It has the largest catalog of ELT connectors to data warehouses and databases.",source:"@site/docs/integrations/document_loaders/airbyte_cdk.md",sourceDirName:"integrations/document_loaders",slug:"/integrations/document_loaders/airbyte_cdk",permalink:"/langchain/docs/integrations/document_loaders/airbyte_cdk",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"acreom",permalink:"/langchain/docs/integrations/document_loaders/acreom"},next:{title:"Airbyte Gong",permalink:"/langchain/docs/integrations/document_loaders/airbyte_gong"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Incremental loads",id:"incremental-loads",level:2}],d={toc:l},u="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"airbyte-cdk"},"Airbyte CDK"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte"},"Airbyte")," is a data integration platform for ELT pipelines from APIs, databases & files to warehouses & lakes. It has the largest catalog of ELT connectors to data warehouses and databases.")),(0,r.kt)("p",null,"A lot of source connectors are implemented using the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.airbyte.com/connector-development/cdk-python/"},"Airbyte CDK"),". This loader allows to run any of these connectors and return the data as documents."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"First, you need to install the ",(0,r.kt)("inlineCode",{parentName:"p"},"airbyte-cdk")," python package."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"#!pip install airbyte-cdk\n")),(0,r.kt)("p",null,"Then, either install an existing connector from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte/tree/master/airbyte-integrations/connectors"},"Airbyte Github repository")," or create your own connector using the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.airbyte.io/connector-development/connector-development"},"Airbyte CDK"),"."),(0,r.kt)("p",null,"For example, to install the Github connector, run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#!pip install "source_github@git+https://github.com/airbytehq/airbyte.git@master#subdirectory=airbyte-integrations/connectors/source-github"\n')),(0,r.kt)("p",null,"Some sources are also published as regular packages on PyPI"),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Now you can create an ",(0,r.kt)("inlineCode",{parentName:"p"},"AirbyteCDKLoader")," based on the imported source. It takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," object that's passed to the connector. You also have to pick the stream you want to retrieve records from by name (",(0,r.kt)("inlineCode",{parentName:"p"},"stream_name"),"). Check the connectors documentation page and spec definition for more information on the config object and available streams. For the Github connectors these are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-github/source_github/spec.json"},"https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-github/source_github/spec.json"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.airbyte.com/integrations/sources/github/"},"https://docs.airbyte.com/integrations/sources/github/"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "AirbyteCDKLoader", "source": "langchain.document_loaders.airbyte", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.airbyte.AirbyteCDKLoader.html", "title": "Airbyte CDK"}]--\x3e\nfrom langchain.document_loaders.airbyte import AirbyteCDKLoader\nfrom source_github.source import SourceGithub # plug in your own source here\n\nconfig = {\n    # your github configuration\n    "credentials": {\n        "api_url": "api.github.com",\n        "personal_access_token": "<token>"\n    },\n    "repository": "<repo>",\n    "start_date": "<date from which to start retrieving records from in ISO format, e.g. 2020-10-20T00:00:00Z>"\n}\n\nissues_loader = AirbyteCDKLoader(source_class=SourceGithub, config=config, stream_name="issues")\n')),(0,r.kt)("p",null,"Now you can load documents the usual way"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"docs = issues_loader.load()\n")),(0,r.kt)("p",null,"As ",(0,r.kt)("inlineCode",{parentName:"p"},"load")," returns a list, it will block until all documents are loaded. To have better control over this process, you can also you the ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy_load")," method which returns an iterator instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"docs_iterator = issues_loader.lazy_load()\n")),(0,r.kt)("p",null,"Keep in mind that by default the page content is empty and the metadata object contains all the information from the record. To create documents in a different, pass in a record_handler function when creating the loader:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "Document", "source": "langchain.docstore.document", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html", "title": "Airbyte CDK"}]--\x3e\nfrom langchain.docstore.document import Document\n\ndef handle_record(record, id):\n    return Document(page_content=record.data["title"] + "\\n" + (record.data["body"] or ""), metadata=record.data)\n\nissues_loader = AirbyteCDKLoader(source_class=SourceGithub, config=config, stream_name="issues", record_handler=handle_record)\n\ndocs = issues_loader.load()\n')),(0,r.kt)("h2",{id:"incremental-loads"},"Incremental loads"),(0,r.kt)("p",null,"Some streams allow incremental loading, this means the source keeps track of synced records and won't load them again. This is useful for sources that have a high volume of data and are updated frequently."),(0,r.kt)("p",null,"To take advantage of this, store the ",(0,r.kt)("inlineCode",{parentName:"p"},"last_state")," property of the loader and pass it in when creating the loader again. This will ensure that only new records are loaded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'last_state = issues_loader.last_state # store safely\n\nincremental_issue_loader = AirbyteCDKLoader(source_class=SourceGithub, config=config, stream_name="issues", state=last_state)\n\nnew_docs = incremental_issue_loader.load()\n')))}p.isMDXComponent=!0}}]);