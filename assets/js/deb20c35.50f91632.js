"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[91963],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>h});var n=t(67294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function r(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),m=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=m(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=m(t),g=l,h=c["".concat(s,".").concat(g)]||c[g]||d[g]||o;return t?n.createElement(h,i(i({ref:a},p),{},{components:t})):n.createElement(h,i({ref:a},p))}));function h(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=g;var r={};for(var s in a)hasOwnProperty.call(a,s)&&(r[s]=a[s]);r.originalType=e,r[c]="string"==typeof e?e:l,i[1]=r;for(var m=2;m<o;m++)i[m]=t[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},28927:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>m});var n=t(87462),l=(t(67294),t(3905));const o={},i="MLflow AI Gateway",r={unversionedId:"integrations/providers/mlflow_ai_gateway",id:"integrations/providers/mlflow_ai_gateway",title:"MLflow AI Gateway",description:"The MLflow AI Gateway service is a powerful tool designed to streamline the usage and management of various large",source:"@site/docs/integrations/providers/mlflow_ai_gateway.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/mlflow_ai_gateway",permalink:"/langchain/docs/integrations/providers/mlflow_ai_gateway",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Minimax",permalink:"/langchain/docs/integrations/providers/minimax"},next:{title:"MLflow",permalink:"/langchain/docs/integrations/providers/mlflow_tracking"}},s={},m=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Example provided by <code>MLflow</code>",id:"example-provided-by-mlflow",level:2},{value:"Completions Example",id:"completions-example",level:2},{value:"Embeddings Example",id:"embeddings-example",level:2},{value:"Chat Example",id:"chat-example",level:2},{value:"Databricks MLflow AI Gateway",id:"databricks-mlflow-ai-gateway",level:2}],p={toc:m},c="wrapper";function d(e){let{components:a,...t}=e;return(0,l.kt)(c,(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"mlflow-ai-gateway"},"MLflow AI Gateway"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://www.mlflow.org/docs/latest/gateway/index.html"},"The MLflow AI Gateway")," service is a powerful tool designed to streamline the usage and management of various large\nlanguage model (LLM) providers, such as OpenAI and Anthropic, within an organization. It offers a high-level interface\nthat simplifies the interaction with these services by providing a unified endpoint to handle specific LLM related requests.\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://mlflow.org/docs/latest/gateway/index.html"},"the MLflow AI Gateway documentation")," for more details.")),(0,l.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,l.kt)("p",null,"Install ",(0,l.kt)("inlineCode",{parentName:"p"},"mlflow")," with MLflow AI Gateway dependencies:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"pip install 'mlflow[gateway]'\n")),(0,l.kt)("p",null,"Set the OpenAI API key as an environment variable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"export OPENAI_API_KEY=...\n")),(0,l.kt)("p",null,"Create a configuration file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"routes:\n  - name: completions\n    route_type: llm/v1/completions\n    model:\n      provider: openai\n      name: text-davinci-003\n      config:\n        openai_api_key: $OPENAI_API_KEY\n\n  - name: embeddings\n    route_type: llm/v1/embeddings\n    model:\n      provider: openai\n      name: text-embedding-ada-002\n      config:\n        openai_api_key: $OPENAI_API_KEY\n")),(0,l.kt)("p",null,"Start the Gateway server:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"mlflow gateway start --config-path /path/to/config.yaml\n")),(0,l.kt)("h2",{id:"example-provided-by-mlflow"},"Example provided by ",(0,l.kt)("inlineCode",{parentName:"h2"},"MLflow")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"mlflow.langchain")," module provides an API for logging and loading ",(0,l.kt)("inlineCode",{parentName:"p"},"LangChain")," models.\nThis module exports multivariate LangChain models in the langchain flavor and univariate LangChain\nmodels in the pyfunc flavor.")),(0,l.kt)("p",null,"See the ",(0,l.kt)("a",{parentName:"p",href:"https://www.mlflow.org/docs/latest/python_api/mlflow.langchain.html"},"API documentation and examples"),"."),(0,l.kt)("h2",{id:"completions-example"},"Completions Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MlflowAIGateway", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.mlflow_ai_gateway.MlflowAIGateway.html", "title": "MLflow AI Gateway"}]--\x3e\nimport mlflow\nfrom langchain import LLMChain, PromptTemplate\nfrom langchain.llms import MlflowAIGateway\n\ngateway = MlflowAIGateway(\n    gateway_uri="http://127.0.0.1:5000",\n    route="completions",\n    params={\n        "temperature": 0.0,\n        "top_p": 0.1,\n    },\n)\n\nllm_chain = LLMChain(\n    llm=gateway,\n    prompt=PromptTemplate(\n        input_variables=["adjective"],\n        template="Tell me a {adjective} joke",\n    ),\n)\nresult = llm_chain.run(adjective="funny")\nprint(result)\n\nwith mlflow.start_run():\n    model_info = mlflow.langchain.log_model(chain, "model")\n\nmodel = mlflow.pyfunc.load_model(model_info.model_uri)\nprint(model.predict([{"adjective": "funny"}]))\n')),(0,l.kt)("h2",{id:"embeddings-example"},"Embeddings Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MlflowAIGatewayEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.mlflow_gateway.MlflowAIGatewayEmbeddings.html", "title": "MLflow AI Gateway"}]--\x3e\nfrom langchain.embeddings import MlflowAIGatewayEmbeddings\n\nembeddings = MlflowAIGatewayEmbeddings(\n    gateway_uri="http://127.0.0.1:5000",\n    route="embeddings",\n)\n\nprint(embeddings.embed_query("hello"))\nprint(embeddings.embed_documents(["hello"]))\n')),(0,l.kt)("h2",{id:"chat-example"},"Chat Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatMLflowAIGateway", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.mlflow_ai_gateway.ChatMLflowAIGateway.html", "title": "MLflow AI Gateway"}, {"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "MLflow AI Gateway"}, {"imported": "SystemMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.SystemMessage.html", "title": "MLflow AI Gateway"}]--\x3e\nfrom langchain.chat_models import ChatMLflowAIGateway\nfrom langchain.schema import HumanMessage, SystemMessage\n\nchat = ChatMLflowAIGateway(\n    gateway_uri="http://127.0.0.1:5000",\n    route="chat",\n    params={\n        "temperature": 0.1\n    }\n)\n\nmessages = [\n    SystemMessage(\n        content="You are a helpful assistant that translates English to French."\n    ),\n    HumanMessage(\n        content="Translate this sentence from English to French: I love programming."\n    ),\n]\nprint(chat(messages))\n')),(0,l.kt)("h2",{id:"databricks-mlflow-ai-gateway"},"Databricks MLflow AI Gateway"),(0,l.kt)("p",null,"Databricks MLflow AI Gateway is in private preview.\nPlease contact a Databricks representative to enroll in the preview."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MlflowAIGateway", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.mlflow_ai_gateway.MlflowAIGateway.html", "title": "MLflow AI Gateway"}]--\x3e\nfrom langchain import LLMChain, PromptTemplate\nfrom langchain.llms import MlflowAIGateway\n\ngateway = MlflowAIGateway(\n    gateway_uri="databricks",\n    route="completions",\n)\n\nllm_chain = LLMChain(\n    llm=gateway,\n    prompt=PromptTemplate(\n        input_variables=["adjective"],\n        template="Tell me a {adjective} joke",\n    ),\n)\nresult = llm_chain.run(adjective="funny")\nprint(result)\n')))}d.isMDXComponent=!0}}]);