"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[19571],{3905:(e,t,a)=>{a.d(t,{Zo:()=>i,kt:()=>g});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},i=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),c=m(a),u=o,g=c["".concat(l,".").concat(u)]||c[u]||h[u]||r;return a?n.createElement(g,p(p({ref:t},i),{},{components:a})):n.createElement(g,p({ref:t},i))}));function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,p=new Array(r);p[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,p[1]=s;for(var m=2;m<r;m++)p[m]=a[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},98922:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var n=a(87462),o=(a(67294),a(3905));const r={},p="OpenAI",s={unversionedId:"integrations/chat/openai",id:"integrations/chat/openai",title:"OpenAI",description:"This notebook covers how to get started with OpenAI chat models.",source:"@site/docs/integrations/chat/openai.md",sourceDirName:"integrations/chat",slug:"/integrations/chat/openai",permalink:"/langchain/docs/integrations/chat/openai",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Ollama",permalink:"/langchain/docs/integrations/chat/ollama"},next:{title:"PromptLayer ChatOpenAI",permalink:"/langchain/docs/integrations/chat/promptlayer_chatopenai"}},l={},m=[{value:"Fine-tuning",id:"fine-tuning",level:2}],i=(c="CodeOutputBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const h={toc:m},u="wrapper";function g(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"openai"},"OpenAI"),(0,o.kt)("p",null,"This notebook covers how to get started with OpenAI chat models."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "OpenAI"}, {"imported": "ChatPromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html", "title": "OpenAI"}, {"imported": "SystemMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.SystemMessagePromptTemplate.html", "title": "OpenAI"}, {"imported": "AIMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.AIMessagePromptTemplate.html", "title": "OpenAI"}, {"imported": "HumanMessagePromptTemplate", "source": "langchain.prompts.chat", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.HumanMessagePromptTemplate.html", "title": "OpenAI"}, {"imported": "AIMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.AIMessage.html", "title": "OpenAI"}, {"imported": "HumanMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html", "title": "OpenAI"}, {"imported": "SystemMessage", "source": "langchain.schema", "docs": "https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.SystemMessage.html", "title": "OpenAI"}]--\x3e\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts.chat import (\n    ChatPromptTemplate,\n    SystemMessagePromptTemplate,\n    AIMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\nfrom langchain.schema import AIMessage, HumanMessage, SystemMessage\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chat = ChatOpenAI(temperature=0)\n")),(0,o.kt)("p",null,"The above cell assumes that your OpenAI API key is set in your environment variables. If you would rather manually specify your API key and/or organization ID, use the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat = ChatOpenAI(temperature=0, openai_api_key="YOUR_API_KEY", openai_organization="YOUR_ORGANIZATION_ID")\n')),(0,o.kt)("p",null,"Remove the openai_organization parameter should it not apply to you."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'messages = [\n    SystemMessage(\n        content="You are a helpful assistant that translates English to French."\n    ),\n    HumanMessage(\n        content="Translate this sentence from English to French. I love programming."\n    ),\n]\nchat(messages)\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'adore la programmation.", additional_kwargs={}, example=False)\n'))),(0,o.kt)("p",null,"You can make use of templating by using a ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplate"),". You can build a ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate")," from one or more ",(0,o.kt)("inlineCode",{parentName:"p"},"MessagePromptTemplates"),". You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"format_prompt")," -- this returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptValue"),", which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model."),(0,o.kt)("p",null,"For convenience, there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"from_template")," method exposed on the template. If you were to use this template, this is what it would look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template = (\n    "You are a helpful assistant that translates {input_language} to {output_language}."\n)\nsystem_message_prompt = SystemMessagePromptTemplate.from_template(template)\nhuman_template = "{text}"\nhuman_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chat_prompt = ChatPromptTemplate.from_messages(\n    [system_message_prompt, human_message_prompt]\n)\n\n# get a chat completion from the formatted messages\nchat(\n    chat_prompt.format_prompt(\n        input_language="English", output_language="French", text="I love programming."\n    ).to_messages()\n)\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'adore la programmation.", additional_kwargs={}, example=False)\n'))),(0,o.kt)("h2",{id:"fine-tuning"},"Fine-tuning"),(0,o.kt)("p",null,"You can call fine-tuned OpenAI models by passing in your corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"modelName")," parameter."),(0,o.kt)("p",null,"This generally takes the form of ",(0,o.kt)("inlineCode",{parentName:"p"},"ft:{OPENAI_MODEL_NAME}:{ORG_NAME}::{MODEL_ID}"),". For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'fine_tuned_model = ChatOpenAI(temperature=0, model_name="ft:gpt-3.5-turbo-0613:langchain::7qTVM5AR")\n\nfine_tuned_model(messages)\n')),(0,o.kt)(i,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    AIMessage(content="J\'adore la programmation.", additional_kwargs={}, example=False)\n'))))}g.isMDXComponent=!0}}]);