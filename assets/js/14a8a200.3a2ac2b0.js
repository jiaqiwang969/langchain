"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[57148],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var a=n(67294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var c=a.createContext({}),s=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},p=function(t){var e=s(t.components);return a.createElement(c.Provider,{value:e},t.children)},m="mdxType",h={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,o=t.originalType,c=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=s(n),d=l,g=m["".concat(c,".").concat(d)]||m[d]||h[d]||o;return n?a.createElement(g,r(r({ref:e},p),{},{components:n})):a.createElement(g,r({ref:e},p))}));function g(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[m]="string"==typeof t?t:l,r[1]=i;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94388:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),l=(n(67294),n(3905));const o={},r="LLMonitor",i={unversionedId:"integrations/callbacks/llmonitor",id:"integrations/callbacks/llmonitor",title:"LLMonitor",description:"LLMonitor is an open-source observability platform that provides cost tracking, user tracking and powerful agent tracing.",source:"@site/docs/integrations/callbacks/llmonitor.md",sourceDirName:"integrations/callbacks",slug:"/integrations/callbacks/llmonitor",permalink:"/langchain/docs/integrations/callbacks/llmonitor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Label Studio",permalink:"/langchain/docs/integrations/callbacks/labelstudio"},next:{title:"PromptLayer",permalink:"/langchain/docs/integrations/callbacks/promptlayer"}},c={},s=[{value:"Setup",id:"setup",level:2},{value:"Usage with LLM/Chat models",id:"usage-with-llmchat-models",level:2},{value:"Usage with agents",id:"usage-with-agents",level:2},{value:"Support",id:"support",level:2}],p={toc:s},m="wrapper";function h(t){let{components:e,...n}=t;return(0,l.kt)(m,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"llmonitor"},"LLMonitor"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://llmonitor.com"},"LLMonitor")," is an open-source observability platform that provides cost tracking, user tracking and powerful agent tracing."),(0,l.kt)("video",{controls:!0,width:"100%"},(0,l.kt)("source",{src:"https://llmonitor.com/videos/demo-annotated.mp4"})),(0,l.kt)("h2",{id:"setup"},"Setup"),(0,l.kt)("p",null,"Create an account on ",(0,l.kt)("a",{parentName:"p",href:"https://llmonitor.com"},"llmonitor.com"),", create an ",(0,l.kt)("inlineCode",{parentName:"p"},"App"),", and then copy the associated ",(0,l.kt)("inlineCode",{parentName:"p"},"tracking id"),".\nOnce you have it, set it as an environment variable by running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'export LLMONITOR_APP_ID="..."\n')),(0,l.kt)("p",null,"If you'd prefer not to set an environment variable, you can pass the key directly when initializing the callback handler:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "LLMonitorCallbackHandler", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.llmonitor_callback.LLMonitorCallbackHandler.html", "title": "LLMonitor"}]--\x3e\nfrom langchain.callbacks import LLMonitorCallbackHandler\n\nhandler = LLMonitorCallbackHandler(app_id="...")\n')),(0,l.kt)("h2",{id:"usage-with-llmchat-models"},"Usage with LLM/Chat models"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "LLMonitor"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "LLMonitor"}, {"imported": "LLMonitorCallbackHandler", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.llmonitor_callback.LLMonitorCallbackHandler.html", "title": "LLMonitor"}]--\x3e\nfrom langchain.llms import OpenAI\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.callbacks import LLMonitorCallbackHandler\n\nhandler = LLMonitorCallbackHandler(app_id="...")\n\nllm = OpenAI(\n    callbacks=[handler],\n)\n\nchat = ChatOpenAI(\n    callbacks=[handler],\n    metadata={"userId": "123"},  # you can assign user ids to models in the metadata\n)\n')),(0,l.kt)("h2",{id:"usage-with-agents"},"Usage with agents"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "load_tools", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.load_tools.load_tools.html", "title": "LLMonitor"}, {"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "LLMonitor"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "LLMonitor"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "LLMonitor"}, {"imported": "LLMonitorCallbackHandler", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.llmonitor_callback.LLMonitorCallbackHandler.html", "title": "LLMonitor"}]--\x3e\nfrom langchain.agents import load_tools, initialize_agent, AgentType\nfrom langchain.llms import OpenAI\nfrom langchain.callbacks import LLMonitorCallbackHandler\n\nhandler = LLMonitorCallbackHandler(app_id="...")\n\nllm = OpenAI(temperature=0)\ntools = load_tools(["serpapi", "llm-math"], llm=llm)\nagent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION)\nagent.run(\n    "Who is Leo DiCaprio\'s girlfriend? What is her current age raised to the 0.43 power?",\n    callbacks=[handler],\n    metadata={\n        "agentName": "Leo DiCaprio\'s girlfriend",  # you can assign a custom agent in the metadata\n    },\n)\n')),(0,l.kt)("h2",{id:"support"},"Support"),(0,l.kt)("p",null,"For any question or issue with integration you can reach out to the LLMonitor team on ",(0,l.kt)("a",{parentName:"p",href:"http://discord.com/invite/8PafSG58kK"},"Discord")," or via ",(0,l.kt)("a",{parentName:"p",href:"mailto:vince@llmonitor.com"},"email"),"."))}h.isMDXComponent=!0}}]);