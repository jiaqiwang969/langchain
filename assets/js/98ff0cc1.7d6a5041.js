"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[64143],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),g=r,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},14962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o="String Distance",s={unversionedId:"guides/evaluation/string/string_distance",id:"guides/evaluation/string/string_distance",title:"String Distance",description:"One of the simplest ways to compare an LLM or chain's string output against a reference label is by using string distance measurements such as Levenshtein or postfix distance.  This can be used alongside approximate/fuzzy matching criteria for very basic unit testing.",source:"@site/docs/guides/evaluation/string/string_distance.md",sourceDirName:"guides/evaluation/string",slug:"/guides/evaluation/string/string_distance",permalink:"/langchain/docs/guides/evaluation/string/string_distance",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Embedding Distance",permalink:"/langchain/docs/guides/evaluation/string/embedding_distance"},next:{title:"Comparison Evaluators",permalink:"/langchain/docs/guides/evaluation/comparison/"}},c={},l=[{value:"Configure the String Distance Metric",id:"configure-the-string-distance-metric",level:2}],p=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const d={toc:l},g="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"string-distance"},"String Distance"),(0,r.kt)("p",null,"One of the simplest ways to compare an LLM or chain's string output against a reference label is by using string distance measurements such as Levenshtein or postfix distance.  This can be used alongside approximate/fuzzy matching criteria for very basic unit testing."),(0,r.kt)("p",null,"This can be accessed using the ",(0,r.kt)("inlineCode",{parentName:"p"},"string_distance")," evaluator, which uses distance metric's from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/maxbachmann/RapidFuzz"},"rapidfuzz")," library."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," The returned scores are ",(0,r.kt)("em",{parentName:"p"},"distances"),', meaning lower is typically "better".'),(0,r.kt)("p",null,"For more information, check out the reference docs for the ",(0,r.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/evaluation/langchain.evaluation.string_distance.base.StringDistanceEvalChain.html#langchain.evaluation.string_distance.base.StringDistanceEvalChain"},"StringDistanceEvalChain")," for more info."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# %pip install rapidfuzz\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "load_evaluator", "source": "langchain.evaluation", "docs": "https://api.python.langchain.com/en/latest/evaluation/langchain.evaluation.loading.load_evaluator.html", "title": "String Distance"}]--\x3e\nfrom langchain.evaluation import load_evaluator\n\nevaluator = load_evaluator("string_distance")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'evaluator.evaluate_strings(\n    prediction="The job is completely done.",\n    reference="The job is done",\n)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'score': 0.11555555555555552}\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# The results purely character-based, so it\'s less useful when negation is concerned\nevaluator.evaluate_strings(\n    prediction="The job is done.",\n    reference="The job isn\'t done",\n)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'score': 0.0724999999999999}\n"))),(0,r.kt)("h2",{id:"configure-the-string-distance-metric"},"Configure the String Distance Metric"),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"StringDistanceEvalChain")," uses  levenshtein distance, but it also supports other string distance algorithms. Configure using the ",(0,r.kt)("inlineCode",{parentName:"p"},"distance")," argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "StringDistance", "source": "langchain.evaluation", "docs": "https://api.python.langchain.com/en/latest/evaluation/langchain.evaluation.string_distance.base.StringDistance.html", "title": "String Distance"}]--\x3e\nfrom langchain.evaluation import StringDistance\n\nlist(StringDistance)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [<StringDistance.DAMERAU_LEVENSHTEIN: 'damerau_levenshtein'>,\n     <StringDistance.LEVENSHTEIN: 'levenshtein'>,\n     <StringDistance.JARO: 'jaro'>,\n     <StringDistance.JARO_WINKLER: 'jaro_winkler'>]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'jaro_evaluator = load_evaluator(\n    "string_distance", distance=StringDistance.JARO\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'jaro_evaluator.evaluate_strings(\n    prediction="The job is completely done.",\n    reference="The job is done",\n)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'score': 0.19259259259259254}\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'jaro_evaluator.evaluate_strings(\n    prediction="The job is done.",\n    reference="The job isn\'t done",\n)\n')),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    {'score': 0.12083333333333324}\n"))))}m.isMDXComponent=!0}}]);