"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,m=p["".concat(c,".").concat(d)]||p[d]||h[d]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={},i="Cite sources",s={unversionedId:"use_cases/question_answering/how_to/qa_citations",id:"use_cases/question_answering/how_to/qa_citations",title:"Cite sources",description:"This notebook shows how to use OpenAI functions ability to extract citations from text.",source:"@site/docs/use_cases/question_answering/how_to/qa_citations.md",sourceDirName:"use_cases/question_answering/how_to",slug:"/use_cases/question_answering/how_to/qa_citations",permalink:"/langchain/docs/use_cases/question_answering/how_to/qa_citations",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Multiple Retrieval Sources",permalink:"/langchain/docs/use_cases/question_answering/how_to/multiple_retrieval"},next:{title:"QA over in-memory documents",permalink:"/langchain/docs/use_cases/question_answering/how_to/question_answering"}},c={},l=[],u=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var p;const h={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cite-sources"},"Cite sources"),(0,r.kt)("p",null,"This notebook shows how to use OpenAI functions ability to extract citations from text."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chains import create_citation_fuzzy_match_chain\nfrom langchain.chat_models import ChatOpenAI\n")),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    /Users/harrisonchase/.pyenv/versions/3.9.1/envs/langchain/lib/python3.9/site-packages/deeplake/util/check_latest_version.py:32: UserWarning: A newer version of deeplake (3.6.4) is available. It's recommended that you update to the latest version using `pip install -U deeplake`.\n      warnings.warn(\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'question = "What did the author do during college?"\ncontext = """\nMy name is Jason Liu, and I grew up in Toronto Canada but I was born in China.\nI went to an arts highschool but in university I studied Computational Mathematics and physics. \nAs part of coop I worked at many companies including Stitchfix, Facebook.\nI also started the Data Science club at the University of Waterloo and I was the president of the club for 2 years.\n"""\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'llm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = create_citation_fuzzy_match_chain(llm)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"result = chain.run(question=question, context=context)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"print(result)\n")),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    question='What did the author do during college?' answer=[FactWithEvidence(fact='The author studied Computational Mathematics and physics in university.', substring_quote=['in university I studied Computational Mathematics and physics']), FactWithEvidence(fact='The author started the Data Science club at the University of Waterloo and was the president of the club for 2 years.', substring_quote=['started the Data Science club at the University of Waterloo', 'president of the club for 2 years'])]\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def highlight(text, span):\n    return (\n        "..."\n        + text[span[0] - 20 : span[0]]\n        + "*"\n        + "\\033[91m"\n        + text[span[0] : span[1]]\n        + "\\033[0m"\n        + "*"\n        + text[span[1] : span[1] + 20]\n        + "..."\n    )\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'for fact in result.answer:\n    print("Statement:", fact.fact)\n    for span in fact.get_spans(context):\n        print("Citation:", highlight(context, span))\n    print()\n')),(0,r.kt)(u,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Statement: The author studied Computational Mathematics and physics in university.\n    Citation: ...arts highschool but *in university I studied Computational Mathematics and physics*. \n    As part of coop I...\n    \n    Statement: The author started the Data Science club at the University of Waterloo and was the president of the club for 2 years.\n    Citation: ...x, Facebook.\n    I also *started the Data Science club at the University of Waterloo* and I was the presi...\n    Citation: ...erloo and I was the *president of the club for 2 years*.\n    ...\n    \n"))))}m.isMDXComponent=!0}}]);