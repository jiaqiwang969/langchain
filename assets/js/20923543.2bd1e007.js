"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[12287],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},89147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={},i="Jina",l={unversionedId:"integrations/providers/jina",id:"integrations/providers/jina",title:"Jina",description:"This page covers how to use the Jina ecosystem within LangChain.",source:"@site/docs/integrations/providers/jina.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/jina",permalink:"/langchain/docs/integrations/providers/jina",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Infino",permalink:"/langchain/docs/integrations/providers/infino"},next:{title:"LanceDB",permalink:"/langchain/docs/integrations/providers/lancedb"}},s={},p=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Wrappers",id:"wrappers",level:2},{value:"Embeddings",id:"embeddings",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Usage",id:"usage",level:3}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jina"},"Jina"),(0,r.kt)("p",null,"This page covers how to use the Jina ecosystem within LangChain.\nIt is broken into two parts: installation and setup, and then references to specific Jina wrappers."),(0,r.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install the Python SDK with ",(0,r.kt)("inlineCode",{parentName:"li"},"pip install jina")),(0,r.kt)("li",{parentName:"ul"},"Get a Jina AI Cloud auth token from ",(0,r.kt)("a",{parentName:"li",href:"https://cloud.jina.ai/settings/tokens"},"here")," and set it as an environment variable (",(0,r.kt)("inlineCode",{parentName:"li"},"JINA_AUTH_TOKEN"),")")),(0,r.kt)("h2",{id:"wrappers"},"Wrappers"),(0,r.kt)("h3",{id:"embeddings"},"Embeddings"),(0,r.kt)("p",null,"There exists a Jina Embeddings wrapper, which you can access with "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.embeddings import JinaEmbeddings\n")),(0,r.kt)("p",null,"For a more detailed walkthrough of this, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/integrations/text_embedding/jina.html"},"this notebook")),(0,r.kt)("h2",{id:"deployment"},"Deployment"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/jina-ai/langchain-serve"},"Langchain-serve"),", powered by Jina, helps take LangChain apps to production with easy to use REST/WebSocket APIs and Slack bots. "),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Install the package from PyPI. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install langchain-serve\n")),(0,r.kt)("p",null,"Wrap your LangChain app with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@serving")," decorator. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# app.py\nfrom lcserve import serving\n\n@serving\ndef ask(input: str) -> str:\n    from langchain import LLMChain, OpenAI\n    from langchain.agents import AgentExecutor, ZeroShotAgent\n    \n    tools = [...] # list of tools\n    prompt = ZeroShotAgent.create_prompt(\n        tools, input_variables=["input", "agent_scratchpad"],\n    )\n    llm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)\n    agent = ZeroShotAgent(\n        llm_chain=llm_chain, allowed_tools=[tool.name for tool in tools]\n    )\n    agent_executor = AgentExecutor.from_agent_and_tools(\n        agent=agent, \n        tools=tools, \n        verbose=True,\n    )\n    return agent_executor.run(input)\n')),(0,r.kt)("p",null,"Deploy on Jina AI Cloud with ",(0,r.kt)("inlineCode",{parentName:"p"},"lc-serve deploy jcloud app"),". Once deployed, we can send a POST request to the API endpoint to get a response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X \'POST\' \'https://<your-app>.wolf.jina.ai/ask\' \\\n -d \'{\n  "input": "Your Quesion here?",\n  "envs": {\n     "OPENAI_API_KEY": "sk-***"\n  }\n}\'\n')),(0,r.kt)("p",null,"You can also self-host the app on your infrastructure with Docker-compose or Kubernetes. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jina-ai/langchain-serve#-self-host-llm-apps-with-docker-compose-or-kubernetes"},"here")," for more details."),(0,r.kt)("p",null,"Langchain-serve also allows to deploy the apps with WebSocket APIs and Slack Bots both on ",(0,r.kt)("a",{parentName:"p",href:"https://cloud.jina.ai/"},"Jina AI Cloud")," or self-hosted infrastructure."))}d.isMDXComponent=!0}}]);