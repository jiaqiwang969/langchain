"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[48323],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),g=r,h=d["".concat(p,".").concat(g)]||d[g]||u[g]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},29802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},i="Datadog Tracing",l={unversionedId:"integrations/providers/datadog",id:"integrations/providers/datadog",title:"Datadog Tracing",description:"ddtrace is a Datadog application performance monitoring (APM) library which provides an integration to monitor your LangChain application.",source:"@site/docs/integrations/providers/datadog.mdx",sourceDirName:"integrations/providers",slug:"/integrations/providers/datadog",permalink:"/langchain/docs/integrations/providers/datadog",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Databricks",permalink:"/langchain/docs/integrations/providers/databricks"},next:{title:"Datadog Logs",permalink:"/langchain/docs/integrations/providers/datadog_logs"}},p={},s=[{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Log Prompt &amp; Completion Sampling",id:"log-prompt--completion-sampling",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"datadog-tracing"},"Datadog Tracing"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/DataDog/dd-trace-py"},"ddtrace")," is a Datadog application performance monitoring (APM) library which provides an integration to monitor your LangChain application.")),(0,r.kt)("p",null,"Key features of the ddtrace integration for LangChain:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Traces: Capture LangChain requests, parameters, prompt-completions, and help visualize LangChain operations."),(0,r.kt)("li",{parentName:"ul"},"Metrics: Capture LangChain request latency, errors, and token/cost usage (for OpenAI LLMs and chat models)."),(0,r.kt)("li",{parentName:"ul"},"Logs: Store prompt completion data for each LangChain operation."),(0,r.kt)("li",{parentName:"ul"},"Dashboard: Combine metrics, logs, and trace data into a single plane to monitor LangChain requests."),(0,r.kt)("li",{parentName:"ul"},"Monitors: Provide alerts in response to spikes in LangChain request latency or error rate.")),(0,r.kt)("p",null,"Note: The ddtrace LangChain integration currently provides tracing for LLMs, chat models, Text Embedding Models, Chains, and Vectorstores."),(0,r.kt)("h2",{id:"installation-and-setup"},"Installation and Setup"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Enable APM and StatsD in your Datadog Agent, along with a Datadog API key. For example, in Docker:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker run -d --cgroupns host \\\n              --pid host \\\n              -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n              -v /proc/:/host/proc/:ro \\\n              -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \\\n              -e DD_API_KEY=<DATADOG_API_KEY> \\\n              -p 127.0.0.1:8126:8126/tcp \\\n              -p 127.0.0.1:8125:8125/udp \\\n              -e DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true \\\n              -e DD_APM_ENABLED=true \\\n              gcr.io/datadoghq/agent:latest\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Install the Datadog APM Python library.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pip install ddtrace>=1.17\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"The LangChain integration can be enabled automatically when you prefix your LangChain Python application command with ",(0,r.kt)("inlineCode",{parentName:"li"},"ddtrace-run"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'DD_SERVICE="my-service" DD_ENV="staging" DD_API_KEY=<DATADOG_API_KEY> ddtrace-run python <your-app>.py\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": If the Agent is using a non-default hostname or port, be sure to also set ",(0,r.kt)("inlineCode",{parentName:"p"},"DD_AGENT_HOST"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DD_TRACE_AGENT_PORT"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"DD_DOGSTATSD_PORT"),"."),(0,r.kt)("p",null,"Additionally, the LangChain integration can be enabled programmatically by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"patch_all()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"patch(langchain=True)")," before the first import of ",(0,r.kt)("inlineCode",{parentName:"p"},"langchain")," in your application."),(0,r.kt)("p",null,"Note that using ",(0,r.kt)("inlineCode",{parentName:"p"},"ddtrace-run")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"patch_all()")," will also enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"requests")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"aiohttp")," integrations which trace HTTP requests to LLM providers, as well as the ",(0,r.kt)("inlineCode",{parentName:"p"},"openai")," integration which traces requests to the OpenAI library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from ddtrace import config, patch\n\n# Note: be sure to configure the integration before calling ``patch()``!\n# e.g. config.langchain["logs_enabled"] = True\n\npatch(langchain=True)\n\n# to trace synchronous HTTP requests\n# patch(langchain=True, requests=True)\n\n# to trace asynchronous HTTP requests (to the OpenAI library)\n# patch(langchain=True, aiohttp=True)\n\n# to include underlying OpenAI spans from the OpenAI integration\n# patch(langchain=True, openai=True)patch_all\n')),(0,r.kt)("p",null,"See the ","[APM Python library documentation][https://ddtrace.readthedocs.io/en/stable/installation_quickstart.html]"," for more advanced usage."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"See the ","[APM Python library documentation][https://ddtrace.readthedocs.io/en/stable/integrations.html#langchain]"," for all the available configuration options."),(0,r.kt)("h3",{id:"log-prompt--completion-sampling"},"Log Prompt & Completion Sampling"),(0,r.kt)("p",null,"To enable log prompt and completion sampling, set the ",(0,r.kt)("inlineCode",{parentName:"p"},"DD_LANGCHAIN_LOGS_ENABLED=1")," environment variable. By default, 10% of traced requests will emit logs containing the prompts and completions."),(0,r.kt)("p",null,"To adjust the log sample rate, see the ","[APM library documentation][https://ddtrace.readthedocs.io/en/stable/integrations.html#langchain]","."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": Logs submission requires ",(0,r.kt)("inlineCode",{parentName:"p"},"DD_API_KEY")," to be specified when running ",(0,r.kt)("inlineCode",{parentName:"p"},"ddtrace-run"),"."),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"Need help? Create an issue on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DataDog/dd-trace-py"},"ddtrace")," or contact ","[Datadog support][https://docs.datadoghq.com/help/]","."))}u.isMDXComponent=!0}}]);