"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[632],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},24176:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},l="Telegram",i={unversionedId:"integrations/document_loaders/telegram",id:"integrations/document_loaders/telegram",title:"Telegram",description:"Telegram Messenger is a globally accessible freemium, cross-platform, encrypted, cloud-based and centralized instant messaging service. The application also provides optional end-to-end encrypted chats and video calling, VoIP, file sharing and several other features.",source:"@site/docs/integrations/document_loaders/telegram.md",sourceDirName:"integrations/document_loaders",slug:"/integrations/document_loaders/telegram",permalink:"/langchain/docs/integrations/document_loaders/telegram",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Subtitle",permalink:"/langchain/docs/integrations/document_loaders/subtitle"},next:{title:"Tencent COS Directory",permalink:"/langchain/docs/integrations/document_loaders/tencent_cos_directory"}},c={},s=[],p=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const m={toc:s},u="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"telegram"},"Telegram"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://web.telegram.org/a/"},"Telegram Messenger")," is a globally accessible freemium, cross-platform, encrypted, cloud-based and centralized instant messaging service. The application also provides optional end-to-end encrypted chats and video calling, VoIP, file sharing and several other features.")),(0,r.kt)("p",null,"This notebook covers how to load data from ",(0,r.kt)("inlineCode",{parentName:"p"},"Telegram")," into a format that can be ingested into LangChain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "TelegramChatFileLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.telegram.TelegramChatFileLoader.html", "title": "Telegram"}, {"imported": "TelegramChatApiLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.telegram.TelegramChatApiLoader.html", "title": "Telegram"}]--\x3e\nfrom langchain.document_loaders import TelegramChatFileLoader, TelegramChatApiLoader\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'loader = TelegramChatFileLoader("example_data/telegram.json")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"loader.load()\n")),(0,r.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [Document(page_content=\"Henry on 2020-01-01T00:00:02: It's 2020...\\n\\nHenry on 2020-01-01T00:00:04: Fireworks!\\n\\nGrace \xf0\u0178\xa7\xa4 \xf0\u0178\\x8d\u2019 on 2020-01-01T00:00:05: You're a minute late!\\n\\n\", metadata={'source': 'example_data/telegram.json'})]\n"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TelegramChatApiLoader")," loads data directly from any specified chat from Telegram. In order to export the data, you will need to authenticate your Telegram account. "),(0,r.kt)("p",null,"You can get the API_HASH and API_ID from ",(0,r.kt)("a",{parentName:"p",href:"https://my.telegram.org/auth?to=apps"},"https://my.telegram.org/auth?to=apps")),(0,r.kt)("p",null,"chat_entity \u2013 recommended to be the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.telethon.dev/en/stable/concepts/entities.html?highlight=Entity#what-is-an-entity"},"entity")," of a channel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'loader = TelegramChatApiLoader(\n    chat_entity="<CHAT_URL>",  # recommended to use Entity here\n    api_hash="<API HASH >",\n    api_id="<API_ID>",\n    user_name="",  # needed only for caching the session.\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"loader.load()\n")))}g.isMDXComponent=!0}}]);