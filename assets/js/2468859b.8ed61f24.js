"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62473],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),s=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(i.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(i,".").concat(d)]||m[d]||c[d]||a;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[m]="string"==typeof e?e:r,l[1]=p;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},37961:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>f,frontMatter:()=>u,metadata:()=>c,toc:()=>h});var o=n(87462),r=(n(67294),n(3905));const a=(l="CodeOutputBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var l;const p={toc:[]},i="wrapper";function s(e){let{components:t,...n}=e;return(0,r.kt)(i,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.prompts import PromptTemplate\nfrom langchain.prompts import FewShotPromptTemplate\nfrom langchain.prompts.example_selector import LengthBasedExampleSelector\n\n\n# Examples of a pretend task of creating antonyms.\nexamples = [\n    {"input": "happy", "output": "sad"},\n    {"input": "tall", "output": "short"},\n    {"input": "energetic", "output": "lethargic"},\n    {"input": "sunny", "output": "gloomy"},\n    {"input": "windy", "output": "calm"},\n\nexample_prompt = PromptTemplate(\n    input_variables=["input", "output"],\n    template="Input: {input}\\nOutput: {output}",\n)\nexample_selector = LengthBasedExampleSelector(\n    # The examples it has available to choose from.\n    examples=examples, \n    # The PromptTemplate being used to format the examples.\n    example_prompt=example_prompt, \n    # The maximum length that the formatted examples should be.\n    # Length is measured by the get_text_length function below.\n    max_length=25,\n    # The function used to get the length of a string, which is used\n    # to determine which examples to include. It is commented out because\n    # it is provided as a default value if none is specified.\n    # get_text_length: Callable[[str], int] = lambda x: len(re.split("\\n| ", x))\n)\ndynamic_prompt = FewShotPromptTemplate(\n    # We provide an ExampleSelector instead of examples.\n    example_selector=example_selector,\n    example_prompt=example_prompt,\n    prefix="Give the antonym of every input",\n    suffix="Input: {adjective}\\nOutput:", \n    input_variables=["adjective"],\n)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# An example with small input, so it selects all examples.\nprint(dynamic_prompt.format(adjective="big"))\n')),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Give the antonym of every input\n    \n    Input: happy\n    Output: sad\n    \n    Input: tall\n    Output: short\n    \n    Input: energetic\n    Output: lethargic\n    \n    Input: sunny\n    Output: gloomy\n    \n    Input: windy\n    Output: calm\n    \n    Input: big\n    Output:\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# An example with long input, so it selects only one example.\nlong_string = "big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else"\nprint(dynamic_prompt.format(adjective=long_string))\n')),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Give the antonym of every input\n    \n    Input: happy\n    Output: sad\n    \n    Input: big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else\n    Output:\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# You can add an example to an example selector as well.\nnew_example = {"input": "big", "output": "small"}\ndynamic_prompt.example_selector.add_example(new_example)\nprint(dynamic_prompt.format(adjective="enthusiastic"))\n')),(0,r.kt)(a,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    Give the antonym of every input\n    \n    Input: happy\n    Output: sad\n    \n    Input: tall\n    Output: short\n    \n    Input: energetic\n    Output: lethargic\n    \n    Input: sunny\n    Output: gloomy\n    \n    Input: windy\n    Output: calm\n    \n    Input: big\n    Output: small\n    \n    Input: enthusiastic\n    Output:\n"))))}s.isMDXComponent=!0;const u={},m="Select by length",c={unversionedId:"modules/model_io/prompts/example_selectors/length_based",id:"modules/model_io/prompts/example_selectors/length_based",title:"Select by length",description:"This example selector selects which examples to use based on length. This is useful when you are worried about constructing a prompt that will go over the length of the context window. For longer inputs, it will select fewer examples to include, while for shorter inputs it will select more.",source:"@site/docs/modules/model_io/prompts/example_selectors/length_based.mdx",sourceDirName:"modules/model_io/prompts/example_selectors",slug:"/modules/model_io/prompts/example_selectors/length_based",permalink:"/langchain/docs/modules/model_io/prompts/example_selectors/length_based",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom example selector",permalink:"/langchain/docs/modules/model_io/prompts/example_selectors/custom_example_selector"},next:{title:"Select by maximal marginal relevance (MMR)",permalink:"/langchain/docs/modules/model_io/prompts/example_selectors/mmr"}},d={},h=[],g={toc:h},y="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(y,(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"select-by-length"},"Select by length"),(0,r.kt)("p",null,"This example selector selects which examples to use based on length. This is useful when you are worried about constructing a prompt that will go over the length of the context window. For longer inputs, it will select fewer examples to include, while for shorter inputs it will select more."),(0,r.kt)(s,{mdxType:"Example"}))}f.isMDXComponent=!0}}]);