"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[34414],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(t),h=a,u=d["".concat(l,".").concat(h)]||d[h]||c[h]||r;return t?o.createElement(u,i(i({ref:n},m),{},{components:t})):o.createElement(u,i({ref:n},m))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4907:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const r={},i="Infino",s={unversionedId:"integrations/callbacks/infino",id:"integrations/callbacks/infino",title:"Infino",description:"This example shows how one can track the following while calling OpenAI models via LangChain and Infino:",source:"@site/docs/integrations/callbacks/infino.md",sourceDirName:"integrations/callbacks",slug:"/integrations/callbacks/infino",permalink:"/langchain/docs/integrations/callbacks/infino",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Context",permalink:"/langchain/docs/integrations/callbacks/context"},next:{title:"Label Studio",permalink:"/langchain/docs/integrations/callbacks/labelstudio"}},l={},p=[{value:"Initializing",id:"initializing",level:2},{value:"Start Infino server, initialize the Infino client",id:"start-infino-server-initialize-the-infino-client",level:2},{value:"Read the questions dataset",id:"read-the-questions-dataset",level:2},{value:"LangChain OpenAI Q&amp;A; Publish metrics and logs to Infino",id:"langchain-openai-qa-publish-metrics-and-logs-to-infino",level:2},{value:"Create Metric Charts",id:"create-metric-charts",level:2},{value:"Full text query on prompt or prompt outputs.",id:"full-text-query-on-prompt-or-prompt-outputs",level:2},{value:"Stop infino server",id:"stop-infino-server",level:2}],m=(d="CodeOutputBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const c={toc:p},h="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(h,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"infino"},"Infino"),(0,a.kt)("p",null,"This example shows how one can track the following while calling OpenAI models via ",(0,a.kt)("inlineCode",{parentName:"p"},"LangChain")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/infinohq/infino"},"Infino"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"prompt input,"),(0,a.kt)("li",{parentName:"ul"},"response from ",(0,a.kt)("inlineCode",{parentName:"li"},"ChatGPT")," or any other ",(0,a.kt)("inlineCode",{parentName:"li"},"LangChain")," model,"),(0,a.kt)("li",{parentName:"ul"},"latency,"),(0,a.kt)("li",{parentName:"ul"},"errors,"),(0,a.kt)("li",{parentName:"ul"},"number of tokens consumed")),(0,a.kt)("h2",{id:"initializing"},"Initializing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Install necessary dependencies.\npip install infinopy\npip install matplotlib\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Infino"}, {"imported": "InfinoCallbackHandler", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.infino_callback.InfinoCallbackHandler.html", "title": "Infino"}]--\x3e\n# Remove the (1) import sys and sys.path.append(..) and (2) uncomment `!pip install langchain` after merging the PR for Infino/LangChain integration.\nimport sys\n\nsys.path.append("../../../../../langchain")\n\n\nimport datetime as dt\nimport json\nfrom langchain.llms import OpenAI\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as md\nimport os\nimport time\nimport sys\n\nfrom infinopy import InfinoClient\nfrom langchain.callbacks import InfinoCallbackHandler\n')),(0,a.kt)("h2",{id:"start-infino-server-initialize-the-infino-client"},"Start Infino server, initialize the Infino client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Start server using the Infino docker image.\ndocker run --rm --detach --name infino-example -p 3000:3000 infinohq/infino:latest\n\n# Create Infino client.\nclient = InfinoClient()\n")),(0,a.kt)(m,{lang:"bash",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    497a621125800abdd19f57ce7e033349b3cf83ca8cea6a74e8e28433a42ecadd\n"))),(0,a.kt)("h2",{id:"read-the-questions-dataset"},"Read the questions dataset"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# These are a subset of questions from Stanford\'s QA dataset -\n# https://rajpurkar.github.io/SQuAD-explorer/\ndata = """In what country is Normandy located?\nWhen were the Normans in Normandy?\nFrom which countries did the Norse originate?\nWho was the Norse leader?\nWhat century did the Normans first gain their separate identity?\nWho gave their name to Normandy in the 1000\'s and 1100\'s\nWhat is France a region of?\nWho did King Charles III swear fealty to?\nWhen did the Frankish identity emerge?\nWho was the duke in the battle of Hastings?\nWho ruled the duchy of Normandy\nWhat religion were the Normans\nWhat type of major impact did the Norman dynasty have on modern Europe?\nWho was famed for their Christian spirit?\nWho assimilted the Roman language?\nWho ruled the country of Normandy?\nWhat principality did William the conquerer found?\nWhat is the original meaning of the word Norman?\nWhen was the Latin version of the word Norman first recorded?\nWhat name comes from the English words Normans/Normanz?"""\n\nquestions = data.split("\\n")\n')),(0,a.kt)("h2",{id:"langchain-openai-qa-publish-metrics-and-logs-to-infino"},"LangChain OpenAI Q&A; Publish metrics and logs to Infino"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Set your key here.\n# os.environ["OPENAI_API_KEY"] = "YOUR_API_KEY"\n\n# Create callback handler. This logs latency, errors, token usage, prompts as well as prompt responses to Infino.\nhandler = InfinoCallbackHandler(\n    model_id="test_openai", model_version="0.1", verbose=False\n)\n\n# Create LLM.\nllm = OpenAI(temperature=0.1)\n\n# Number of questions to ask the OpenAI model. We limit to a short number here to save $$ while running this demo.\nnum_questions = 10\n\nquestions = questions[0:num_questions]\nfor question in questions:\n    print(question)\n\n    # We send the question to OpenAI API, with Infino callback.\n    llm_result = llm.generate([question], callbacks=[handler])\n    print(llm_result)\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    In what country is Normandy located?\n    generations=[[Generation(text='\\n\\nNormandy is located in France.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 16, 'completion_tokens': 9, 'prompt_tokens': 7}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('8de21639-acec-4bd1-a12d-8124de1e20da'))\n    When were the Normans in Normandy?\n    generations=[[Generation(text='\\n\\nThe Normans first settled in Normandy in the late 9th century.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 24, 'completion_tokens': 16, 'prompt_tokens': 8}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('cf81fc86-250b-4e6e-9d92-2df3bebb019a'))\n    From which countries did the Norse originate?\n    generations=[[Generation(text='\\n\\nThe Norse originated from Scandinavia, which includes modern-day Norway, Sweden, and Denmark.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 29, 'completion_tokens': 21, 'prompt_tokens': 8}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('50f42f5e-b4a4-411a-a049-f92cb573a74f'))\n    Who was the Norse leader?\n    generations=[[Generation(text='\\n\\nThe most famous Norse leader was the legendary Viking king Ragnar Lodbrok. He is believed to have lived in the 9th century and is renowned for his exploits in England and France.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 45, 'completion_tokens': 39, 'prompt_tokens': 6}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('e32f31cb-ddc9-4863-8e6e-cb7a281a0ada'))\n    What century did the Normans first gain their separate identity?\n    generations=[[Generation(text='\\n\\nThe Normans first gained their separate identity in the 11th century.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 28, 'completion_tokens': 16, 'prompt_tokens': 12}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('da9d8f73-b3b3-4bc5-8495-da8b11462a51'))\n    Who gave their name to Normandy in the 1000's and 1100's\n    generations=[[Generation(text='\\n\\nThe Normans, a people from northern France, gave their name to Normandy in the 1000s and 1100s. The Normans were descended from Viking settlers who had come to the region in the late 800s.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 58, 'completion_tokens': 45, 'prompt_tokens': 13}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('bb5829bf-b6a6-4429-adfa-414ac5be46e5'))\n    What is France a region of?\n    generations=[[Generation(text='\\n\\nFrance is a region of Europe.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 16, 'completion_tokens': 9, 'prompt_tokens': 7}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('6943880b-b4e4-4c74-9ca1-8c03c10f7e9c'))\n    Who did King Charles III swear fealty to?\n    generations=[[Generation(text='\\n\\nKing Charles III swore fealty to Pope Innocent III.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 23, 'completion_tokens': 13, 'prompt_tokens': 10}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('c91fd663-09e6-4d00-b746-4c7fd96f9ceb'))\n    When did the Frankish identity emerge?\n    generations=[[Generation(text='\\n\\nThe Frankish identity began to emerge in the late 5th century, when the Franks began to expand their power and influence in the region. The Franks were a Germanic tribe that had migrated to the area from the east and had established a kingdom in what is now modern-day France. The Franks were eventually able to establish a powerful kingdom that lasted until the 10th century.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 86, 'completion_tokens': 78, 'prompt_tokens': 8}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('23f86775-e592-4cb8-baa3-46ebe74305b2'))\n    Who was the duke in the battle of Hastings?\n    generations=[[Generation(text='\\n\\nThe Duke of Normandy, William the Conqueror, was the leader of the Norman forces at the Battle of Hastings in 1066.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 39, 'completion_tokens': 28, 'prompt_tokens': 11}, 'model_name': 'text-davinci-003'} run=RunInfo(run_id=UUID('ad5b7984-8758-4d95-a5eb-ee56e0218f6b'))\n"))),(0,a.kt)("h2",{id:"create-metric-charts"},"Create Metric Charts"),(0,a.kt)("p",null,"We now use matplotlib to create graphs of latency, errors and tokens consumed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Helper function to create a graph using matplotlib.\ndef plot(data, title):\n    data = json.loads(data)\n\n    # Extract x and y values from the data\n    timestamps = [item["time"] for item in data]\n    dates = [dt.datetime.fromtimestamp(ts) for ts in timestamps]\n    y = [item["value"] for item in data]\n\n    plt.rcParams["figure.figsize"] = [6, 4]\n    plt.subplots_adjust(bottom=0.2)\n    plt.xticks(rotation=25)\n    ax = plt.gca()\n    xfmt = md.DateFormatter("%Y-%m-%d %H:%M:%S")\n    ax.xaxis.set_major_formatter(xfmt)\n\n    # Create the plot\n    plt.plot(dates, y)\n\n    # Set labels and title\n    plt.xlabel("Time")\n    plt.ylabel("Value")\n    plt.title(title)\n\n    plt.show()\n\n\nresponse = client.search_ts("__name__", "latency", 0, int(time.time()))\nplot(response.text, "Latency")\n\nresponse = client.search_ts("__name__", "error", 0, int(time.time()))\nplot(response.text, "Errors")\n\nresponse = client.search_ts("__name__", "prompt_tokens", 0, int(time.time()))\nplot(response.text, "Prompt Tokens")\n\nresponse = client.search_ts("__name__", "completion_tokens", 0, int(time.time()))\nplot(response.text, "Completion Tokens")\n\nresponse = client.search_ts("__name__", "total_tokens", 0, int(time.time()))\nplot(response.text, "Total Tokens")\n')),(0,a.kt)("h2",{id:"full-text-query-on-prompt-or-prompt-outputs"},"Full text query on prompt or prompt outputs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Search for a particular prompt text.\nquery = "normandy"\nresponse = client.search_log(query, 0, int(time.time()))\nprint("Results for", query, ":", response.text)\n\nprint("===")\n\nquery = "king charles III"\nresponse = client.search_log("king charles III", 0, int(time.time()))\nprint("Results for", query, ":", response.text)\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    Results for normandy : [{"time":1686821979,"fields":{"prompt":"In what country is Normandy located?"},"text":"In what country is Normandy located?"},{"time":1686821982,"fields":{"prompt_response":"\\n\\nNormandy is located in France."},"text":"\\n\\nNormandy is located in France."},{"time":1686821984,"fields":{"prompt_response":"\\n\\nThe Normans first settled in Normandy in the late 9th century."},"text":"\\n\\nThe Normans first settled in Normandy in the late 9th century."},{"time":1686821993,"fields":{"prompt":"Who gave their name to Normandy in the 1000\'s and 1100\'s"},"text":"Who gave their name to Normandy in the 1000\'s and 1100\'s"},{"time":1686821997,"fields":{"prompt_response":"\\n\\nThe Normans, a people from northern France, gave their name to Normandy in the 1000s and 1100s. The Normans were descended from Viking settlers who had come to the region in the late 800s."},"text":"\\n\\nThe Normans, a people from northern France, gave their name to Normandy in the 1000s and 1100s. The Normans were descended from Viking settlers who had come to the region in the late 800s."}]\n    ===\n    Results for king charles III : [{"time":1686821998,"fields":{"prompt":"Who did King Charles III swear fealty to?"},"text":"Who did King Charles III swear fealty to?"},{"time":1686822000,"fields":{"prompt_response":"\\n\\nKing Charles III swore fealty to Pope Innocent III."},"text":"\\n\\nKing Charles III swore fealty to Pope Innocent III."}]\n'))),(0,a.kt)("h2",{id:"stop-infino-server"},"Stop infino server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker rm -f infino-example\n")),(0,a.kt)(m,{lang:"bash",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    infino-example\n"))))}u.isMDXComponent=!0}}]);