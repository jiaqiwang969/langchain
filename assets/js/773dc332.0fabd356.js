"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62221],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>f});var r=t(67294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},h=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,c=e.mdxType,a=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=s(t),u=c,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||a;return t?r.createElement(f,o(o({ref:n},h),{},{components:t})):r.createElement(f,o({ref:n},h))}));function f(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var a=t.length,o=new Array(a);o[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:c,o[1]=i;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},32175:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(87462),c=(t(67294),t(3905));const a={},o="Self-checking chain",i={unversionedId:"use_cases/more/self_check/llm_checker",id:"use_cases/more/self_check/llm_checker",title:"Self-checking chain",description:"This notebook showcases how to use LLMCheckerChain.",source:"@site/docs/use_cases/more/self_check/llm_checker.md",sourceDirName:"use_cases/more/self_check",slug:"/use_cases/more/self_check/llm_checker",permalink:"/langchain/docs/use_cases/more/self_check/llm_checker",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"Self-checking",permalink:"/langchain/docs/use_cases/more/self_check/"},next:{title:"Summarization checker chain",permalink:"/langchain/docs/use_cases/more/self_check/llm_summarization_checker"}},l={},s=[],h=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,c.kt)("div",e)});var p;const m={toc:s},u="wrapper";function f(e){let{components:n,...t}=e;return(0,c.kt)(u,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"self-checking-chain"},"Self-checking chain"),(0,c.kt)("p",null,"This notebook showcases how to use LLMCheckerChain."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "LLMCheckerChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm_checker.base.LLMCheckerChain.html", "title": "Self-checking chain"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Self-checking chain"}]--\x3e\nfrom langchain.chains import LLMCheckerChain\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0.7)\n\ntext = "What type of mammal lays the biggest eggs?"\n\nchecker_chain = LLMCheckerChain.from_llm(llm, verbose=True)\n\nchecker_chain.run(text)\n')),(0,c.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMCheckerChain chain...\n    \n    \n    > Entering new SequentialChain chain...\n    \n    > Finished chain.\n    \n    > Finished chain.\n\n\n\n\n\n    ' No mammal lays the biggest eggs. The Elephant Bird, which was a species of giant bird, laid the largest eggs of any bird.'\n"))))}f.isMDXComponent=!0}}]);