"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[91849],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},16244:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={},i="Xata",s={unversionedId:"integrations/vectorstores/xata",id:"integrations/vectorstores/xata",title:"Xata",description:"Xata is a serverless data platform, based on PostgreSQL. It provides a Python SDK for interacting with your database, and a UI for managing your data.",source:"@site/docs/integrations/vectorstores/xata.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/xata",permalink:"/langchain/docs/integrations/vectorstores/xata",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Weaviate",permalink:"/langchain/docs/integrations/vectorstores/weaviate"},next:{title:"Zep",permalink:"/langchain/docs/integrations/vectorstores/zep"}},l={},c=[{value:"Setup",id:"setup",level:2},{value:"Create a database to use as a vector store",id:"create-a-database-to-use-as-a-vector-store",level:3},{value:"Create the Xata vector store",id:"create-the-xata-vector-store",level:3},{value:"Similarity Search",id:"similarity-search",level:3},{value:"Similarity Search with score (vector distance)",id:"similarity-search-with-score-vector-distance",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"xata"},"Xata"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://xata.io"},"Xata")," is a serverless data platform, based on PostgreSQL. It provides a Python SDK for interacting with your database, and a UI for managing your data.\nXata has a native vector type, which can be added to any table, and supports similarity search. LangChain inserts vectors directly to Xata, and queries it for the nearest neighbors of a given vector, so that you can use all the LangChain Embeddings integrations with Xata.")),(0,r.kt)("p",null,"This notebook guides you how to use Xata as a VectorStore."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("h3",{id:"create-a-database-to-use-as-a-vector-store"},"Create a database to use as a vector store"),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"https://app.xata.io"},"Xata UI")," create a new database. You can name it whatever you want, in this notepad we'll use ",(0,r.kt)("inlineCode",{parentName:"p"},"langchain"),".\nCreate a table, again you can name it anything, but we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"vectors"),". Add the following columns via the UI:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"content"),' of type "Text". This is used to store the ',(0,r.kt)("inlineCode",{parentName:"li"},"Document.pageContent")," values."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"embedding"),' of type "Vector". Use the dimension used by the model you plan to use. In this notebook we use OpenAI embeddings, which have 1536 dimensions.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"search"),' of type "Text". This is used as a metadata column by this example.'),(0,r.kt)("li",{parentName:"ul"},"any other columns you want to use as metadata. They are populated from the ",(0,r.kt)("inlineCode",{parentName:"li"},"Document.metadata")," object. For example, if in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Document.metadata")," object you have a ",(0,r.kt)("inlineCode",{parentName:"li"},"title")," property, you can create a ",(0,r.kt)("inlineCode",{parentName:"li"},"title")," column in the table and it will be populated.")),(0,r.kt)("p",null,"Let's first install our dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install xata openai tiktoken langchain\n")),(0,r.kt)("p",null,"Let's load the OpenAI key to the environemnt. If you don't have one you can create an OpenAI account and create a key on this ",(0,r.kt)("a",{parentName:"p",href:"https://platform.openai.com/account/api-keys"},"page"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,r.kt)("p",null,"Similarly, we need to get the environment variables for Xata. You can create a new API key by visiting your ",(0,r.kt)("a",{parentName:"p",href:"https://app.xata.io/settings"},"account settings"),". To find the database URL, go to the Settings page of the database that you have created. The database URL should look something like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"https://demo-uni3q8.eu-west-1.xata.sh/db/langchain"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'api_key = getpass.getpass("Xata API key: ")\ndb_url = input("Xata database URL (copy it from your DB settings):")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "Xata"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "Xata"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Xata"}, {"imported": "XataVectorStore", "source": "langchain.vectorstores.xata", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.xata.XataVectorStore.html", "title": "Xata"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.document_loaders import TextLoader\nfrom langchain.vectorstores.xata import XataVectorStore\n')),(0,r.kt)("h3",{id:"create-the-xata-vector-store"},"Create the Xata vector store"),(0,r.kt)("p",null,"Let's import our test dataset:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'loader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n')),(0,r.kt)("p",null,"Now create the actual vector store, backed by the Xata table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'vector_store = XataVectorStore.from_documents(docs, embeddings, api_key=api_key, db_url=db_url, table_name="vectors")\n')),(0,r.kt)("p",null,"After running the above command, if you go to the Xata UI, you should see the documents loaded together with their embeddings."),(0,r.kt)("h3",{id:"similarity-search"},"Similarity Search"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\nfound_docs = vector_store.similarity_search(query)\nprint(found_docs)\n')),(0,r.kt)("h3",{id:"similarity-search-with-score-vector-distance"},"Similarity Search with score (vector distance)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\nresult = vector_store.similarity_search_with_score(query)\nfor doc, score in result:\n    print(f"document={doc}, score={score}")\n')))}u.isMDXComponent=!0}}]);