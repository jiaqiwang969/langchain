"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1762],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>h});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=n.createContext({}),l=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},d=function(e){var a=l(e.components);return n.createElement(c.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(t),u=r,h=p["".concat(c,".").concat(u)]||p[u]||m[u]||s;return t?n.createElement(h,o(o({ref:a},d),{},{components:t})):n.createElement(h,o({ref:a},d))}));function h(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},29147:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=t(87462),r=(t(67294),t(3905));const s={},o="Cassandra Chat Message History",i={unversionedId:"integrations/memory/cassandra_chat_message_history",id:"integrations/memory/cassandra_chat_message_history",title:"Cassandra Chat Message History",description:"Apache Cassandra\xae is a NoSQL, row-oriented, highly scalable and highly available database, well suited for storing large amounts of data.",source:"@site/docs/integrations/memory/cassandra_chat_message_history.md",sourceDirName:"integrations/memory",slug:"/integrations/memory/cassandra_chat_message_history",permalink:"/langchain/docs/integrations/memory/cassandra_chat_message_history",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Memory",permalink:"/langchain/docs/integrations/memory/"},next:{title:"Dynamodb Chat Message History",permalink:"/langchain/docs/integrations/memory/dynamodb_chat_message_history"}},c={},l=[{value:"Please provide database connection parameters and secrets:",id:"please-provide-database-connection-parameters-and-secrets",level:3},{value:"depending on whether local or cloud-based Astra DB, create the corresponding database connection &quot;Session&quot; object",id:"depending-on-whether-local-or-cloud-based-astra-db-create-the-corresponding-database-connection-session-object",level:4},{value:"Creation and usage of the Chat Message History",id:"creation-and-usage-of-the-chat-message-history",level:3}],d={toc:l},p="wrapper";function m(e){let{components:a,...t}=e;return(0,r.kt)(p,(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cassandra-chat-message-history"},"Cassandra Chat Message History"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://cassandra.apache.org"},"Apache Cassandra\xae")," is a NoSQL, row-oriented, highly scalable and highly available database, well suited for storing large amounts of data.")),(0,r.kt)("p",null,"Cassandra is a good choice for storing chat message history because it is easy to scale and can handle a large number of writes."),(0,r.kt)("p",null,"This notebook goes over how to use Cassandra to store chat message history."),(0,r.kt)("p",null,"To run this notebook you need either a running Cassandra cluster or a DataStax Astra DB instance running in the cloud (you can get one for free at ",(0,r.kt)("a",{parentName:"p",href:"https://astra.datastax.com"},"datastax.com"),"). Check ",(0,r.kt)("a",{parentName:"p",href:"https://cassio.org/start_here/"},"cassio.org")," for more information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pip install "cassio>=0.0.7"\n')),(0,r.kt)("h3",{id:"please-provide-database-connection-parameters-and-secrets"},"Please provide database connection parameters and secrets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\ndatabase_mode = (input("\\n(C)assandra or (A)stra DB? ")).upper()\n\nkeyspace_name = input("\\nKeyspace name? ")\n\nif database_mode == "A":\n    ASTRA_DB_APPLICATION_TOKEN = getpass.getpass(\'\\nAstra DB Token ("AstraCS:...") \')\n    #\n    ASTRA_DB_SECURE_BUNDLE_PATH = input("Full path to your Secure Connect Bundle? ")\nelif database_mode == "C":\n    CASSANDRA_CONTACT_POINTS = input(\n        "Contact points? (comma-separated, empty for localhost) "\n    ).strip()\n')),(0,r.kt)("h4",{id:"depending-on-whether-local-or-cloud-based-astra-db-create-the-corresponding-database-connection-session-object"},'depending on whether local or cloud-based Astra DB, create the corresponding database connection "Session" object'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cassandra.cluster import Cluster\nfrom cassandra.auth import PlainTextAuthProvider\n\nif database_mode == "C":\n    if CASSANDRA_CONTACT_POINTS:\n        cluster = Cluster(\n            [cp.strip() for cp in CASSANDRA_CONTACT_POINTS.split(",") if cp.strip()]\n        )\n    else:\n        cluster = Cluster()\n    session = cluster.connect()\nelif database_mode == "A":\n    ASTRA_DB_CLIENT_ID = "token"\n    cluster = Cluster(\n        cloud={\n            "secure_connect_bundle": ASTRA_DB_SECURE_BUNDLE_PATH,\n        },\n        auth_provider=PlainTextAuthProvider(\n            ASTRA_DB_CLIENT_ID,\n            ASTRA_DB_APPLICATION_TOKEN,\n        ),\n    )\n    session = cluster.connect()\nelse:\n    raise NotImplementedError\n')),(0,r.kt)("h3",{id:"creation-and-usage-of-the-chat-message-history"},"Creation and usage of the Chat Message History"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "CassandraChatMessageHistory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.cassandra.CassandraChatMessageHistory.html", "title": "Cassandra Chat Message History"}]--\x3e\nfrom langchain.memory import CassandraChatMessageHistory\n\nmessage_history = CassandraChatMessageHistory(\n    session_id="test-session",\n    session=session,\n    keyspace=keyspace_name,\n)\n\nmessage_history.add_user_message("hi!")\n\nmessage_history.add_ai_message("whats up?")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"message_history.messages\n")))}m.isMDXComponent=!0}}]);