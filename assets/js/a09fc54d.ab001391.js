"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[42744],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),u=o,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},82715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={},s="SingleStoreDB",i={unversionedId:"integrations/vectorstores/singlestoredb",id:"integrations/vectorstores/singlestoredb",title:"SingleStoreDB",description:"SingleStoreDB is a high-performance distributed SQL database that supports deployment both in the cloud and on-premises. It provides vector storage, and vector functions including dotproduct and euclideandistance, thereby supporting AI applications that require text similarity matching.",source:"@site/docs/integrations/vectorstores/singlestoredb.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/singlestoredb",permalink:"/langchain/docs/integrations/vectorstores/singlestoredb",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"ScaNN",permalink:"/langchain/docs/integrations/vectorstores/scann"},next:{title:"scikit-learn",permalink:"/langchain/docs/integrations/vectorstores/sklearn"}},c={},l=[],p={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"singlestoredb"},"SingleStoreDB"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://singlestore.com/"},"SingleStoreDB")," is a high-performance distributed SQL database that supports deployment both in the ",(0,o.kt)("a",{parentName:"p",href:"https://www.singlestore.com/cloud/"},"cloud")," and on-premises. It provides vector storage, and vector functions including ",(0,o.kt)("a",{parentName:"p",href:"https://docs.singlestore.com/managed-service/en/reference/sql-reference/vector-functions/dot_product.html"},"dot_product")," and ",(0,o.kt)("a",{parentName:"p",href:"https://docs.singlestore.com/managed-service/en/reference/sql-reference/vector-functions/euclidean_distance.html"},"euclidean_distance"),", thereby supporting AI applications that require text similarity matching. ")),(0,o.kt)("p",null,"This tutorial illustrates how to ",(0,o.kt)("a",{parentName:"p",href:"https://docs.singlestore.com/managed-service/en/developer-resources/functional-extensions/working-with-vector-data.html"},"work with vector data in SingleStoreDB"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Establishing a connection to the database is facilitated through the singlestoredb Python connector.\n# Please ensure that this connector is installed in your working environment.\npip install singlestoredb\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport getpass\n\n# We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\nos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenAIEmbeddings", "source": "langchain.embeddings.openai", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html", "title": "SingleStoreDB"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "SingleStoreDB"}, {"imported": "SingleStoreDB", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.singlestoredb.SingleStoreDB.html", "title": "SingleStoreDB"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "SingleStoreDB"}]--\x3e\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import SingleStoreDB\nfrom langchain.document_loaders import TextLoader\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Load text samples\nloader = TextLoader("../../../state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n')),(0,o.kt)("p",null,"There are several ways to establish a ",(0,o.kt)("a",{parentName:"p",href:"https://singlestoredb-python.labs.singlestore.com/generated/singlestoredb.connect.html"},"connection")," to the database. You can either set up environment variables or pass named parameters to the ",(0,o.kt)("inlineCode",{parentName:"p"},"SingleStoreDB constructor"),". Alternatively, you may provide these parameters to the ",(0,o.kt)("inlineCode",{parentName:"p"},"from_documents")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"from_texts")," methods."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Setup connection url as environment variable\nos.environ["SINGLESTOREDB_URL"] = "root:pass@localhost:3306/db"\n\n# Load documents to the store\ndocsearch = SingleStoreDB.from_documents(\n    docs,\n    embeddings,\n    table_name="notebook",  # use table with a custom name\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'query = "What did the president say about Ketanji Brown Jackson"\ndocs = docsearch.similarity_search(query)  # Find documents that correspond to the query\nprint(docs[0].page_content)\n')))}m.isMDXComponent=!0}}]);