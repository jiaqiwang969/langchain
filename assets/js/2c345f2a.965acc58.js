"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[23177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),g=l,u=m["".concat(s,".").concat(g)]||m[g]||h[g]||o;return n?a.createElement(u,r(r({ref:t},c),{},{components:n})):a.createElement(u,r({ref:t},c))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},41714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const o={},r="MLflow",i={unversionedId:"integrations/providers/mlflow_tracking",id:"integrations/providers/mlflow_tracking",title:"MLflow",description:"MLflow is a versatile, expandable, open-source platform for managing workflows and artifacts across the machine learning lifecycle. It has built-in integrations with many popular ML libraries, but can be used with any library, algorithm, or deployment tool. It is designed to be extensible, so you can write plugins to support new workflows, libraries, and tools.",source:"@site/docs/integrations/providers/mlflow_tracking.md",sourceDirName:"integrations/providers",slug:"/integrations/providers/mlflow_tracking",permalink:"/langchain/docs/integrations/providers/mlflow_tracking",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"MLflow AI Gateway",permalink:"/langchain/docs/integrations/providers/mlflow_ai_gateway"},next:{title:"Modal",permalink:"/langchain/docs/integrations/providers/modal"}},s={},p=[{value:"External examples",id:"external-examples",level:2},{value:"Example",id:"example",level:2}],c={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"mlflow"},"MLflow"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://www.mlflow.org/docs/latest/what-is-mlflow.html"},"MLflow")," is a versatile, expandable, open-source platform for managing workflows and artifacts across the machine learning lifecycle. It has built-in integrations with many popular ML libraries, but can be used with any library, algorithm, or deployment tool. It is designed to be extensible, so you can write plugins to support new workflows, libraries, and tools.")),(0,l.kt)("p",null,"This notebook goes over how to track your LangChain experiments into your ",(0,l.kt)("inlineCode",{parentName:"p"},"MLflow Server")),(0,l.kt)("h2",{id:"external-examples"},"External examples"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MLflow")," provides ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mlflow/mlflow/tree/master/examples/langchain"},"several examples")," for the ",(0,l.kt)("inlineCode",{parentName:"p"},"LangChain")," integration:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/mlflow/mlflow/blob/master/examples/langchain/simple_chain.py"},"simple_chain")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/mlflow/mlflow/blob/master/examples/langchain/simple_agent.py"},"simple_agent")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/mlflow/mlflow/blob/master/examples/langchain/retriever_chain.py"},"retriever_chain")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/mlflow/mlflow/blob/master/examples/langchain/retrieval_qa_chain.py"},"retrieval_qa_chain"))),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install azureml-mlflow\npip install pandas\npip install textstat\npip install spacy\npip install openai\npip install google-search-results\npython -m spacy download en_core_web_sm\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'import os\n\nos.environ["MLFLOW_TRACKING_URI"] = ""\nos.environ["OPENAI_API_KEY"] = ""\nos.environ["SERPAPI_API_KEY"] = ""\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MlflowCallbackHandler", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.mlflow_callback.MlflowCallbackHandler.html", "title": "MLflow"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "MLflow"}]--\x3e\nfrom langchain.callbacks import MlflowCallbackHandler\nfrom langchain.llms import OpenAI\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'"""Main function.\n\nThis function is used to try the callback handler.\nScenarios:\n1. OpenAI LLM\n2. Chain with multiple SubChains on multiple generations\n3. Agent with Tools\n"""\nmlflow_callback = MlflowCallbackHandler()\nllm = OpenAI(\n    model_name="gpt-3.5-turbo", temperature=0, callbacks=[mlflow_callback], verbose=True\n)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# SCENARIO 1 - LLM\nllm_result = llm.generate(["Tell me a joke"])\n\nmlflow_callback.flush_tracker(llm)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "MLflow"}, {"imported": "LLMChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "MLflow"}]--\x3e\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# SCENARIO 2 - Chain\ntemplate = """You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\nTitle: {title}\nPlaywright: This is a synopsis for the above play:"""\nprompt_template = PromptTemplate(input_variables=["title"], template=template)\nsynopsis_chain = LLMChain(llm=llm, prompt=prompt_template, callbacks=[mlflow_callback])\n\ntest_prompts = [\n    {\n        "title": "documentary about good video games that push the boundary of game design"\n    },\n]\nsynopsis_chain.apply(test_prompts)\nmlflow_callback.flush_tracker(synopsis_chain)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "MLflow"}, {"imported": "load_tools", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.load_tools.load_tools.html", "title": "MLflow"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "MLflow"}]--\x3e\nfrom langchain.agents import initialize_agent, load_tools\nfrom langchain.agents import AgentType\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'# SCENARIO 3 - Agent with Tools\ntools = load_tools(["serpapi", "llm-math"], llm=llm, callbacks=[mlflow_callback])\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    callbacks=[mlflow_callback],\n    verbose=True,\n)\nagent.run(\n    "Who is Leo DiCaprio\'s girlfriend? What is her current age raised to the 0.43 power?"\n)\nmlflow_callback.flush_tracker(agent, finish=True)\n')))}h.isMDXComponent=!0}}]);