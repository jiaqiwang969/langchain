"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[66234],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>v});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(r),u=a,v=p["".concat(l,".").concat(u)]||p[u]||d[u]||o;return r?n.createElement(v,i(i({ref:t},m),{},{components:r})):n.createElement(v,i({ref:t},m))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},43018:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>v,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={},i="Ensemble Retriever",s={unversionedId:"modules/data_connection/retrievers/ensemble",id:"modules/data_connection/retrievers/ensemble",title:"Ensemble Retriever",description:"The EnsembleRetriever takes a list of retrievers as input and ensemble the results of their getrelevantdocuments() methods and rerank the results based on the Reciprocal Rank Fusion algorithm.",source:"@site/docs/modules/data_connection/retrievers/ensemble.md",sourceDirName:"modules/data_connection/retrievers",slug:"/modules/data_connection/retrievers/ensemble",permalink:"/langchain/docs/modules/data_connection/retrievers/ensemble",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Contextual compression",permalink:"/langchain/docs/modules/data_connection/retrievers/contextual_compression/"},next:{title:"MultiVector Retriever",permalink:"/langchain/docs/modules/data_connection/retrievers/multi_vector"}},l={},c=[],m=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var p;const d={toc:c},u="wrapper";function v(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ensemble-retriever"},"Ensemble Retriever"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"EnsembleRetriever")," takes a list of retrievers as input and ensemble the results of their ",(0,a.kt)("inlineCode",{parentName:"p"},"get_relevant_documents()")," methods and rerank the results based on the ",(0,a.kt)("a",{parentName:"p",href:"https://plg.uwaterloo.ca/~gvcormac/cormacksigir09-rrf.pdf"},"Reciprocal Rank Fusion")," algorithm."),(0,a.kt)("p",null,"By leveraging the strengths of different algorithms, the ",(0,a.kt)("inlineCode",{parentName:"p"},"EnsembleRetriever")," can achieve better performance than any single algorithm. "),(0,a.kt)("p",null,'The most common pattern is to combine a sparse retriever (like BM25) with a dense retriever (like embedding similarity), because their strengths are complementary. It is also known as "hybrid search". The sparse retriever is good at finding relevant documents based on keywords, while the dense retriever is good at finding relevant documents based on semantic similarity.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "BM25Retriever", "source": "langchain.retrievers", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.bm25.BM25Retriever.html", "title": "Ensemble Retriever"}, {"imported": "EnsembleRetriever", "source": "langchain.retrievers", "docs": "https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.ensemble.EnsembleRetriever.html", "title": "Ensemble Retriever"}, {"imported": "FAISS", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.faiss.FAISS.html", "title": "Ensemble Retriever"}]--\x3e\nfrom langchain.retrievers import BM25Retriever, EnsembleRetriever\nfrom langchain.vectorstores import FAISS\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'doc_list = [\n    "I like apples",\n    "I like oranges",\n    "Apples and oranges are fruits",\n]\n\n# initialize the bm25 retriever and faiss retriever\nbm25_retriever = BM25Retriever.from_texts(doc_list)\nbm25_retriever.k = 2\n\nembedding = OpenAIEmbeddings()\nfaiss_vectorstore = FAISS.from_texts(doc_list, embedding)\nfaiss_retriever = faiss_vectorstore.as_retriever(search_kwargs={"k": 2})\n\n# initialize the ensemble retriever\nensemble_retriever = EnsembleRetriever(retrievers=[bm25_retriever, faiss_retriever], weights=[0.5, 0.5])\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'docs = ensemble_retriever.get_relevant_documents("apples")\ndocs\n')),(0,a.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    [Document(page_content='I like apples', metadata={}),\n     Document(page_content='Apples and oranges are fruits', metadata={})]\n"))))}v.isMDXComponent=!0}}]);