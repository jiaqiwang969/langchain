"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[59503],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=o,g=c["".concat(l,".").concat(u)]||c[u]||h[u]||i;return n?r.createElement(g,a(a({ref:t},m),{},{components:n})):r.createElement(g,a({ref:t},m))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93382:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const i={},a="Bittensor",s={unversionedId:"integrations/llms/bittensor",id:"integrations/llms/bittensor",title:"Bittensor",description:"Bittensor is a mining network, similar to Bitcoin, that includes built-in incentives designed to encourage miners to contribute compute + knowledge.",source:"@site/docs/integrations/llms/bittensor.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/bittensor",permalink:"/langchain/docs/integrations/llms/bittensor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Bedrock",permalink:"/langchain/docs/integrations/llms/bedrock"},next:{title:"CerebriumAI",permalink:"/langchain/docs/integrations/llms/cerebriumai"}},l={},p=[{value:"Different Parameter and response handling for NIBittensorLLM",id:"different-parameter-and-response-handling-for-nibittensorllm",level:2},{value:"Using NIBittensorLLM with LLMChain and PromptTemplate",id:"using-nibittensorllm-with-llmchain-and-prompttemplate",level:2},{value:"Using NIBittensorLLM with Conversational Agent and Google Search Tool",id:"using-nibittensorllm-with-conversational-agent-and-google-search-tool",level:2}],m={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"bittensor"},"Bittensor"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://bittensor.com/"},"Bittensor")," is a mining network, similar to Bitcoin, that includes built-in incentives designed to encourage miners to contribute compute + knowledge."),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"NIBittensorLLM")," is developed by ",(0,o.kt)("a",{parentName:"p",href:"https://neuralinternet.ai/"},"Neural Internet"),", powered by ",(0,o.kt)("inlineCode",{parentName:"p"},"Bittensor"),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This LLM showcases true potential of decentralized AI by giving you the best response(s) from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bittensor protocol"),", which consist of various AI models such as ",(0,o.kt)("inlineCode",{parentName:"p"},"OpenAI"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"LLaMA2")," etc.")),(0,o.kt)("p",null,"Users can view their logs, requests, and API keys on the ",(0,o.kt)("a",{parentName:"p",href:"https://api.neuralinternet.ai/"},"Validator Endpoint Frontend"),". However, changes to the configuration are currently prohibited; otherwise, the user's queries will be blocked."),(0,o.kt)("p",null,"If you encounter any difficulties or have any questions, please feel free to reach out to our developer on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Kunj-2206"},"GitHub"),", ",(0,o.kt)("a",{parentName:"p",href:"https://discordapp.com/users/683542109248159777"},"Discord")," or join our discord server for latest update and queries ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/neuralinternet"},"Neural Internet"),"."),(0,o.kt)("h2",{id:"different-parameter-and-response-handling-for-nibittensorllm"},"Different Parameter and response handling for NIBittensorLLM"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "NIBittensorLLM", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.bittensor.NIBittensorLLM.html", "title": "Bittensor"}]--\x3e\nimport langchain\nfrom langchain.llms import NIBittensorLLM\nimport json\nfrom pprint import pprint\n\nlangchain.debug = True\n\n# System parameter in NIBittensorLLM is optional but you can set whatever you want to perform with model\nllm_sys = NIBittensorLLM(\n    system_prompt="Your task is to determine response based on user prompt.Explain me like I am technical lead of a project"\n)\nsys_resp = llm_sys(\n    "What is bittensor and What are the potential benifits of decentralized AI?"\n)\nprint(f"Response provided by LLM with system prompt set is : {sys_resp}")\n\n# The top_responses parameter can give multiple responses based on its parameter value\n# This below code retrive top 10 miner\'s response all the response are in format of json\n\n# Json response structure is\n""" {\n    "choices":  [\n                    {"index": Bittensor\'s Metagraph index number,\n                    "uid": Unique Identifier of a miner,\n                    "responder_hotkey": Hotkey of a miner,\n                    "message":{"role":"assistant","content": Contains actual response},\n                    "response_ms": Time in millisecond required to fetch response from a miner} \n                ]\n    } """\n\nmulti_response_llm = NIBittensorLLM(top_responses=10)\nmulti_resp = multi_response_llm("What is Neural Network Feeding Mechanism?")\njson_multi_resp = json.loads(multi_resp)\npprint(json_multi_resp)\n')),(0,o.kt)("h2",{id:"using-nibittensorllm-with-llmchain-and-prompttemplate"},"Using NIBittensorLLM with LLMChain and PromptTemplate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "NIBittensorLLM", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.bittensor.NIBittensorLLM.html", "title": "Bittensor"}]--\x3e\nimport langchain\nfrom langchain import PromptTemplate, LLMChain\nfrom langchain.llms import NIBittensorLLM\n\nlangchain.debug = True\n\ntemplate = """Question: {question}\n\nAnswer: Let\'s think step by step."""\n\n\nprompt = PromptTemplate(template=template, input_variables=["question"])\n\n# System parameter in NIBittensorLLM is optional but you can set whatever you want to perform with model\nllm = NIBittensorLLM(system_prompt="Your task is to determine response based on user prompt.")\n\nllm_chain = LLMChain(prompt=prompt, llm=llm)\nquestion = "What is bittensor?"\n\nllm_chain.run(question)\n')),(0,o.kt)("h2",{id:"using-nibittensorllm-with-conversational-agent-and-google-search-tool"},"Using NIBittensorLLM with Conversational Agent and Google Search Tool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Bittensor"}, {"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Bittensor"}, {"imported": "load_tools", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.load_tools.load_tools.html", "title": "Bittensor"}, {"imported": "ZeroShotAgent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.mrkl.base.ZeroShotAgent.html", "title": "Bittensor"}, {"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Bittensor"}, {"imported": "AgentExecutor", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.AgentExecutor.html", "title": "Bittensor"}, {"imported": "ConversationBufferMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.buffer.ConversationBufferMemory.html", "title": "Bittensor"}, {"imported": "GoogleSearchAPIWrapper", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.google_search.GoogleSearchAPIWrapper.html", "title": "Bittensor"}, {"imported": "SerpAPIWrapper", "source": "langchain.utilities", "docs": "https://api.python.langchain.com/en/latest/utilities/langchain.utilities.serpapi.SerpAPIWrapper.html", "title": "Bittensor"}, {"imported": "NIBittensorLLM", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.bittensor.NIBittensorLLM.html", "title": "Bittensor"}]--\x3e\nfrom langchain.agents import (\n    AgentType,\n    initialize_agent,\n    load_tools,\n    ZeroShotAgent,\n    Tool,\n    AgentExecutor,\n)\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain import LLMChain, PromptTemplate\nfrom langchain.utilities import GoogleSearchAPIWrapper, SerpAPIWrapper\nfrom langchain.llms import NIBittensorLLM\n\nmemory = ConversationBufferMemory(memory_key="chat_history")\n\n\nprefix = """Answer prompt based on LLM if there is need to search something then use internet and observe internet result and give accurate reply of user questions also try to use authenticated sources"""\nsuffix = """Begin!\n            {chat_history}\n            Question: {input}\n            {agent_scratchpad}"""\n\nprompt = ZeroShotAgent.create_prompt(\n    tools,\n    prefix=prefix,\n    suffix=suffix,\n    input_variables=["input", "chat_history", "agent_scratchpad"],\n)\n\nllm = NIBittensorLLM(system_prompt="Your task is to determine response based on user prompt")\n\nllm_chain = LLMChain(llm=llm, prompt=prompt)\n\nmemory = ConversationBufferMemory(memory_key="chat_history")\n\nagent = ZeroShotAgent(llm_chain=llm_chain, tools=tools, verbose=True)\nagent_chain = AgentExecutor.from_agent_and_tools(\n    agent=agent, tools=tools, verbose=True, memory=memory\n)\n\nresponse = agent_chain.run(input=prompt)\n')))}h.isMDXComponent=!0}}]);