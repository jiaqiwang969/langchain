"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[68702],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},h="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=s(n),u=r,d=h["".concat(p,".").concat(u)]||h[u]||g[u]||o;return n?a.createElement(d,l(l({ref:t},c),{},{components:n})):a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[h]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={},l="Graph QA",i={unversionedId:"use_cases/more/graph/graph_qa",id:"use_cases/more/graph/graph_qa",title:"Graph QA",description:"This notebook goes over how to do question answering over a graph data structure.",source:"@site/docs/use_cases/more/graph/graph_qa.md",sourceDirName:"use_cases/more/graph",slug:"/use_cases/more/graph/graph_qa",permalink:"/langchain/docs/use_cases/more/graph/graph_qa",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"use_cases",previous:{title:"NebulaGraphQAChain",permalink:"/langchain/docs/use_cases/more/graph/graph_nebula_qa"},next:{title:"GraphSparqlQAChain",permalink:"/langchain/docs/use_cases/more/graph/graph_sparql_qa"}},p={},s=[{value:"Create the graph",id:"create-the-graph",level:2},{value:"Querying the graph",id:"querying-the-graph",level:2},{value:"Save the graph",id:"save-the-graph",level:2}],c=(h="CodeOutputBlock",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var h;const g={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"graph-qa"},"Graph QA"),(0,r.kt)("p",null,"This notebook goes over how to do question answering over a graph data structure."),(0,r.kt)("h2",{id:"create-the-graph"},"Create the graph"),(0,r.kt)("p",null,"In this section, we construct an example graph. At the moment, this works best for small pieces of text."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GraphIndexCreator", "source": "langchain.indexes", "docs": "https://api.python.langchain.com/en/latest/indexes/langchain.indexes.graph.GraphIndexCreator.html", "title": "Graph QA"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Graph QA"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "Graph QA"}]--\x3e\nfrom langchain.indexes import GraphIndexCreator\nfrom langchain.llms import OpenAI\nfrom langchain.document_loaders import TextLoader\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"index_creator = GraphIndexCreator(llm=OpenAI(temperature=0))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'with open("../../state_of_the_union.txt") as f:\n    all_text = f.read()\n')),(0,r.kt)("p",null,"We will use just a small snippet, because extracting the knowledge triplets is a bit intensive at the moment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'text = "\\n".join(all_text.split("\\n\\n")[105:108])\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"text\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    'It won\u2019t look like much, but if you stop and look closely, you\u2019ll see a \u201cField of dreams,\u201d the ground on which America\u2019s future will be built. \\nThis is where Intel, the American company that helped build Silicon Valley, is going to build its $20 billion semiconductor \u201cmega site\u201d. \\nUp to eight state-of-the-art factories in one place. 10,000 new good-paying jobs. '\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"graph = index_creator.from_text(text)\n")),(0,r.kt)("p",null,"We can inspect the created graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"graph.get_triples()\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [('Intel', '$20 billion semiconductor \"mega site\"', 'is going to build'),\n     ('Intel', 'state-of-the-art factories', 'is building'),\n     ('Intel', '10,000 new good-paying jobs', 'is creating'),\n     ('Intel', 'Silicon Valley', 'is helping build'),\n     ('Field of dreams',\n      \"America's future will be built\",\n      'is the ground on which')]\n"))),(0,r.kt)("h2",{id:"querying-the-graph"},"Querying the graph"),(0,r.kt)("p",null,"We can now use the graph QA chain to ask question of the graph"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "GraphQAChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.graph_qa.base.GraphQAChain.html", "title": "Graph QA"}]--\x3e\nfrom langchain.chains import GraphQAChain\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"chain = GraphQAChain.from_llm(OpenAI(temperature=0), graph=graph, verbose=True)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'chain.run("what is Intel going to build?")\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    \n    \n    > Entering new GraphQAChain chain...\n    Entities Extracted:\n     Intel\n    Full Context:\n    Intel is going to build $20 billion semiconductor "mega site"\n    Intel is building state-of-the-art factories\n    Intel is creating 10,000 new good-paying jobs\n    Intel is helping build Silicon Valley\n    \n    > Finished chain.\n\n\n\n\n\n    \' Intel is going to build a $20 billion semiconductor "mega site" with state-of-the-art factories, creating 10,000 new good-paying jobs and helping to build Silicon Valley.\'\n'))),(0,r.kt)("h2",{id:"save-the-graph"},"Save the graph"),(0,r.kt)("p",null,"We can also save and load the graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'graph.write_to_gml("graph.gml")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "NetworkxEntityGraph", "source": "langchain.indexes.graph", "docs": "https://api.python.langchain.com/en/latest/graphs/langchain.graphs.networkx_graph.NetworkxEntityGraph.html", "title": "Graph QA"}]--\x3e\nfrom langchain.indexes.graph import NetworkxEntityGraph\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'loaded_graph = NetworkxEntityGraph.from_gml("graph.gml")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"loaded_graph.get_triples()\n")),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    [('Intel', '$20 billion semiconductor \"mega site\"', 'is going to build'),\n     ('Intel', 'state-of-the-art factories', 'is building'),\n     ('Intel', '10,000 new good-paying jobs', 'is creating'),\n     ('Intel', 'Silicon Valley', 'is helping build'),\n     ('Field of dreams',\n      \"America's future will be built\",\n      'is the ground on which')]\n"))))}d.isMDXComponent=!0}}]);