"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[25921],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i="Prediction Guard",l={unversionedId:"integrations/llms/predictionguard",id:"integrations/llms/predictionguard",title:"Prediction Guard",description:"Basic LLM usage",source:"@site/docs/integrations/llms/predictionguard.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/predictionguard",permalink:"/langchain/docs/integrations/llms/predictionguard",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Predibase",permalink:"/langchain/docs/integrations/llms/predibase"},next:{title:"PromptLayer OpenAI",permalink:"/langchain/docs/integrations/llms/promptlayer_openai"}},p={},c=[{value:"Basic LLM usage",id:"basic-llm-usage",level:2},{value:"Control the output structure/ type of LLMs",id:"control-the-output-structure-type-of-llms",level:2},{value:"Chaining",id:"chaining",level:2}],s={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prediction-guard"},"Prediction Guard"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install predictionguard langchain\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "PredictionGuard", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.predictionguard.PredictionGuard.html", "title": "Prediction Guard"}]--\x3e\nimport os\n\nimport predictionguard as pg\nfrom langchain.llms import PredictionGuard\nfrom langchain import PromptTemplate, LLMChain\n')),(0,a.kt)("h2",{id:"basic-llm-usage"},"Basic LLM usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Optional, add your OpenAI API Key. This is optional, as Prediction Guard allows\n# you to access all the latest open access models (see https://docs.predictionguard.com)\nos.environ["OPENAI_API_KEY"] = "<your OpenAI api key>"\n\n# Your Prediction Guard API key. Get one at predictionguard.com\nos.environ["PREDICTIONGUARD_TOKEN"] = "<your Prediction Guard access token>"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'pgllm = PredictionGuard(model="OpenAI-text-davinci-003")\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'pgllm("Tell me a joke")\n')),(0,a.kt)("h2",{id:"control-the-output-structure-type-of-llms"},"Control the output structure/ type of LLMs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'template = """Respond to the following query based on the context.\n\nContext: EVERY comment, DM + email suggestion has led us to this EXCITING announcement! \ud83c\udf89 We have officially added TWO new candle subscription box options! \ud83d\udce6\nExclusive Candle Box - $80 \nMonthly Candle Box - $45 (NEW!)\nScent of The Month Box - $28 (NEW!)\nHead to stories to get ALLL the deets on each box! \ud83d\udc46 BONUS: Save 50% on your first box with code 50OFF! \ud83c\udf89\n\nQuery: {query}\n\nResult: """\nprompt = PromptTemplate(template=template, input_variables=["query"])\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Without "guarding" or controlling the output of the LLM.\npgllm(prompt.format(query="What kind of post is this?"))\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# With "guarding" or controlling the output of the LLM. See the\n# Prediction Guard docs (https://docs.predictionguard.com) to learn how to\n# control the output with integer, float, boolean, JSON, and other types and\n# structures.\npgllm = PredictionGuard(\n    model="OpenAI-text-davinci-003",\n    output={\n        "type": "categorical",\n        "categories": ["product announcement", "apology", "relational"],\n    },\n)\npgllm(prompt.format(query="What kind of post is this?"))\n')),(0,a.kt)("h2",{id:"chaining"},"Chaining"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'pgllm = PredictionGuard(model="OpenAI-text-davinci-003")\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'template = """Question: {question}\n\nAnswer: Let\'s think step by step."""\nprompt = PromptTemplate(template=template, input_variables=["question"])\nllm_chain = LLMChain(prompt=prompt, llm=pgllm, verbose=True)\n\nquestion = "What NFL team won the Super Bowl in the year Justin Beiber was born?"\n\nllm_chain.predict(question=question)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'template = """Write a {adjective} poem about {subject}."""\nprompt = PromptTemplate(template=template, input_variables=["adjective", "subject"])\nllm_chain = LLMChain(prompt=prompt, llm=pgllm, verbose=True)\n\nllm_chain.predict(adjective="sad", subject="ducks")\n')))}d.isMDXComponent=!0}}]);