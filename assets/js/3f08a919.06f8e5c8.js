"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1714],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(h,l(l({ref:t},s),{},{components:n})):o.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},21849:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={},l="Different call methods",i={unversionedId:"modules/chains/how_to/call_methods",id:"modules/chains/how_to/call_methods",title:"Different call methods",description:"All classes inherited from Chain offer a few ways of running chain logic. The most direct one is by using call:",source:"@site/docs/modules/chains/how_to/call_methods.md",sourceDirName:"modules/chains/how_to",slug:"/modules/chains/how_to/call_methods",permalink:"/langchain/docs/modules/chains/how_to/call_methods",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Async API",permalink:"/langchain/docs/modules/chains/how_to/async_chain"},next:{title:"Custom chain",permalink:"/langchain/docs/modules/chains/how_to/custom_chain"}},c={},p=[],s=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"different-call-methods"},"Different call methods"),(0,a.kt)("p",null,"All classes inherited from ",(0,a.kt)("inlineCode",{parentName:"p"},"Chain")," offer a few ways of running chain logic. The most direct one is by using ",(0,a.kt)("inlineCode",{parentName:"p"},"__call__"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'chat = ChatOpenAI(temperature=0)\nprompt_template = "Tell me a {adjective} joke"\nllm_chain = LLMChain(llm=chat, prompt=PromptTemplate.from_template(prompt_template))\n\nllm_chain(inputs={"adjective": "corny"})\n')),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    {'adjective': 'corny',\n     'text': 'Why did the tomato turn red? Because it saw the salad dressing!'}\n"))),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"__call__")," returns both the input and output key values. You can configure it to only return output key values by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"return_only_outputs")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm_chain("corny", return_only_outputs=True)\n')),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    {'text': 'Why did the tomato turn red? Because it saw the salad dressing!'}\n"))),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"Chain")," only outputs one output key (i.e. only has one element in its ",(0,a.kt)("inlineCode",{parentName:"p"},"output_keys"),"), you can  use ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," method. Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," outputs a string instead of a dictionary."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# llm_chain only has one output key, so we can use run\nllm_chain.output_keys\n")),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    ['text']\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm_chain.run({"adjective": "corny"})\n')),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    'Why did the tomato turn red? Because it saw the salad dressing!'\n"))),(0,a.kt)("p",null,"In the case of one input key, you can input the string directly without specifying the input mapping."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# These two are equivalent\nllm_chain.run({"adjective": "corny"})\nllm_chain.run("corny")\n\n# These two are also equivalent\nllm_chain("corny")\nllm_chain({"adjective": "corny"})\n')),(0,a.kt)(s,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    {'adjective': 'corny',\n     'text': 'Why did the tomato turn red? Because it saw the salad dressing!'}\n"))),(0,a.kt)("p",null,"Tips: You can easily integrate a ",(0,a.kt)("inlineCode",{parentName:"p"},"Chain")," object as a ",(0,a.kt)("inlineCode",{parentName:"p"},"Tool")," in your ",(0,a.kt)("inlineCode",{parentName:"p"},"Agent")," via its ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," method. See an example ",(0,a.kt)("a",{parentName:"p",href:"/docs/modules/agents/tools/how_to/custom_tools.html"},"here"),"."))}h.isMDXComponent=!0}}]);