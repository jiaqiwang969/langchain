"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[20682],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return t?o.createElement(g,s(s({ref:n},p),{},{components:t})):o.createElement(g,s({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},21243:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const r={},s="Add Memory to OpenAI Functions Agent",i={unversionedId:"modules/agents/how_to/add_memory_openai_functions",id:"modules/agents/how_to/add_memory_openai_functions",title:"Add Memory to OpenAI Functions Agent",description:"This notebook goes over how to add memory to an OpenAI Functions agent.",source:"@site/docs/modules/agents/how_to/add_memory_openai_functions.md",sourceDirName:"modules/agents/how_to",slug:"/modules/agents/how_to/add_memory_openai_functions",permalink:"/langchain/docs/modules/agents/how_to/add_memory_openai_functions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"XML Agent",permalink:"/langchain/docs/modules/agents/agent_types/xml_agent"},next:{title:"Running Agent as an Iterator",permalink:"/langchain/docs/modules/agents/how_to/agent_iter"}},l={},c=[],p=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const u={toc:c},d="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"add-memory-to-openai-functions-agent"},"Add Memory to OpenAI Functions Agent"),(0,a.kt)("p",null,"This notebook goes over how to add memory to an OpenAI Functions agent."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "initialize_agent", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html", "title": "Add Memory to OpenAI Functions Agent"}, {"imported": "Tool", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html", "title": "Add Memory to OpenAI Functions Agent"}, {"imported": "AgentType", "source": "langchain.agents", "docs": "https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html", "title": "Add Memory to OpenAI Functions Agent"}, {"imported": "ChatOpenAI", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html", "title": "Add Memory to OpenAI Functions Agent"}]--\x3e\nfrom langchain import (\n    LLMMathChain,\n    OpenAI,\n    SerpAPIWrapper,\n    SQLDatabase,\n    SQLDatabaseChain,\n)\nfrom langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\nfrom langchain.chat_models import ChatOpenAI\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'llm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")\nsearch = SerpAPIWrapper()\nllm_math_chain = LLMMathChain.from_llm(llm=llm, verbose=True)\ndb = SQLDatabase.from_uri("sqlite:///../../../../../notebooks/Chinook.db")\ndb_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True)\ntools = [\n    Tool(\n        name="Search",\n        func=search.run,\n        description="useful for when you need to answer questions about current events. You should ask targeted questions",\n    ),\n    Tool(\n        name="Calculator",\n        func=llm_math_chain.run,\n        description="useful for when you need to answer questions about math",\n    ),\n    Tool(\n        name="FooBar-DB",\n        func=db_chain.run,\n        description="useful for when you need to answer questions about FooBar. Input should be in the form of a question containing full context",\n    ),\n]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "MessagesPlaceholder", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.MessagesPlaceholder.html", "title": "Add Memory to OpenAI Functions Agent"}, {"imported": "ConversationBufferMemory", "source": "langchain.memory", "docs": "https://api.python.langchain.com/en/latest/memory/langchain.memory.buffer.ConversationBufferMemory.html", "title": "Add Memory to OpenAI Functions Agent"}]--\x3e\nfrom langchain.prompts import MessagesPlaceholder\nfrom langchain.memory import ConversationBufferMemory\n\nagent_kwargs = {\n    "extra_prompt_messages": [MessagesPlaceholder(variable_name="memory")],\n}\nmemory = ConversationBufferMemory(memory_key="memory", return_messages=True)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"agent = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.OPENAI_FUNCTIONS,\n    verbose=True,\n    agent_kwargs=agent_kwargs,\n    memory=memory,\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("hi")\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Hello! How can I assist you today?\n    \n    > Finished chain.\n\n\n\n\n\n    'Hello! How can I assist you today?'\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("my name is bob")\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Nice to meet you, Bob! How can I help you today?\n    \n    > Finished chain.\n\n\n\n\n\n    'Nice to meet you, Bob! How can I help you today?'\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'agent.run("whats my name")\n')),(0,a.kt)(p,{lang:"python",mdxType:"CodeOutputBlock"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new  chain...\n    Your name is Bob.\n    \n    > Finished chain.\n\n\n\n\n\n    'Your name is Bob.'\n"))))}g.isMDXComponent=!0}}]);