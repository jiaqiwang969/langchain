"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9695],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),h=l,d=m["".concat(s,".").concat(h)]||m[h]||u[h]||o;return t?a.createElement(d,r(r({ref:n},p),{},{components:t})):a.createElement(d,r({ref:n},p))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,r=new Array(o);r[0]=h;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4012:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(87462),l=(t(67294),t(3905));const o={},r="Logging to file",i={unversionedId:"modules/callbacks/filecallbackhandler",id:"modules/callbacks/filecallbackhandler",title:"Logging to file",description:"This example shows how to print logs to file. It shows how to use the FileCallbackHandler, which does the same thing as StdOutCallbackHandler, but instead writes the output to file. It also uses the loguru library to log other outputs that are not captured by the handler.",source:"@site/docs/modules/callbacks/filecallbackhandler.md",sourceDirName:"modules/callbacks",slug:"/modules/callbacks/filecallbackhandler",permalink:"/langchain/docs/modules/callbacks/filecallbackhandler",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Callbacks for custom chains",permalink:"/langchain/docs/modules/callbacks/custom_chain"},next:{title:"Multiple callback handlers",permalink:"/langchain/docs/modules/callbacks/multiple_callbacks"}},s={},c=[],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",n)},m=p("CodeOutputBlock"),u=p("HTMLOutputBlock"),h={toc:c},d="wrapper";function g(e){let{components:n,...t}=e;return(0,l.kt)(d,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"logging-to-file"},"Logging to file"),(0,l.kt)("p",null,"This example shows how to print logs to file. It shows how to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"FileCallbackHandler"),", which does the same thing as ",(0,l.kt)("a",{parentName:"p",href:"https://python.langchain.com/en/latest/modules/callbacks/getting_started.html#using-an-existing-handler"},(0,l.kt)("inlineCode",{parentName:"a"},"StdOutCallbackHandler")),", but instead writes the output to file. It also uses the ",(0,l.kt)("inlineCode",{parentName:"p"},"loguru")," library to log other outputs that are not captured by the handler."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "FileCallbackHandler", "source": "langchain.callbacks", "docs": "https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.file.FileCallbackHandler.html", "title": "Logging to file"}, {"imported": "LLMChain", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html", "title": "Logging to file"}, {"imported": "OpenAI", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html", "title": "Logging to file"}, {"imported": "PromptTemplate", "source": "langchain.prompts", "docs": "https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html", "title": "Logging to file"}]--\x3e\nfrom loguru import logger\n\nfrom langchain.callbacks import FileCallbackHandler\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\n\nlogfile = "output.log"\n\nlogger.add(logfile, colorize=True, enqueue=True)\nhandler = FileCallbackHandler(logfile)\n\nllm = OpenAI()\nprompt = PromptTemplate.from_template("1 + {number} = ")\n\n# this chain will both print to stdout (because verbose=True) and write to \'output.log\'\n# if verbose=False, the FileCallbackHandler will still write to \'output.log\'\nchain = LLMChain(llm=llm, prompt=prompt, callbacks=[handler], verbose=True)\nanswer = chain.run(number=2)\nlogger.info(answer)\n')),(0,l.kt)(m,{lang:"python",mdxType:"CodeOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n\n\n    \x1b[32m2023-06-01 18:36:38.929\x1b[0m | \x1b[1mINFO    \x1b[0m | \x1b[36m__main__\x1b[0m:\x1b[36m<module>\x1b[0m:\x1b[36m20\x1b[0m - \x1b[1m\n    \n    3\x1b[0m\n\n\n    \n    > Finished chain.\n"))),(0,l.kt)("p",null,"Now we can open the file ",(0,l.kt)("inlineCode",{parentName:"p"},"output.log")," to see that the output has been captured."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install ansi2html > /dev/null\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from IPython.display import display, HTML\nfrom ansi2html import Ansi2HTMLConverter\n\nwith open("output.log", "r") as f:\n    content = f.read()\n\nconv = Ansi2HTMLConverter()\nhtml = conv.convert(content, full=True)\n\ndisplay(HTML(html))\n')),(0,l.kt)(u,{center:!0,mdxType:"HTMLOutputBlock"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n<title></title>\n<style type="text/css">\n.ansi2html-content { display: inline; white-space: pre-wrap; word-wrap: break-word; }\n.body_foreground { color: #AAAAAA; }\n.body_background { background-color: #000000; }\n.inv_foreground { color: #000000; }\n.inv_background { background-color: #AAAAAA; }\n.ansi1 { font-weight: bold; }\n.ansi3 { font-style: italic; }\n.ansi32 { color: #00aa00; }\n.ansi36 { color: #00aaaa; }\n</style>\n</head>\n<body class="body_foreground body_background" style="font-size: normal;" >\n<pre class="ansi2html-content">\n\n\n<span class="ansi1">&gt; Entering new LLMChain chain...</span>\nPrompt after formatting:\n<span class="ansi1 ansi32"></span><span class="ansi1 ansi3 ansi32">1 + 2 = </span>\n\n<span class="ansi1">&gt; Finished chain.</span>\n<span class="ansi32">2023-06-01 18:36:38.929</span> | <span class="ansi1">INFO    </span> | <span class="ansi36">__main__</span>:<span class="ansi36">&lt;module&gt;</span>:<span class="ansi36">20</span> - <span class="ansi1">\n\n3</span>\n\n</pre>\n</body>\n\n</html>\n'))))}g.isMDXComponent=!0}}]);