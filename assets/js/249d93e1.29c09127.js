"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[67921],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),f=i,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},20599:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(87462),i=(t(67294),t(3905));const o={},a="Xorbits inference (Xinference)",l={unversionedId:"integrations/text_embedding/xinference",id:"integrations/text_embedding/xinference",title:"Xorbits inference (Xinference)",description:"This notebook goes over how to use Xinference embeddings within LangChain",source:"@site/docs/integrations/text_embedding/xinference.md",sourceDirName:"integrations/text_embedding",slug:"/integrations/text_embedding/xinference",permalink:"/langchain/docs/integrations/text_embedding/xinference",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"TensorflowHub",permalink:"/langchain/docs/integrations/text_embedding/tensorflowhub"},next:{title:"Agents & Toolkits",permalink:"/langchain/docs/integrations/toolkits/"}},c={},s=[{value:"Installation",id:"installation",level:2},{value:"Deploy Xinference Locally or in a Distributed Cluster.",id:"deploy-xinference-locally-or-in-a-distributed-cluster",level:2},{value:"Wrapper",id:"wrapper",level:2}],p=(u="CodeOutputBlock",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const d={toc:s},f="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(f,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"xorbits-inference-xinference"},"Xorbits inference (Xinference)"),(0,i.kt)("p",null,"This notebook goes over how to use Xinference embeddings within LangChain"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"Xinference")," through PyPI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'%pip install "xinference[all]"\n')),(0,i.kt)("h2",{id:"deploy-xinference-locally-or-in-a-distributed-cluster"},"Deploy Xinference Locally or in a Distributed Cluster."),(0,i.kt)("p",null,"For local deployment, run ",(0,i.kt)("inlineCode",{parentName:"p"},"xinference"),". "),(0,i.kt)("p",null,"To deploy Xinference in a cluster, first start an Xinference supervisor using the ",(0,i.kt)("inlineCode",{parentName:"p"},"xinference-supervisor"),". You can also use the option -p to specify the port and -H to specify the host. The default port is 9997."),(0,i.kt)("p",null,"Then, start the Xinference workers using ",(0,i.kt)("inlineCode",{parentName:"p"},"xinference-worker")," on each server you want to run them on. "),(0,i.kt)("p",null,"You can consult the README file from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/xorbitsai/inference"},"Xinference")," for more information."),(0,i.kt)("h2",{id:"wrapper"},"Wrapper"),(0,i.kt)("p",null,"To use Xinference with LangChain, you need to first launch a model. You can use command line interface (CLI) to do so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"xinference launch -n vicuna-v1.3 -f ggmlv3 -q q4_0\n")),(0,i.kt)(p,{lang:"bash",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    Model uid: 915845ee-2a04-11ee-8ed4-d29396a3f064\n"))),(0,i.kt)("p",null,"A model UID is returned for you to use. Now you can use Xinference embeddings with LangChain:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "XinferenceEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.xinference.XinferenceEmbeddings.html", "title": "Xorbits inference (Xinference)"}]--\x3e\nfrom langchain.embeddings import XinferenceEmbeddings\n\nxinference = XinferenceEmbeddings(\n    server_url="http://0.0.0.0:9997",\n    model_uid = "915845ee-2a04-11ee-8ed4-d29396a3f064"\n)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'query_result = xinference.embed_query("This is a test query")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'doc_result = xinference.embed_documents(["text A", "text B"])\n')),(0,i.kt)("p",null,"Lastly, terminate the model when you do not need to use it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'xinference terminate --model-uid "915845ee-2a04-11ee-8ed4-d29396a3f064"\n')))}m.isMDXComponent=!0}}]);