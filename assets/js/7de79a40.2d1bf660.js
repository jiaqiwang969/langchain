"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[55610],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var l=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=l.createContext({}),s=function(e){var n=l.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return l.createElement(i.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,h=m["".concat(i,".").concat(d)]||m[d]||u[d]||a;return t?l.createElement(h,o(o({ref:n},c),{},{components:t})):l.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[m]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<a;s++)o[s]=t[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7938:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var l=t(87462),r=(t(67294),t(3905));const a={},o="OpenLLM",p={unversionedId:"integrations/llms/openllm",id:"integrations/llms/openllm",title:"OpenLLM",description:"\ud83e\uddbe OpenLLM is an open platform for operating large language models (LLMs) in production. It enables developers to easily run inference with any open-source LLMs, deploy to the cloud or on-premises, and build powerful AI apps.",source:"@site/docs/integrations/llms/openllm.md",sourceDirName:"integrations/llms",slug:"/integrations/llms/openllm",permalink:"/langchain/docs/integrations/llms/openllm",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"OpenAI",permalink:"/langchain/docs/integrations/llms/openai"},next:{title:"OpenLM",permalink:"/langchain/docs/integrations/llms/openlm"}},i={},s=[{value:"Installation",id:"installation",level:2},{value:"Launch OpenLLM server locally",id:"launch-openllm-server-locally",level:2},{value:"Wrapper",id:"wrapper",level:2},{value:"Optional: Local LLM Inference",id:"optional-local-llm-inference",level:3},{value:"Integrate with a LLMChain",id:"integrate-with-a-llmchain",level:3}],c=(m="CodeOutputBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const u={toc:s},d="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,l.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"openllm"},"OpenLLM"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/bentoml/OpenLLM"},"\ud83e\uddbe OpenLLM")," is an open platform for operating large language models (LLMs) in production. It enables developers to easily run inference with any open-source LLMs, deploy to the cloud or on-premises, and build powerful AI apps."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install ",(0,r.kt)("inlineCode",{parentName:"p"},"openllm")," through ",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org/project/openllm/"},"PyPI")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install openllm\n")),(0,r.kt)("h2",{id:"launch-openllm-server-locally"},"Launch OpenLLM server locally"),(0,r.kt)("p",null,"To start an LLM server, use ",(0,r.kt)("inlineCode",{parentName:"p"},"openllm start")," command. For example, to start a dolly-v2 server, run the following command from a terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openllm start dolly-v2\n")),(0,r.kt)("h2",{id:"wrapper"},"Wrapper"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenLLM", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openllm.OpenLLM.html", "title": "OpenLLM"}]--\x3e\nfrom langchain.llms import OpenLLM\n\nserver_url = "http://localhost:3000"  # Replace with remote host if you are running on a remote server\nllm = OpenLLM(server_url=server_url)\n')),(0,r.kt)("h3",{id:"optional-local-llm-inference"},"Optional: Local LLM Inference"),(0,r.kt)("p",null,"You may also choose to initialize an LLM managed by OpenLLM locally from current process. This is useful for development purpose and allows developers to quickly try out different types of LLMs."),(0,r.kt)("p",null,"When moving LLM applications to production, we recommend deploying the OpenLLM server separately and access via the ",(0,r.kt)("inlineCode",{parentName:"p"},"server_url")," option demonstrated above."),(0,r.kt)("p",null,"To load an LLM locally via the LangChain wrapper:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "OpenLLM", "source": "langchain.llms", "docs": "https://api.python.langchain.com/en/latest/llms/langchain.llms.openllm.OpenLLM.html", "title": "OpenLLM"}]--\x3e\nfrom langchain.llms import OpenLLM\n\nllm = OpenLLM(\n    model_name="dolly-v2",\n    model_id="databricks/dolly-v2-3b",\n    temperature=0.94,\n    repetition_penalty=1.2,\n)\n')),(0,r.kt)("h3",{id:"integrate-with-a-llmchain"},"Integrate with a LLMChain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from langchain import PromptTemplate, LLMChain\n\ntemplate = "What is a good name for a company that makes {product}?"\n\nprompt = PromptTemplate(template=template, input_variables=["product"])\n\nllm_chain = LLMChain(prompt=prompt, llm=llm)\n\ngenerated = llm_chain.run(product="mechanical keyboard")\nprint(generated)\n')),(0,r.kt)(c,{lang:"python",mdxType:"CodeOutputBlock"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    iLkb\n"))))}h.isMDXComponent=!0}}]);