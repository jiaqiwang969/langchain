"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[12292],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={},o="Pairwise Embedding Distance",s={unversionedId:"guides/evaluation/comparison/pairwise_embedding_distance",id:"guides/evaluation/comparison/pairwise_embedding_distance",title:"Pairwise Embedding Distance",description:"One way to measure the similarity (or dissimilarity) between two predictions on a shared or similar input is to embed the predictions and compute a vector distance between the two embeddings.[1]",source:"@site/docs/guides/evaluation/comparison/pairwise_embedding_distance.md",sourceDirName:"guides/evaluation/comparison",slug:"/guides/evaluation/comparison/pairwise_embedding_distance",permalink:"/langchain/docs/guides/evaluation/comparison/pairwise_embedding_distance",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Custom Pairwise Evaluator",permalink:"/langchain/docs/guides/evaluation/comparison/custom"},next:{title:"Pairwise String Comparison",permalink:"/langchain/docs/guides/evaluation/comparison/pairwise_string"}},l={},c=[{value:"Select the Distance Metric",id:"select-the-distance-metric",level:2},{value:"Select Embeddings to Use",id:"select-embeddings-to-use",level:2}],d=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var p;const u={toc:c},m="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pairwise-embedding-distance"},"Pairwise Embedding Distance"),(0,i.kt)("p",null,"One way to measure the similarity (or dissimilarity) between two predictions on a shared or similar input is to embed the predictions and compute a vector distance between the two embeddings.",(0,i.kt)("a",{name:"cite_ref-1"}),(0,i.kt)("a",{parentName:"p",href:"#cite_note-1"},(0,i.kt)("sup",null,"[1]"))),(0,i.kt)("p",null,"You can load the ",(0,i.kt)("inlineCode",{parentName:"p"},"pairwise_embedding_distance")," evaluator to do this."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," This returns a ",(0,i.kt)("strong",{parentName:"p"},"distance")," score, meaning that the lower the number, the ",(0,i.kt)("strong",{parentName:"p"},"more")," similar the outputs are, according to their embedded representation."),(0,i.kt)("p",null,"Check out the reference docs for the ",(0,i.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/evaluation/langchain.evaluation.embedding_distance.base.PairwiseEmbeddingDistanceEvalChain.html#langchain.evaluation.embedding_distance.base.PairwiseEmbeddingDistanceEvalChain"},"PairwiseEmbeddingDistanceEvalChain")," for more info."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "load_evaluator", "source": "langchain.evaluation", "docs": "https://api.python.langchain.com/en/latest/evaluation/langchain.evaluation.loading.load_evaluator.html", "title": "Pairwise Embedding Distance "}]--\x3e\nfrom langchain.evaluation import load_evaluator\n\nevaluator = load_evaluator("pairwise_embedding_distance")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'evaluator.evaluate_string_pairs(\n    prediction="Seattle is hot in June", prediction_b="Seattle is cool in June."\n)\n')),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    {'score': 0.0966466944859925}\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'evaluator.evaluate_string_pairs(\n    prediction="Seattle is warm in June", prediction_b="Seattle is cool in June."\n)\n')),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    {'score': 0.03761174337464557}\n"))),(0,i.kt)("h2",{id:"select-the-distance-metric"},"Select the Distance Metric"),(0,i.kt)("p",null,"By default, the evalutor uses cosine distance. You can choose a different distance metric if you'd like. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "EmbeddingDistance", "source": "langchain.evaluation", "docs": "https://api.python.langchain.com/en/latest/evaluation/langchain.evaluation.embedding_distance.base.EmbeddingDistance.html", "title": "Pairwise Embedding Distance "}]--\x3e\nfrom langchain.evaluation import EmbeddingDistance\n\nlist(EmbeddingDistance)\n')),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    [<EmbeddingDistance.COSINE: 'cosine'>,\n     <EmbeddingDistance.EUCLIDEAN: 'euclidean'>,\n     <EmbeddingDistance.MANHATTAN: 'manhattan'>,\n     <EmbeddingDistance.CHEBYSHEV: 'chebyshev'>,\n     <EmbeddingDistance.HAMMING: 'hamming'>]\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'evaluator = load_evaluator(\n    "pairwise_embedding_distance", distance_metric=EmbeddingDistance.EUCLIDEAN\n)\n')),(0,i.kt)("h2",{id:"select-embeddings-to-use"},"Select Embeddings to Use"),(0,i.kt)("p",null,"The constructor uses ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenAI")," embeddings by default, but you can configure this however you want. Below, use huggingface local embeddings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HuggingFaceEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.HuggingFaceEmbeddings.html", "title": "Pairwise Embedding Distance "}]--\x3e\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\nembedding_model = HuggingFaceEmbeddings()\nhf_evaluator = load_evaluator("pairwise_embedding_distance", embeddings=embedding_model)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'hf_evaluator.evaluate_string_pairs(\n    prediction="Seattle is hot in June", prediction_b="Seattle is cool in June."\n)\n')),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    {'score': 0.5486443280477362}\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'hf_evaluator.evaluate_string_pairs(\n    prediction="Seattle is warm in June", prediction_b="Seattle is cool in June."\n)\n')),(0,i.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    {'score': 0.21018880025138598}\n"))),(0,i.kt)("a",{name:"cite_note-1"}),(0,i.kt)("i",null,"1. Note: When it comes to semantic similarity, this often gives better results than older string distance metrics (such as those in the `PairwiseStringDistanceEvalChain`), though it tends to be less reliable than evaluators that use the LLM directly (such as the `PairwiseStringEvalChain`) "))}g.isMDXComponent=!0}}]);