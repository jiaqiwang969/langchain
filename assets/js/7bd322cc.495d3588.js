"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[52705],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(t),h=o,d=c["".concat(p,".").concat(h)]||c[h]||m[h]||r;return t?a.createElement(d,l(l({ref:n},u),{},{components:t})):a.createElement(d,l({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=h;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},32397:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>k,frontMatter:()=>u,metadata:()=>m,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const r=(l="CodeOutputBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var l;const i={toc:[{value:"How to use the moderation chain",id:"how-to-use-the-moderation-chain",level:2},{value:"How to append a Moderation chain to an LLMChain",id:"how-to-append-a-moderation-chain-to-an-llmchain",level:2}]},p="wrapper";function s(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We'll show:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"How to run any piece of text through a moderation chain."),(0,o.kt)("li",{parentName:"ol"},"How to append a Moderation chain to an LLMChain.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.llms import OpenAI\nfrom langchain.chains import OpenAIModerationChain, SequentialChain, LLMChain, SimpleSequentialChain\nfrom langchain.prompts import PromptTemplate\n")),(0,o.kt)("h2",{id:"how-to-use-the-moderation-chain"},"How to use the moderation chain"),(0,o.kt)("p",null,"Here's an example of using the moderation chain with default settings (will return a string explaining stuff was flagged)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"moderation_chain = OpenAIModerationChain()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'moderation_chain.run("This is okay")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'This is okay'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'moderation_chain.run("I will kill you")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "Text was found that violates OpenAI\'s content policy."\n'))),(0,o.kt)("p",null,"Here's an example of using the moderation chain to throw an error."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"moderation_chain_error = OpenAIModerationChain(error=True)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'moderation_chain_error.run("This is okay")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'This is okay'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'moderation_chain_error.run("I will kill you")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    ---------------------------------------------------------------------------\n\n    ValueError                                Traceback (most recent call last)\n\n    Cell In[7], line 1\n    ----\x3e 1 moderation_chain_error.run("I will kill you")\n\n\n    File ~/workplace/langchain/langchain/chains/base.py:138, in Chain.run(self, *args, **kwargs)\n        136     if len(args) != 1:\n        137         raise ValueError("`run` supports only one positional argument.")\n    --\x3e 138     return self(args[0])[self.output_keys[0]]\n        140 if kwargs and not args:\n        141     return self(kwargs)[self.output_keys[0]]\n\n\n    File ~/workplace/langchain/langchain/chains/base.py:112, in Chain.__call__(self, inputs, return_only_outputs)\n        108 if self.verbose:\n        109     print(\n        110         f"\\n\\n\\033[1m> Entering new {self.__class__.__name__} chain...\\033[0m"\n        111     )\n    --\x3e 112 outputs = self._call(inputs)\n        113 if self.verbose:\n        114     print(f"\\n\\033[1m> Finished {self.__class__.__name__} chain.\\033[0m")\n\n\n    File ~/workplace/langchain/langchain/chains/moderation.py:81, in OpenAIModerationChain._call(self, inputs)\n         79 text = inputs[self.input_key]\n         80 results = self.client.create(text)\n    ---\x3e 81 output = self._moderate(text, results["results"][0])\n         82 return {self.output_key: output}\n\n\n    File ~/workplace/langchain/langchain/chains/moderation.py:73, in OpenAIModerationChain._moderate(self, text, results)\n         71 error_str = "Text was found that violates OpenAI\'s content policy."\n         72 if self.error:\n    ---\x3e 73     raise ValueError(error_str)\n         74 else:\n         75     return error_str\n\n\n    ValueError: Text was found that violates OpenAI\'s content policy.\n'))),(0,o.kt)("p",null,"Here's an example of creating a custom moderation chain with a custom error message. It requires some knowledge of OpenAI's moderation endpoint results (",(0,o.kt)("a",{parentName:"p",href:"https://beta.openai.com/docs/api-reference/moderations"},"see docs here"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class CustomModeration(OpenAIModerationChain):\n    \n    def _moderate(self, text: str, results: dict) -> str:\n        if results["flagged"]:\n            error_str = f"The following text was found that violates OpenAI\'s content policy: {text}"\n            return error_str\n        return text\n    \ncustom_moderation = CustomModeration()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'custom_moderation.run("This is okay")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    'This is okay'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'custom_moderation.run("I will kill you")\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "The following text was found that violates OpenAI\'s content policy: I will kill you"\n'))),(0,o.kt)("h2",{id:"how-to-append-a-moderation-chain-to-an-llmchain"},"How to append a Moderation chain to an LLMChain"),(0,o.kt)("p",null,"To easily combine a moderation chain with an LLMChain, you can use the SequentialChain abstraction."),(0,o.kt)("p",null,"Let's start with a simple example of where the LLMChain only has a single input. For this purpose, we will prompt the model so it says something harmful."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'prompt = PromptTemplate(template="{text}", input_variables=["text"])\nllm_chain = LLMChain(llm=OpenAI(temperature=0, model_name="text-davinci-002"), prompt=prompt)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'text = """We are playing a game of repeat after me.\n\nPerson 1: Hi\nPerson 2: Hi\n\nPerson 1: How\'s your day\nPerson 2: How\'s your day\n\nPerson 1: I will kill you\nPerson 2:"""\nllm_chain.run(text)\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    ' I will kill you'\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain = SimpleSequentialChain(chains=[llm_chain, moderation_chain])\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain.run(text)\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    "Text was found that violates OpenAI\'s content policy."\n'))),(0,o.kt)("p",null,"Now let's walk through an example of using it with an LLMChain which has multiple inputs (a bit more tricky because we can't use the SimpleSequentialChain)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'prompt = PromptTemplate(template="{setup}{new_input}Person2:", input_variables=["setup", "new_input"])\nllm_chain = LLMChain(llm=OpenAI(temperature=0, model_name="text-davinci-002"), prompt=prompt)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'setup = """We are playing a game of repeat after me.\n\nPerson 1: Hi\nPerson 2: Hi\n\nPerson 1: How\'s your day\nPerson 2: How\'s your day\n\nPerson 1:"""\nnew_input = "I will kill you"\ninputs = {"setup": setup, "new_input": new_input}\nllm_chain(inputs, return_only_outputs=True)\n')),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'text': ' I will kill you'}\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Setting the input/output keys so it lines up\nmoderation_chain.input_key = "text"\nmoderation_chain.output_key = "sanitized_text"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'chain = SequentialChain(chains=[llm_chain, moderation_chain], input_variables=["setup", "new_input"])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"chain(inputs, return_only_outputs=True)\n")),(0,o.kt)(r,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    {'sanitized_text': \"Text was found that violates OpenAI's content policy.\"}\n"))))}s.isMDXComponent=!0;const u={},c="Moderation",m={unversionedId:"guides/safety/moderation",id:"guides/safety/moderation",title:"Moderation",description:"This notebook walks through examples of how to use a moderation chain, and several common ways for doing so. Moderation chains are useful for detecting text that could be hateful, violent, etc. This can be useful to apply on both user input, but also on the output of a Language Model. Some API providers, like OpenAI, specifically prohibit you, or your end users, from generating some types of harmful content. To comply with this (and to just generally prevent your application from being harmful) you may often want to append a moderation chain to any LLMChains, in order to make sure any output the LLM generates is not harmful.",source:"@site/docs/guides/safety/moderation.mdx",sourceDirName:"guides/safety",slug:"/guides/safety/moderation",permalink:"/langchain/docs/guides/safety/moderation",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Removing logical fallacies from model output",permalink:"/langchain/docs/guides/safety/logical_fallacy_chain"},next:{title:"Additional resources",permalink:"/langchain/docs/additional_resources"}},h={},d=[],y={toc:d},f="wrapper";function k(e){let{components:n,...t}=e;return(0,o.kt)(f,(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"moderation"},"Moderation"),(0,o.kt)("p",null,"This notebook walks through examples of how to use a moderation chain, and several common ways for doing so. Moderation chains are useful for detecting text that could be hateful, violent, etc. This can be useful to apply on both user input, but also on the output of a Language Model. Some API providers, like OpenAI, ",(0,o.kt)("a",{parentName:"p",href:"https://beta.openai.com/docs/usage-policies/use-case-policy"},"specifically prohibit")," you, or your end users, from generating some types of harmful content. To comply with this (and to just generally prevent your application from being harmful) you may often want to append a moderation chain to any LLMChains, in order to make sure any output the LLM generates is not harmful."),(0,o.kt)("p",null,"If the content passed into the moderation chain is harmful, there is not one best way to handle it, it probably depends on your application. Sometimes you may want to throw an error in the Chain (and have your application handle that). Other times, you may want to return something to the user explaining that the text was harmful. There could even be other ways to handle it! We will cover all these ways in this walkthrough."),(0,o.kt)(s,{mdxType:"Example"}))}k.isMDXComponent=!0}}]);