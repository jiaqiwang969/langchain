"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[27236],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},36677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={},i="ScaNN",s={unversionedId:"integrations/vectorstores/scann",id:"integrations/vectorstores/scann",title:"ScaNN",description:"ScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.",source:"@site/docs/integrations/vectorstores/scann.md",sourceDirName:"integrations/vectorstores",slug:"/integrations/vectorstores/scann",permalink:"/langchain/docs/integrations/vectorstores/scann",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"integrations",previous:{title:"Rockset",permalink:"/langchain/docs/integrations/vectorstores/rockset"},next:{title:"SingleStoreDB",permalink:"/langchain/docs/integrations/vectorstores/singlestoredb"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Retrieval Demo",id:"retrieval-demo",level:2},{value:"RetrievalQA Demo",id:"retrievalqa-demo",level:2},{value:"Save and loading local retrieval index",id:"save-and-loading-local-retrieval-index",level:2}],d=(p="CodeOutputBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var p;const u={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"scann"},"ScaNN"),(0,o.kt)("p",null,"ScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale."),(0,o.kt)("p",null,"ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/google-research/google-research/tree/master/scann"},"Google Research github")," for more details."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Install ScaNN through pip. Alternatively, you can follow instructions on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/google-research/google-research/tree/master/scann#building-from-source"},"ScaNN Website")," to install from source."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install scann\n")),(0,o.kt)("h2",{id:"retrieval-demo"},"Retrieval Demo"),(0,o.kt)("p",null,"Below we show how to use ScaNN in conjunction with Huggingface Embeddings."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "HuggingFaceEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.HuggingFaceEmbeddings.html", "title": "ScaNN"}, {"imported": "CharacterTextSplitter", "source": "langchain.text_splitter", "docs": "https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html", "title": "ScaNN"}, {"imported": "ScaNN", "source": "langchain.vectorstores", "docs": "https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.scann.ScaNN.html", "title": "ScaNN"}, {"imported": "TextLoader", "source": "langchain.document_loaders", "docs": "https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html", "title": "ScaNN"}, {"imported": "TensorflowHubEmbeddings", "source": "langchain.embeddings", "docs": "https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.tensorflow_hub.TensorflowHubEmbeddings.html", "title": "ScaNN"}]--\x3e\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import ScaNN\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader("state_of_the_union.txt")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nfrom langchain.embeddings import TensorflowHubEmbeddings\nembeddings = HuggingFaceEmbeddings()\n\ndb = ScaNN.from_documents(docs, embeddings)\nquery = "What did the president say about Ketanji Brown Jackson"\ndocs = db.similarity_search(query)\n\ndocs[0]\n')),(0,o.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you\u2019re at it, pass the Disclose Act so Americans can know who is funding our elections. \\n\\nTonight, I\u2019d like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer\u2014an Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \\n\\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation\u2019s top legal minds, who will continue Justice Breyer\u2019s legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})\n"))),(0,o.kt)("h2",{id:"retrievalqa-demo"},"RetrievalQA Demo"),(0,o.kt)("p",null,"Next, we demonstrate using ScaNN in conjunction with Google PaLM API."),(0,o.kt)("p",null,"You can obtain an API key from ",(0,o.kt)("a",{parentName:"p",href:"https://developers.generativeai.google/tutorials/setup"},"https://developers.generativeai.google/tutorials/setup")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\x3c!--IMPORTS:[{"imported": "RetrievalQA", "source": "langchain.chains", "docs": "https://api.python.langchain.com/en/latest/chains/langchain.chains.retrieval_qa.base.RetrievalQA.html", "title": "ScaNN"}, {"imported": "google_palm", "source": "langchain.chat_models", "docs": "https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.google_palm.google_palm.html", "title": "ScaNN"}]--\x3e\nfrom langchain.chains import RetrievalQA\nfrom langchain.chat_models import google_palm\n\npalm_client = google_palm.ChatGooglePalm(google_api_key=\'YOUR_GOOGLE_PALM_API_KEY\')\n\nqa = RetrievalQA.from_chain_type(\n    llm=palm_client,\n    chain_type="stuff",\n    retriever=db.as_retriever(search_kwargs={\'k\': 10})\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(qa.run('What did the president say about Ketanji Brown Jackson?'))\n")),(0,o.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(qa.run('What did the president say about Michael Phelps?'))\n")),(0,o.kt)(d,{lang:"python",mdxType:"CodeOutputBlock"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    The president did not mention Michael Phelps in his speech.\n"))),(0,o.kt)("h2",{id:"save-and-loading-local-retrieval-index"},"Save and loading local retrieval index"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.save_local('/tmp/db', 'state_of_union')\nrestored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')\n")))}h.isMDXComponent=!0}}]);